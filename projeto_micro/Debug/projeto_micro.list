
projeto_micro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003df8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  08003f04  08003f04  00013f04  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003fa0  08003fa0  00013fa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003fa4  08003fa4  00013fa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000000f8  20000000  08003fa8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000099c  200000f8  080040a0  000200f8  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000a94  080040a0  00020a94  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001dabf  00000000  00000000  00020121  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003f64  00000000  00000000  0003dbe0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007e0e  00000000  00000000  00041b44  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000b00  00000000  00000000  00049958  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000010b8  00000000  00000000  0004a458  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00007d3b  00000000  00000000  0004b510  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003d88  00000000  00000000  0005324b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00056fd3  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001d98  00000000  00000000  00057050  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000f8 	.word	0x200000f8
 8000128:	00000000 	.word	0x00000000
 800012c:	08003eec 	.word	0x08003eec

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000fc 	.word	0x200000fc
 8000148:	08003eec 	.word	0x08003eec

0800014c <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 800014c:	4b08      	ldr	r3, [pc, #32]	; (8000170 <HAL_InitTick+0x24>)
{
 800014e:	b510      	push	{r4, lr}
 8000150:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000U);
 8000152:	6818      	ldr	r0, [r3, #0]
 8000154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000158:	fbb0 f0f3 	udiv	r0, r0, r3
 800015c:	f000 f88c 	bl	8000278 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000160:	2200      	movs	r2, #0
 8000162:	4621      	mov	r1, r4
 8000164:	f04f 30ff 	mov.w	r0, #4294967295
 8000168:	f000 f846 	bl	80001f8 <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 800016c:	2000      	movs	r0, #0
 800016e:	bd10      	pop	{r4, pc}
 8000170:	200000c0 	.word	0x200000c0

08000174 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000174:	4a07      	ldr	r2, [pc, #28]	; (8000194 <HAL_Init+0x20>)
{
 8000176:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000178:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800017a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800017c:	f043 0310 	orr.w	r3, r3, #16
 8000180:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000182:	f000 f827 	bl	80001d4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000186:	2000      	movs	r0, #0
 8000188:	f7ff ffe0 	bl	800014c <HAL_InitTick>
  HAL_MspInit();
 800018c:	f003 fc52 	bl	8003a34 <HAL_MspInit>
}
 8000190:	2000      	movs	r0, #0
 8000192:	bd08      	pop	{r3, pc}
 8000194:	40022000 	.word	0x40022000

08000198 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000198:	4a02      	ldr	r2, [pc, #8]	; (80001a4 <HAL_IncTick+0xc>)
 800019a:	6813      	ldr	r3, [r2, #0]
 800019c:	3301      	adds	r3, #1
 800019e:	6013      	str	r3, [r2, #0]
 80001a0:	4770      	bx	lr
 80001a2:	bf00      	nop
 80001a4:	2000012c 	.word	0x2000012c

080001a8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001a8:	4b01      	ldr	r3, [pc, #4]	; (80001b0 <HAL_GetTick+0x8>)
 80001aa:	6818      	ldr	r0, [r3, #0]
}
 80001ac:	4770      	bx	lr
 80001ae:	bf00      	nop
 80001b0:	2000012c 	.word	0x2000012c

080001b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80001b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80001b6:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 80001b8:	f7ff fff6 	bl	80001a8 <HAL_GetTick>
 80001bc:	4605      	mov	r5, r0
  uint32_t wait = Delay;
 80001be:	9c01      	ldr	r4, [sp, #4]
  
  /* Add a period to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80001c0:	1c63      	adds	r3, r4, #1
  {
     wait++;
 80001c2:	bf18      	it	ne
 80001c4:	3401      	addne	r4, #1
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80001c6:	f7ff ffef 	bl	80001a8 <HAL_GetTick>
 80001ca:	1b40      	subs	r0, r0, r5
 80001cc:	42a0      	cmp	r0, r4
 80001ce:	d3fa      	bcc.n	80001c6 <HAL_Delay+0x12>
  {
  }
}
 80001d0:	b003      	add	sp, #12
 80001d2:	bd30      	pop	{r4, r5, pc}

080001d4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001d4:	4a07      	ldr	r2, [pc, #28]	; (80001f4 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80001d6:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001d8:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80001da:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80001de:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80001e2:	041b      	lsls	r3, r3, #16
 80001e4:	0c1b      	lsrs	r3, r3, #16
 80001e6:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80001ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80001ee:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80001f0:	60d3      	str	r3, [r2, #12]
 80001f2:	4770      	bx	lr
 80001f4:	e000ed00 	.word	0xe000ed00

080001f8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80001f8:	4b17      	ldr	r3, [pc, #92]	; (8000258 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80001fa:	b530      	push	{r4, r5, lr}
 80001fc:	68dc      	ldr	r4, [r3, #12]
 80001fe:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000202:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000206:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000208:	2b04      	cmp	r3, #4
 800020a:	bf28      	it	cs
 800020c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800020e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000210:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000214:	bf98      	it	ls
 8000216:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000218:	fa05 f303 	lsl.w	r3, r5, r3
 800021c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000220:	bf88      	it	hi
 8000222:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000224:	4019      	ands	r1, r3
 8000226:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000228:	fa05 f404 	lsl.w	r4, r5, r4
 800022c:	3c01      	subs	r4, #1
 800022e:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000230:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000232:	ea42 0201 	orr.w	r2, r2, r1
 8000236:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800023a:	bfaf      	iteee	ge
 800023c:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000240:	4b06      	ldrlt	r3, [pc, #24]	; (800025c <HAL_NVIC_SetPriority+0x64>)
 8000242:	f000 000f 	andlt.w	r0, r0, #15
 8000246:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000248:	bfa5      	ittet	ge
 800024a:	b2d2      	uxtbge	r2, r2
 800024c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000250:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000252:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000256:	bd30      	pop	{r4, r5, pc}
 8000258:	e000ed00 	.word	0xe000ed00
 800025c:	e000ed14 	.word	0xe000ed14

08000260 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000260:	2301      	movs	r3, #1
 8000262:	0942      	lsrs	r2, r0, #5
 8000264:	f000 001f 	and.w	r0, r0, #31
 8000268:	fa03 f000 	lsl.w	r0, r3, r0
 800026c:	4b01      	ldr	r3, [pc, #4]	; (8000274 <HAL_NVIC_EnableIRQ+0x14>)
 800026e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000272:	4770      	bx	lr
 8000274:	e000e100 	.word	0xe000e100

08000278 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000278:	3801      	subs	r0, #1
 800027a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800027e:	d20a      	bcs.n	8000296 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000280:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000282:	4b06      	ldr	r3, [pc, #24]	; (800029c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000284:	4a06      	ldr	r2, [pc, #24]	; (80002a0 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000286:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000288:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800028c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800028e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000290:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000292:	601a      	str	r2, [r3, #0]
 8000294:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000296:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000298:	4770      	bx	lr
 800029a:	bf00      	nop
 800029c:	e000e010 	.word	0xe000e010
 80002a0:	e000ed00 	.word	0xe000ed00

080002a4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80002a4:	4b04      	ldr	r3, [pc, #16]	; (80002b8 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80002a6:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80002a8:	681a      	ldr	r2, [r3, #0]
 80002aa:	bf0c      	ite	eq
 80002ac:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80002b0:	f022 0204 	bicne.w	r2, r2, #4
 80002b4:	601a      	str	r2, [r3, #0]
 80002b6:	4770      	bx	lr
 80002b8:	e000e010 	.word	0xe000e010

080002bc <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80002bc:	4770      	bx	lr

080002be <HAL_SYSTICK_IRQHandler>:
{
 80002be:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 80002c0:	f7ff fffc 	bl	80002bc <HAL_SYSTICK_Callback>
 80002c4:	bd08      	pop	{r3, pc}
	...

080002c8 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80002c8:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
{  
 80002cc:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80002ce:	2b02      	cmp	r3, #2
 80002d0:	d003      	beq.n	80002da <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80002d2:	2304      	movs	r3, #4
 80002d4:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 80002d6:	2001      	movs	r0, #1
 80002d8:	bd10      	pop	{r4, pc}
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80002da:	6803      	ldr	r3, [r0, #0]
 80002dc:	681a      	ldr	r2, [r3, #0]
 80002de:	f022 020e 	bic.w	r2, r2, #14
 80002e2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80002e4:	681a      	ldr	r2, [r3, #0]
 80002e6:	f022 0201 	bic.w	r2, r2, #1
 80002ea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80002ec:	4a18      	ldr	r2, [pc, #96]	; (8000350 <HAL_DMA_Abort_IT+0x88>)
 80002ee:	4293      	cmp	r3, r2
 80002f0:	d01f      	beq.n	8000332 <HAL_DMA_Abort_IT+0x6a>
 80002f2:	3214      	adds	r2, #20
 80002f4:	4293      	cmp	r3, r2
 80002f6:	d01e      	beq.n	8000336 <HAL_DMA_Abort_IT+0x6e>
 80002f8:	3214      	adds	r2, #20
 80002fa:	4293      	cmp	r3, r2
 80002fc:	d01d      	beq.n	800033a <HAL_DMA_Abort_IT+0x72>
 80002fe:	3214      	adds	r2, #20
 8000300:	4293      	cmp	r3, r2
 8000302:	d01d      	beq.n	8000340 <HAL_DMA_Abort_IT+0x78>
 8000304:	3214      	adds	r2, #20
 8000306:	4293      	cmp	r3, r2
 8000308:	d01d      	beq.n	8000346 <HAL_DMA_Abort_IT+0x7e>
 800030a:	3214      	adds	r2, #20
 800030c:	4293      	cmp	r3, r2
 800030e:	bf0c      	ite	eq
 8000310:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8000314:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8000318:	4a0e      	ldr	r2, [pc, #56]	; (8000354 <HAL_DMA_Abort_IT+0x8c>)

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800031a:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800031c:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800031e:	2301      	movs	r3, #1
 8000320:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000324:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 8000326:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 800032a:	b17b      	cbz	r3, 800034c <HAL_DMA_Abort_IT+0x84>
    {
      hdma->XferAbortCallback(hdma);
 800032c:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800032e:	4620      	mov	r0, r4
 8000330:	bd10      	pop	{r4, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000332:	2301      	movs	r3, #1
 8000334:	e7f0      	b.n	8000318 <HAL_DMA_Abort_IT+0x50>
 8000336:	2310      	movs	r3, #16
 8000338:	e7ee      	b.n	8000318 <HAL_DMA_Abort_IT+0x50>
 800033a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800033e:	e7eb      	b.n	8000318 <HAL_DMA_Abort_IT+0x50>
 8000340:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000344:	e7e8      	b.n	8000318 <HAL_DMA_Abort_IT+0x50>
 8000346:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800034a:	e7e5      	b.n	8000318 <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 800034c:	4618      	mov	r0, r3
    } 
  }
  return status;
}
 800034e:	bd10      	pop	{r4, pc}
 8000350:	40020008 	.word	0x40020008
 8000354:	40020000 	.word	0x40020000

08000358 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000358:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 800035c:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 800035e:	4616      	mov	r6, r2
 8000360:	4b65      	ldr	r3, [pc, #404]	; (80004f8 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000362:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8000508 <HAL_GPIO_Init+0x1b0>
 8000366:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 800050c <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 800036a:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800036e:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 8000370:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000374:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 8000378:	45a0      	cmp	r8, r4
 800037a:	d17f      	bne.n	800047c <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 800037c:	684d      	ldr	r5, [r1, #4]
 800037e:	2d12      	cmp	r5, #18
 8000380:	f000 80af 	beq.w	80004e2 <HAL_GPIO_Init+0x18a>
 8000384:	f200 8088 	bhi.w	8000498 <HAL_GPIO_Init+0x140>
 8000388:	2d02      	cmp	r5, #2
 800038a:	f000 80a7 	beq.w	80004dc <HAL_GPIO_Init+0x184>
 800038e:	d87c      	bhi.n	800048a <HAL_GPIO_Init+0x132>
 8000390:	2d00      	cmp	r5, #0
 8000392:	f000 808e 	beq.w	80004b2 <HAL_GPIO_Init+0x15a>
 8000396:	2d01      	cmp	r5, #1
 8000398:	f000 809e 	beq.w	80004d8 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);
      
      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 800039c:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80003a0:	2cff      	cmp	r4, #255	; 0xff
 80003a2:	bf93      	iteet	ls
 80003a4:	4682      	movls	sl, r0
 80003a6:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 80003aa:	3d08      	subhi	r5, #8
 80003ac:	f8d0 b000 	ldrls.w	fp, [r0]
 80003b0:	bf92      	itee	ls
 80003b2:	00b5      	lslls	r5, r6, #2
 80003b4:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 80003b8:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 80003ba:	fa09 f805 	lsl.w	r8, r9, r5
 80003be:	ea2b 0808 	bic.w	r8, fp, r8
 80003c2:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80003c6:	bf88      	it	hi
 80003c8:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset ), (config << registeroffset));
 80003cc:	ea48 0505 	orr.w	r5, r8, r5
 80003d0:	f8ca 5000 	str.w	r5, [sl]
      
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80003d4:	f8d1 a004 	ldr.w	sl, [r1, #4]
 80003d8:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 80003dc:	d04e      	beq.n	800047c <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80003de:	4d47      	ldr	r5, [pc, #284]	; (80004fc <HAL_GPIO_Init+0x1a4>)
 80003e0:	4f46      	ldr	r7, [pc, #280]	; (80004fc <HAL_GPIO_Init+0x1a4>)
 80003e2:	69ad      	ldr	r5, [r5, #24]
 80003e4:	f026 0803 	bic.w	r8, r6, #3
 80003e8:	f045 0501 	orr.w	r5, r5, #1
 80003ec:	61bd      	str	r5, [r7, #24]
 80003ee:	69bd      	ldr	r5, [r7, #24]
 80003f0:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 80003f4:	f005 0501 	and.w	r5, r5, #1
 80003f8:	9501      	str	r5, [sp, #4]
 80003fa:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 80003fe:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000402:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000404:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8000408:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800040c:	fa09 f90b 	lsl.w	r9, r9, fp
 8000410:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000414:	4d3a      	ldr	r5, [pc, #232]	; (8000500 <HAL_GPIO_Init+0x1a8>)
 8000416:	42a8      	cmp	r0, r5
 8000418:	d068      	beq.n	80004ec <HAL_GPIO_Init+0x194>
 800041a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800041e:	42a8      	cmp	r0, r5
 8000420:	d066      	beq.n	80004f0 <HAL_GPIO_Init+0x198>
 8000422:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000426:	42a8      	cmp	r0, r5
 8000428:	d064      	beq.n	80004f4 <HAL_GPIO_Init+0x19c>
 800042a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800042e:	42a8      	cmp	r0, r5
 8000430:	bf0c      	ite	eq
 8000432:	2503      	moveq	r5, #3
 8000434:	2504      	movne	r5, #4
 8000436:	fa05 f50b 	lsl.w	r5, r5, fp
 800043a:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 800043e:	f8c8 5008 	str.w	r5, [r8, #8]
        

        /* Configure the interrupt mask */
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent); 
 8000442:	681d      	ldr	r5, [r3, #0]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000444:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent); 
 8000448:	bf14      	ite	ne
 800044a:	4325      	orrne	r5, r4
        } 
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent); 
 800044c:	43a5      	biceq	r5, r4
 800044e:	601d      	str	r5, [r3, #0]
        } 
        
        /* Configure the event mask */
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent); 
 8000450:	685d      	ldr	r5, [r3, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000452:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent); 
 8000456:	bf14      	ite	ne
 8000458:	4325      	orrne	r5, r4
        } 
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent); 
 800045a:	43a5      	biceq	r5, r4
 800045c:	605d      	str	r5, [r3, #4]
        }
        
        /* Enable or disable the rising trigger */
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent); 
 800045e:	689d      	ldr	r5, [r3, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000460:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent); 
 8000464:	bf14      	ite	ne
 8000466:	4325      	orrne	r5, r4
        } 
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent); 
 8000468:	43a5      	biceq	r5, r4
 800046a:	609d      	str	r5, [r3, #8]
        }
        
        /* Enable or disable the falling trigger */
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent); 
 800046c:	68dd      	ldr	r5, [r3, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800046e:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent); 
 8000472:	bf14      	ite	ne
 8000474:	432c      	orrne	r4, r5
        } 
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent); 
 8000476:	ea25 0404 	biceq.w	r4, r5, r4
 800047a:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 800047c:	3601      	adds	r6, #1
 800047e:	2e10      	cmp	r6, #16
 8000480:	f47f af73 	bne.w	800036a <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 8000484:	b003      	add	sp, #12
 8000486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 800048a:	2d03      	cmp	r5, #3
 800048c:	d022      	beq.n	80004d4 <HAL_GPIO_Init+0x17c>
 800048e:	2d11      	cmp	r5, #17
 8000490:	d184      	bne.n	800039c <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000492:	68ca      	ldr	r2, [r1, #12]
 8000494:	3204      	adds	r2, #4
          break;
 8000496:	e781      	b.n	800039c <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000498:	4f1a      	ldr	r7, [pc, #104]	; (8000504 <HAL_GPIO_Init+0x1ac>)
 800049a:	42bd      	cmp	r5, r7
 800049c:	d009      	beq.n	80004b2 <HAL_GPIO_Init+0x15a>
 800049e:	d812      	bhi.n	80004c6 <HAL_GPIO_Init+0x16e>
 80004a0:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8000510 <HAL_GPIO_Init+0x1b8>
 80004a4:	454d      	cmp	r5, r9
 80004a6:	d004      	beq.n	80004b2 <HAL_GPIO_Init+0x15a>
 80004a8:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 80004ac:	454d      	cmp	r5, r9
 80004ae:	f47f af75 	bne.w	800039c <HAL_GPIO_Init+0x44>
          if(GPIO_Init->Pull == GPIO_NOPULL)
 80004b2:	688a      	ldr	r2, [r1, #8]
 80004b4:	b1c2      	cbz	r2, 80004e8 <HAL_GPIO_Init+0x190>
          else if(GPIO_Init->Pull == GPIO_PULLUP)
 80004b6:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 80004b8:	bf0c      	ite	eq
 80004ba:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 80004be:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80004c2:	2208      	movs	r2, #8
 80004c4:	e76a      	b.n	800039c <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 80004c6:	4575      	cmp	r5, lr
 80004c8:	d0f3      	beq.n	80004b2 <HAL_GPIO_Init+0x15a>
 80004ca:	4565      	cmp	r5, ip
 80004cc:	d0f1      	beq.n	80004b2 <HAL_GPIO_Init+0x15a>
 80004ce:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8000514 <HAL_GPIO_Init+0x1bc>
 80004d2:	e7eb      	b.n	80004ac <HAL_GPIO_Init+0x154>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80004d4:	2200      	movs	r2, #0
 80004d6:	e761      	b.n	800039c <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80004d8:	68ca      	ldr	r2, [r1, #12]
          break;
 80004da:	e75f      	b.n	800039c <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80004dc:	68ca      	ldr	r2, [r1, #12]
 80004de:	3208      	adds	r2, #8
          break;
 80004e0:	e75c      	b.n	800039c <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80004e2:	68ca      	ldr	r2, [r1, #12]
 80004e4:	320c      	adds	r2, #12
          break;
 80004e6:	e759      	b.n	800039c <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80004e8:	2204      	movs	r2, #4
 80004ea:	e757      	b.n	800039c <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80004ec:	2500      	movs	r5, #0
 80004ee:	e7a2      	b.n	8000436 <HAL_GPIO_Init+0xde>
 80004f0:	2501      	movs	r5, #1
 80004f2:	e7a0      	b.n	8000436 <HAL_GPIO_Init+0xde>
 80004f4:	2502      	movs	r5, #2
 80004f6:	e79e      	b.n	8000436 <HAL_GPIO_Init+0xde>
 80004f8:	40010400 	.word	0x40010400
 80004fc:	40021000 	.word	0x40021000
 8000500:	40010800 	.word	0x40010800
 8000504:	10210000 	.word	0x10210000
 8000508:	10310000 	.word	0x10310000
 800050c:	10320000 	.word	0x10320000
 8000510:	10110000 	.word	0x10110000
 8000514:	10220000 	.word	0x10220000

08000518 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000518:	6802      	ldr	r2, [r0, #0]
 800051a:	6953      	ldr	r3, [r2, #20]
 800051c:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8000520:	d00d      	beq.n	800053e <I2C_IsAcknowledgeFailed+0x26>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000522:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8000526:	6153      	str	r3, [r2, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8000528:	2304      	movs	r3, #4
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State= HAL_I2C_STATE_READY;
 800052a:	2220      	movs	r2, #32
    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800052c:	6403      	str	r3, [r0, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 800052e:	2300      	movs	r3, #0
 8000530:	6303      	str	r3, [r0, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000532:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    hi2c->State= HAL_I2C_STATE_READY;
 8000536:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

    return HAL_ERROR;
 800053a:	2001      	movs	r0, #1
 800053c:	4770      	bx	lr
  }
  return HAL_OK;
 800053e:	4618      	mov	r0, r3
}
 8000540:	4770      	bx	lr

08000542 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8000542:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000546:	4604      	mov	r4, r0
 8000548:	4617      	mov	r7, r2
 800054a:	4699      	mov	r9, r3
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800054c:	f3c1 4807 	ubfx	r8, r1, #16, #8
 8000550:	b28e      	uxth	r6, r1
 8000552:	6825      	ldr	r5, [r4, #0]
 8000554:	f1b8 0f01 	cmp.w	r8, #1
 8000558:	bf0c      	ite	eq
 800055a:	696b      	ldreq	r3, [r5, #20]
 800055c:	69ab      	ldrne	r3, [r5, #24]
 800055e:	ea36 0303 	bics.w	r3, r6, r3
 8000562:	bf14      	ite	ne
 8000564:	2001      	movne	r0, #1
 8000566:	2000      	moveq	r0, #0
 8000568:	b908      	cbnz	r0, 800056e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 800056a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800056e:	696b      	ldr	r3, [r5, #20]
 8000570:	055a      	lsls	r2, r3, #21
 8000572:	d512      	bpl.n	800059a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x58>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000574:	682b      	ldr	r3, [r5, #0]
      hi2c->State= HAL_I2C_STATE_READY;
 8000576:	2220      	movs	r2, #32
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000578:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800057c:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800057e:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8000582:	616b      	str	r3, [r5, #20]
      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8000584:	2304      	movs	r3, #4
 8000586:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->PreviousState = I2C_STATE_NONE;
 8000588:	2300      	movs	r3, #0
      return HAL_ERROR;
 800058a:	2001      	movs	r0, #1
      hi2c->PreviousState = I2C_STATE_NONE;
 800058c:	6323      	str	r3, [r4, #48]	; 0x30
      __HAL_UNLOCK(hi2c);
 800058e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->State= HAL_I2C_STATE_READY;
 8000592:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 8000596:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 800059a:	1c7b      	adds	r3, r7, #1
 800059c:	d0d9      	beq.n	8000552 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 800059e:	b94f      	cbnz	r7, 80005b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x72>
        hi2c->PreviousState = I2C_STATE_NONE;
 80005a0:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 80005a2:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 80005a4:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 80005a6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 80005aa:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        return HAL_TIMEOUT;
 80005ae:	2003      	movs	r0, #3
 80005b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80005b4:	f7ff fdf8 	bl	80001a8 <HAL_GetTick>
 80005b8:	eba0 0009 	sub.w	r0, r0, r9
 80005bc:	4287      	cmp	r7, r0
 80005be:	d2c8      	bcs.n	8000552 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 80005c0:	e7ee      	b.n	80005a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>

080005c2 <I2C_WaitOnFlagUntilTimeout>:
{
 80005c2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80005c6:	4604      	mov	r4, r0
 80005c8:	4690      	mov	r8, r2
 80005ca:	461f      	mov	r7, r3
 80005cc:	9e08      	ldr	r6, [sp, #32]
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 80005ce:	f3c1 4907 	ubfx	r9, r1, #16, #8
 80005d2:	b28d      	uxth	r5, r1
 80005d4:	6823      	ldr	r3, [r4, #0]
 80005d6:	f1b9 0f01 	cmp.w	r9, #1
 80005da:	bf0c      	ite	eq
 80005dc:	695b      	ldreq	r3, [r3, #20]
 80005de:	699b      	ldrne	r3, [r3, #24]
 80005e0:	ea35 0303 	bics.w	r3, r5, r3
 80005e4:	bf0c      	ite	eq
 80005e6:	2301      	moveq	r3, #1
 80005e8:	2300      	movne	r3, #0
 80005ea:	4543      	cmp	r3, r8
 80005ec:	d002      	beq.n	80005f4 <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 80005ee:	2000      	movs	r0, #0
}
 80005f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 80005f4:	1c7b      	adds	r3, r7, #1
 80005f6:	d0ed      	beq.n	80005d4 <I2C_WaitOnFlagUntilTimeout+0x12>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 80005f8:	b95f      	cbnz	r7, 8000612 <I2C_WaitOnFlagUntilTimeout+0x50>
        hi2c->PreviousState = I2C_STATE_NONE;
 80005fa:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 80005fc:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 80005fe:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8000600:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8000604:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8000608:	2003      	movs	r0, #3
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800060a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800060e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000612:	f7ff fdc9 	bl	80001a8 <HAL_GetTick>
 8000616:	1b80      	subs	r0, r0, r6
 8000618:	4287      	cmp	r7, r0
 800061a:	d2db      	bcs.n	80005d4 <I2C_WaitOnFlagUntilTimeout+0x12>
 800061c:	e7ed      	b.n	80005fa <I2C_WaitOnFlagUntilTimeout+0x38>

0800061e <I2C_WaitOnTXEFlagUntilTimeout>:
{    
 800061e:	b570      	push	{r4, r5, r6, lr}
 8000620:	4604      	mov	r4, r0
 8000622:	460d      	mov	r5, r1
 8000624:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000626:	6823      	ldr	r3, [r4, #0]
 8000628:	695b      	ldr	r3, [r3, #20]
 800062a:	061b      	lsls	r3, r3, #24
 800062c:	d501      	bpl.n	8000632 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;      
 800062e:	2000      	movs	r0, #0
 8000630:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8000632:	4620      	mov	r0, r4
 8000634:	f7ff ff70 	bl	8000518 <I2C_IsAcknowledgeFailed>
 8000638:	b9a8      	cbnz	r0, 8000666 <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 800063a:	1c6a      	adds	r2, r5, #1
 800063c:	d0f3      	beq.n	8000626 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800063e:	b965      	cbnz	r5, 800065a <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000640:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 8000642:	2220      	movs	r2, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000644:	f043 0320 	orr.w	r3, r3, #32
 8000648:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 800064a:	2300      	movs	r3, #0
        __HAL_UNLOCK(hi2c);
 800064c:	2003      	movs	r0, #3
        hi2c->PreviousState = I2C_STATE_NONE;
 800064e:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8000650:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8000654:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 8000658:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800065a:	f7ff fda5 	bl	80001a8 <HAL_GetTick>
 800065e:	1b80      	subs	r0, r0, r6
 8000660:	4285      	cmp	r5, r0
 8000662:	d2e0      	bcs.n	8000626 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
 8000664:	e7ec      	b.n	8000640 <I2C_WaitOnTXEFlagUntilTimeout+0x22>
      return HAL_ERROR;
 8000666:	2001      	movs	r0, #1
}
 8000668:	bd70      	pop	{r4, r5, r6, pc}

0800066a <I2C_WaitOnRXNEFlagUntilTimeout>:
{  
 800066a:	b570      	push	{r4, r5, r6, lr}
 800066c:	4604      	mov	r4, r0
 800066e:	460d      	mov	r5, r1
 8000670:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8000672:	6820      	ldr	r0, [r4, #0]
 8000674:	6943      	ldr	r3, [r0, #20]
 8000676:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 800067a:	d001      	beq.n	8000680 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 800067c:	2000      	movs	r0, #0
}
 800067e:	bd70      	pop	{r4, r5, r6, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8000680:	6942      	ldr	r2, [r0, #20]
 8000682:	06d2      	lsls	r2, r2, #27
 8000684:	d50b      	bpl.n	800069e <I2C_WaitOnRXNEFlagUntilTimeout+0x34>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000686:	f06f 0210 	mvn.w	r2, #16
 800068a:	6142      	str	r2, [r0, #20]
      hi2c->State= HAL_I2C_STATE_READY;
 800068c:	2220      	movs	r2, #32
      hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800068e:	6423      	str	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8000690:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->PreviousState = I2C_STATE_NONE;
 8000694:	6323      	str	r3, [r4, #48]	; 0x30
      return HAL_ERROR;
 8000696:	2001      	movs	r0, #1
      hi2c->State= HAL_I2C_STATE_READY;
 8000698:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 800069c:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800069e:	b95d      	cbnz	r5, 80006b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x4e>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80006a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80006a2:	2003      	movs	r0, #3
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80006a4:	f043 0320 	orr.w	r3, r3, #32
 80006a8:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 80006aa:	2320      	movs	r3, #32
 80006ac:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      __HAL_UNLOCK(hi2c);
 80006b0:	2300      	movs	r3, #0
 80006b2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 80006b6:	bd70      	pop	{r4, r5, r6, pc}
    if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80006b8:	f7ff fd76 	bl	80001a8 <HAL_GetTick>
 80006bc:	1b80      	subs	r0, r0, r6
 80006be:	4285      	cmp	r5, r0
 80006c0:	d2d7      	bcs.n	8000672 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
 80006c2:	e7ed      	b.n	80006a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x36>

080006c4 <I2C_WaitOnBTFFlagUntilTimeout>:
{  
 80006c4:	b570      	push	{r4, r5, r6, lr}
 80006c6:	4604      	mov	r4, r0
 80006c8:	460d      	mov	r5, r1
 80006ca:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80006cc:	6823      	ldr	r3, [r4, #0]
 80006ce:	695b      	ldr	r3, [r3, #20]
 80006d0:	075b      	lsls	r3, r3, #29
 80006d2:	d501      	bpl.n	80006d8 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 80006d4:	2000      	movs	r0, #0
 80006d6:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80006d8:	4620      	mov	r0, r4
 80006da:	f7ff ff1d 	bl	8000518 <I2C_IsAcknowledgeFailed>
 80006de:	b9a8      	cbnz	r0, 800070c <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 80006e0:	1c6a      	adds	r2, r5, #1
 80006e2:	d0f3      	beq.n	80006cc <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80006e4:	b965      	cbnz	r5, 8000700 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80006e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 80006e8:	2220      	movs	r2, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80006ea:	f043 0320 	orr.w	r3, r3, #32
 80006ee:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->PreviousState = I2C_STATE_NONE;
 80006f0:	2300      	movs	r3, #0
        __HAL_UNLOCK(hi2c);
 80006f2:	2003      	movs	r0, #3
        hi2c->PreviousState = I2C_STATE_NONE;
 80006f4:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 80006f6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 80006fa:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
 80006fe:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000700:	f7ff fd52 	bl	80001a8 <HAL_GetTick>
 8000704:	1b80      	subs	r0, r0, r6
 8000706:	4285      	cmp	r5, r0
 8000708:	d2e0      	bcs.n	80006cc <I2C_WaitOnBTFFlagUntilTimeout+0x8>
 800070a:	e7ec      	b.n	80006e6 <I2C_WaitOnBTFFlagUntilTimeout+0x22>
      return HAL_ERROR;
 800070c:	2001      	movs	r0, #1
}
 800070e:	bd70      	pop	{r4, r5, r6, pc}

08000710 <HAL_I2C_Init>:
{
 8000710:	b570      	push	{r4, r5, r6, lr}
  if(hi2c == NULL)
 8000712:	4604      	mov	r4, r0
 8000714:	2800      	cmp	r0, #0
 8000716:	d063      	beq.n	80007e0 <HAL_I2C_Init+0xd0>
  if(hi2c->State == HAL_I2C_STATE_RESET)
 8000718:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800071c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000720:	b91b      	cbnz	r3, 800072a <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8000722:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8000726:	f002 fee7 	bl	80034f8 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800072a:	2324      	movs	r3, #36	; 0x24
  __HAL_I2C_DISABLE(hi2c);
 800072c:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800072e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8000732:	6813      	ldr	r3, [r2, #0]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000734:	4e2b      	ldr	r6, [pc, #172]	; (80007e4 <HAL_I2C_Init+0xd4>)
  __HAL_I2C_DISABLE(hi2c);
 8000736:	f023 0301 	bic.w	r3, r3, #1
 800073a:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800073c:	f001 fe0a 	bl	8002354 <HAL_RCC_GetPCLK1Freq>
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000740:	6863      	ldr	r3, [r4, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8000742:	4d29      	ldr	r5, [pc, #164]	; (80007e8 <HAL_I2C_Init+0xd8>)
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000744:	42b3      	cmp	r3, r6
  freqrange = I2C_FREQRANGE(pclk1);
 8000746:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 800074a:	bf88      	it	hi
 800074c:	f44f 7196 	movhi.w	r1, #300	; 0x12c
  hi2c->Instance->CR2 = freqrange;
 8000750:	6822      	ldr	r2, [r4, #0]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000752:	bf88      	it	hi
 8000754:	4369      	mulhi	r1, r5
  hi2c->Instance->CR2 = freqrange;
 8000756:	6055      	str	r5, [r2, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000758:	bf85      	ittet	hi
 800075a:	f44f 757a 	movhi.w	r5, #1000	; 0x3e8
 800075e:	fbb1 f1f5 	udivhi	r1, r1, r5
 8000762:	1c69      	addls	r1, r5, #1
 8000764:	3101      	addhi	r1, #1
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8000766:	42b3      	cmp	r3, r6
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000768:	6211      	str	r1, [r2, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 800076a:	d821      	bhi.n	80007b0 <HAL_I2C_Init+0xa0>
 800076c:	005b      	lsls	r3, r3, #1
 800076e:	fbb0 f0f3 	udiv	r0, r0, r3
 8000772:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8000776:	2b03      	cmp	r3, #3
 8000778:	bf98      	it	ls
 800077a:	2004      	movls	r0, #4
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800077c:	6a21      	ldr	r1, [r4, #32]
 800077e:	69e3      	ldr	r3, [r4, #28]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8000780:	61d0      	str	r0, [r2, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000782:	430b      	orrs	r3, r1
 8000784:	6013      	str	r3, [r2, #0]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8000786:	68e1      	ldr	r1, [r4, #12]
 8000788:	6923      	ldr	r3, [r4, #16]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800078a:	2000      	movs	r0, #0
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 800078c:	430b      	orrs	r3, r1
 800078e:	6093      	str	r3, [r2, #8]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8000790:	69a1      	ldr	r1, [r4, #24]
 8000792:	6963      	ldr	r3, [r4, #20]
 8000794:	430b      	orrs	r3, r1
 8000796:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8000798:	6813      	ldr	r3, [r2, #0]
 800079a:	f043 0301 	orr.w	r3, r3, #1
 800079e:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80007a0:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80007a2:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80007a4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80007a8:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80007aa:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 80007ae:	bd70      	pop	{r4, r5, r6, pc}
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80007b0:	68a1      	ldr	r1, [r4, #8]
 80007b2:	b949      	cbnz	r1, 80007c8 <HAL_I2C_Init+0xb8>
 80007b4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80007b8:	fbb0 f0f3 	udiv	r0, r0, r3
 80007bc:	f3c0 030b 	ubfx	r3, r0, #0, #12
 80007c0:	b163      	cbz	r3, 80007dc <HAL_I2C_Init+0xcc>
 80007c2:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 80007c6:	e7d9      	b.n	800077c <HAL_I2C_Init+0x6c>
 80007c8:	2119      	movs	r1, #25
 80007ca:	434b      	muls	r3, r1
 80007cc:	fbb0 f0f3 	udiv	r0, r0, r3
 80007d0:	f3c0 030b 	ubfx	r3, r0, #0, #12
 80007d4:	b113      	cbz	r3, 80007dc <HAL_I2C_Init+0xcc>
 80007d6:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 80007da:	e7cf      	b.n	800077c <HAL_I2C_Init+0x6c>
 80007dc:	2001      	movs	r0, #1
 80007de:	e7cd      	b.n	800077c <HAL_I2C_Init+0x6c>
    return HAL_ERROR;
 80007e0:	2001      	movs	r0, #1
}
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	000186a0 	.word	0x000186a0
 80007e8:	000f4240 	.word	0x000f4240

080007ec <HAL_I2C_Master_Transmit>:
{
 80007ec:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80007f0:	4604      	mov	r4, r0
 80007f2:	461f      	mov	r7, r3
 80007f4:	460d      	mov	r5, r1
 80007f6:	4690      	mov	r8, r2
  tickstart = HAL_GetTick();
 80007f8:	f7ff fcd6 	bl	80001a8 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 80007fc:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 8000800:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 8000802:	2b20      	cmp	r3, #32
 8000804:	d004      	beq.n	8000810 <HAL_I2C_Master_Transmit+0x24>
    return HAL_BUSY;
 8000806:	2502      	movs	r5, #2
}
 8000808:	4628      	mov	r0, r5
 800080a:	b004      	add	sp, #16
 800080c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000810:	9000      	str	r0, [sp, #0]
 8000812:	2319      	movs	r3, #25
 8000814:	2201      	movs	r2, #1
 8000816:	495d      	ldr	r1, [pc, #372]	; (800098c <HAL_I2C_Master_Transmit+0x1a0>)
 8000818:	4620      	mov	r0, r4
 800081a:	f7ff fed2 	bl	80005c2 <I2C_WaitOnFlagUntilTimeout>
 800081e:	2800      	cmp	r0, #0
 8000820:	d1f1      	bne.n	8000806 <HAL_I2C_Master_Transmit+0x1a>
    __HAL_LOCK(hi2c);
 8000822:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8000826:	2b01      	cmp	r3, #1
 8000828:	d0ed      	beq.n	8000806 <HAL_I2C_Master_Transmit+0x1a>
 800082a:	2301      	movs	r3, #1
 800082c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000830:	6823      	ldr	r3, [r4, #0]
 8000832:	681a      	ldr	r2, [r3, #0]
 8000834:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8000836:	bf5e      	ittt	pl
 8000838:	681a      	ldrpl	r2, [r3, #0]
 800083a:	f042 0201 	orrpl.w	r2, r2, #1
 800083e:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8000840:	681a      	ldr	r2, [r3, #0]
 8000842:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000846:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000848:	2221      	movs	r2, #33	; 0x21
 800084a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800084e:	2210      	movs	r2, #16
 8000850:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000854:	2200      	movs	r2, #0
 8000856:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000858:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
    hi2c->XferCount   = Size;
 800085c:	8567      	strh	r7, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800085e:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8000860:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 8000862:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 8000866:	8522      	strh	r2, [r4, #40]	; 0x28
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8000868:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800086a:	2a04      	cmp	r2, #4
 800086c:	d004      	beq.n	8000878 <HAL_I2C_Master_Transmit+0x8c>
 800086e:	2a01      	cmp	r2, #1
 8000870:	d002      	beq.n	8000878 <HAL_I2C_Master_Transmit+0x8c>
 8000872:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8000876:	d104      	bne.n	8000882 <HAL_I2C_Master_Transmit+0x96>
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8000878:	681a      	ldr	r2, [r3, #0]
 800087a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	e002      	b.n	8000888 <HAL_I2C_Master_Transmit+0x9c>
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8000882:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000884:	2a12      	cmp	r2, #18
 8000886:	d0f7      	beq.n	8000878 <HAL_I2C_Master_Transmit+0x8c>
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000888:	9600      	str	r6, [sp, #0]
 800088a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800088c:	2200      	movs	r2, #0
 800088e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000892:	4620      	mov	r0, r4
 8000894:	f7ff fe95 	bl	80005c2 <I2C_WaitOnFlagUntilTimeout>
 8000898:	bb28      	cbnz	r0, 80008e6 <HAL_I2C_Master_Transmit+0xfa>
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800089a:	6923      	ldr	r3, [r4, #16]
 800089c:	6822      	ldr	r2, [r4, #0]
 800089e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80008a2:	d112      	bne.n	80008ca <HAL_I2C_Master_Transmit+0xde>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80008a4:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 80008a8:	6115      	str	r5, [r2, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80008aa:	4633      	mov	r3, r6
 80008ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80008ae:	4938      	ldr	r1, [pc, #224]	; (8000990 <HAL_I2C_Master_Transmit+0x1a4>)
 80008b0:	4620      	mov	r0, r4
 80008b2:	f7ff fe46 	bl	8000542 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80008b6:	4605      	mov	r5, r0
 80008b8:	b9a0      	cbnz	r0, 80008e4 <HAL_I2C_Master_Transmit+0xf8>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80008ba:	6823      	ldr	r3, [r4, #0]
 80008bc:	9003      	str	r0, [sp, #12]
 80008be:	695a      	ldr	r2, [r3, #20]
 80008c0:	9203      	str	r2, [sp, #12]
 80008c2:	699b      	ldr	r3, [r3, #24]
 80008c4:	9303      	str	r3, [sp, #12]
 80008c6:	9b03      	ldr	r3, [sp, #12]
    while(hi2c->XferSize > 0U)
 80008c8:	e050      	b.n	800096c <HAL_I2C_Master_Transmit+0x180>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80008ca:	11eb      	asrs	r3, r5, #7
 80008cc:	f003 0306 	and.w	r3, r3, #6
 80008d0:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 80008d4:	6113      	str	r3, [r2, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80008d6:	492f      	ldr	r1, [pc, #188]	; (8000994 <HAL_I2C_Master_Transmit+0x1a8>)
 80008d8:	4633      	mov	r3, r6
 80008da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80008dc:	4620      	mov	r0, r4
 80008de:	f7ff fe30 	bl	8000542 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80008e2:	b148      	cbz	r0, 80008f8 <HAL_I2C_Master_Transmit+0x10c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80008e4:	6c23      	ldr	r3, [r4, #64]	; 0x40
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80008e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80008e8:	2b04      	cmp	r3, #4
 80008ea:	f04f 0300 	mov.w	r3, #0
 80008ee:	d107      	bne.n	8000900 <HAL_I2C_Master_Transmit+0x114>
        __HAL_UNLOCK(hi2c);
 80008f0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_ERROR;
 80008f4:	2501      	movs	r5, #1
 80008f6:	e787      	b.n	8000808 <HAL_I2C_Master_Transmit+0x1c>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80008f8:	6823      	ldr	r3, [r4, #0]
 80008fa:	b2ed      	uxtb	r5, r5
 80008fc:	611d      	str	r5, [r3, #16]
 80008fe:	e7d4      	b.n	80008aa <HAL_I2C_Master_Transmit+0xbe>
        __HAL_UNLOCK(hi2c);
 8000900:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_TIMEOUT;
 8000904:	2503      	movs	r5, #3
 8000906:	e77f      	b.n	8000808 <HAL_I2C_Master_Transmit+0x1c>
      if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000908:	4632      	mov	r2, r6
 800090a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800090c:	4620      	mov	r0, r4
 800090e:	f7ff fe86 	bl	800061e <I2C_WaitOnTXEFlagUntilTimeout>
 8000912:	b140      	cbz	r0, 8000926 <HAL_I2C_Master_Transmit+0x13a>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000914:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000916:	2b04      	cmp	r3, #4
 8000918:	d1f4      	bne.n	8000904 <HAL_I2C_Master_Transmit+0x118>
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800091a:	6822      	ldr	r2, [r4, #0]
 800091c:	6813      	ldr	r3, [r2, #0]
 800091e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000922:	6013      	str	r3, [r2, #0]
 8000924:	e7e6      	b.n	80008f4 <HAL_I2C_Master_Transmit+0x108>
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8000926:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000928:	6820      	ldr	r0, [r4, #0]
 800092a:	1c4b      	adds	r3, r1, #1
 800092c:	6263      	str	r3, [r4, #36]	; 0x24
 800092e:	780b      	ldrb	r3, [r1, #0]
      hi2c->XferSize--;
 8000930:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8000932:	6103      	str	r3, [r0, #16]
      hi2c->XferCount--;
 8000934:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000936:	3b01      	subs	r3, #1
 8000938:	b29b      	uxth	r3, r3
 800093a:	8563      	strh	r3, [r4, #42]	; 0x2a
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800093c:	6947      	ldr	r7, [r0, #20]
      hi2c->XferSize--;
 800093e:	1e53      	subs	r3, r2, #1
 8000940:	b29b      	uxth	r3, r3
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000942:	077f      	lsls	r7, r7, #29
      hi2c->XferSize--;
 8000944:	8523      	strh	r3, [r4, #40]	; 0x28
      if((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8000946:	d50a      	bpl.n	800095e <HAL_I2C_Master_Transmit+0x172>
 8000948:	b14b      	cbz	r3, 800095e <HAL_I2C_Master_Transmit+0x172>
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800094a:	1c8b      	adds	r3, r1, #2
 800094c:	6263      	str	r3, [r4, #36]	; 0x24
 800094e:	784b      	ldrb	r3, [r1, #1]
        hi2c->XferSize--;
 8000950:	3a02      	subs	r2, #2
        hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8000952:	6103      	str	r3, [r0, #16]
        hi2c->XferCount--;
 8000954:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8000956:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8000958:	3b01      	subs	r3, #1
 800095a:	b29b      	uxth	r3, r3
 800095c:	8563      	strh	r3, [r4, #42]	; 0x2a
      if(I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800095e:	4632      	mov	r2, r6
 8000960:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000962:	4620      	mov	r0, r4
 8000964:	f7ff feae 	bl	80006c4 <I2C_WaitOnBTFFlagUntilTimeout>
 8000968:	2800      	cmp	r0, #0
 800096a:	d1d3      	bne.n	8000914 <HAL_I2C_Master_Transmit+0x128>
    while(hi2c->XferSize > 0U)
 800096c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800096e:	2b00      	cmp	r3, #0
 8000970:	d1ca      	bne.n	8000908 <HAL_I2C_Master_Transmit+0x11c>
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000972:	6821      	ldr	r1, [r4, #0]
 8000974:	680a      	ldr	r2, [r1, #0]
 8000976:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800097a:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800097c:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 800097e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8000982:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000986:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 800098a:	e73d      	b.n	8000808 <HAL_I2C_Master_Transmit+0x1c>
 800098c:	00100002 	.word	0x00100002
 8000990:	00010002 	.word	0x00010002
 8000994:	00010008 	.word	0x00010008

08000998 <HAL_I2C_Master_Receive>:
{
 8000998:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800099c:	4604      	mov	r4, r0
 800099e:	b089      	sub	sp, #36	; 0x24
 80009a0:	4698      	mov	r8, r3
 80009a2:	460d      	mov	r5, r1
 80009a4:	4691      	mov	r9, r2
 80009a6:	9f10      	ldr	r7, [sp, #64]	; 0x40
  tickstart = HAL_GetTick();
 80009a8:	f7ff fbfe 	bl	80001a8 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 80009ac:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 80009b0:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 80009b2:	2b20      	cmp	r3, #32
 80009b4:	d004      	beq.n	80009c0 <HAL_I2C_Master_Receive+0x28>
    return HAL_BUSY;
 80009b6:	2502      	movs	r5, #2
}
 80009b8:	4628      	mov	r0, r5
 80009ba:	b009      	add	sp, #36	; 0x24
 80009bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80009c0:	9000      	str	r0, [sp, #0]
 80009c2:	2319      	movs	r3, #25
 80009c4:	2201      	movs	r2, #1
 80009c6:	49a2      	ldr	r1, [pc, #648]	; (8000c50 <HAL_I2C_Master_Receive+0x2b8>)
 80009c8:	4620      	mov	r0, r4
 80009ca:	f7ff fdfa 	bl	80005c2 <I2C_WaitOnFlagUntilTimeout>
 80009ce:	2800      	cmp	r0, #0
 80009d0:	d1f1      	bne.n	80009b6 <HAL_I2C_Master_Receive+0x1e>
    __HAL_LOCK(hi2c);
 80009d2:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80009d6:	2b01      	cmp	r3, #1
 80009d8:	d0ed      	beq.n	80009b6 <HAL_I2C_Master_Receive+0x1e>
 80009da:	2301      	movs	r3, #1
 80009dc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80009e0:	6823      	ldr	r3, [r4, #0]
 80009e2:	681a      	ldr	r2, [r3, #0]
 80009e4:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 80009e6:	bf5e      	ittt	pl
 80009e8:	681a      	ldrpl	r2, [r3, #0]
 80009ea:	f042 0201 	orrpl.w	r2, r2, #1
 80009ee:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80009f0:	681a      	ldr	r2, [r3, #0]
 80009f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80009f6:	601a      	str	r2, [r3, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80009f8:	2222      	movs	r2, #34	; 0x22
 80009fa:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80009fe:	2210      	movs	r2, #16
 8000a00:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8000a04:	2200      	movs	r2, #0
 8000a06:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000a08:	f5a2 3280 	sub.w	r2, r2, #65536	; 0x10000
    hi2c->XferCount   = Size;
 8000a0c:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000a10:	62e2      	str	r2, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8000a12:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 8000a14:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 8000a18:	8522      	strh	r2, [r4, #40]	; 0x28
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8000a1a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8000a1c:	6819      	ldr	r1, [r3, #0]
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8000a1e:	2a04      	cmp	r2, #4
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8000a20:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8000a24:	6019      	str	r1, [r3, #0]
  if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8000a26:	d004      	beq.n	8000a32 <HAL_I2C_Master_Receive+0x9a>
 8000a28:	2a01      	cmp	r2, #1
 8000a2a:	d002      	beq.n	8000a32 <HAL_I2C_Master_Receive+0x9a>
 8000a2c:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8000a30:	d104      	bne.n	8000a3c <HAL_I2C_Master_Receive+0xa4>
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8000a32:	681a      	ldr	r2, [r3, #0]
 8000a34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000a38:	601a      	str	r2, [r3, #0]
 8000a3a:	e002      	b.n	8000a42 <HAL_I2C_Master_Receive+0xaa>
  else if(hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8000a3c:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000a3e:	2a11      	cmp	r2, #17
 8000a40:	d0f7      	beq.n	8000a32 <HAL_I2C_Master_Receive+0x9a>
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000a42:	9600      	str	r6, [sp, #0]
 8000a44:	463b      	mov	r3, r7
 8000a46:	2200      	movs	r2, #0
 8000a48:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000a4c:	4620      	mov	r0, r4
 8000a4e:	f7ff fdb8 	bl	80005c2 <I2C_WaitOnFlagUntilTimeout>
 8000a52:	2800      	cmp	r0, #0
 8000a54:	d14d      	bne.n	8000af2 <HAL_I2C_Master_Receive+0x15a>
  if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000a56:	6923      	ldr	r3, [r4, #16]
 8000a58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000a5c:	6823      	ldr	r3, [r4, #0]
 8000a5e:	d139      	bne.n	8000ad4 <HAL_I2C_Master_Receive+0x13c>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8000a60:	f045 0501 	orr.w	r5, r5, #1
 8000a64:	b2ed      	uxtb	r5, r5
 8000a66:	611d      	str	r5, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000a68:	4633      	mov	r3, r6
 8000a6a:	463a      	mov	r2, r7
 8000a6c:	4979      	ldr	r1, [pc, #484]	; (8000c54 <HAL_I2C_Master_Receive+0x2bc>)
 8000a6e:	4620      	mov	r0, r4
 8000a70:	f7ff fd67 	bl	8000542 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000a74:	4605      	mov	r5, r0
 8000a76:	2800      	cmp	r0, #0
 8000a78:	d13a      	bne.n	8000af0 <HAL_I2C_Master_Receive+0x158>
    if(hi2c->XferSize == 0U)
 8000a7a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8000a7c:	6823      	ldr	r3, [r4, #0]
 8000a7e:	2a00      	cmp	r2, #0
 8000a80:	d069      	beq.n	8000b56 <HAL_I2C_Master_Receive+0x1be>
    else if(hi2c->XferSize == 1U)
 8000a82:	2a01      	cmp	r2, #1
 8000a84:	d17a      	bne.n	8000b7c <HAL_I2C_Master_Receive+0x1e4>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8000a86:	681a      	ldr	r2, [r3, #0]
 8000a88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000a8c:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a8e:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000a90:	6823      	ldr	r3, [r4, #0]
 8000a92:	9504      	str	r5, [sp, #16]
 8000a94:	695a      	ldr	r2, [r3, #20]
 8000a96:	9204      	str	r2, [sp, #16]
 8000a98:	699a      	ldr	r2, [r3, #24]
 8000a9a:	9204      	str	r2, [sp, #16]
 8000a9c:	9a04      	ldr	r2, [sp, #16]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000a9e:	681a      	ldr	r2, [r3, #0]
 8000aa0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8000aa4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000aa6:	b662      	cpsie	i
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8000aa8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8000c5c <HAL_I2C_Master_Receive+0x2c4>
    while(hi2c->XferSize > 0U)
 8000aac:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d05b      	beq.n	8000b6a <HAL_I2C_Master_Receive+0x1d2>
      if(hi2c->XferSize <= 3U)
 8000ab2:	2b03      	cmp	r3, #3
 8000ab4:	f200 80d4 	bhi.w	8000c60 <HAL_I2C_Master_Receive+0x2c8>
        if(hi2c->XferSize == 1U)
 8000ab8:	2b01      	cmp	r3, #1
 8000aba:	d17b      	bne.n	8000bb4 <HAL_I2C_Master_Receive+0x21c>
          if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8000abc:	4632      	mov	r2, r6
 8000abe:	4639      	mov	r1, r7
 8000ac0:	4620      	mov	r0, r4
 8000ac2:	f7ff fdd2 	bl	800066a <I2C_WaitOnRXNEFlagUntilTimeout>
 8000ac6:	2800      	cmp	r0, #0
 8000ac8:	f000 8093 	beq.w	8000bf2 <HAL_I2C_Master_Receive+0x25a>
            if(hi2c->ErrorCode == HAL_I2C_ERROR_TIMEOUT)
 8000acc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000ace:	2b20      	cmp	r3, #32
 8000ad0:	d116      	bne.n	8000b00 <HAL_I2C_Master_Receive+0x168>
 8000ad2:	e03e      	b.n	8000b52 <HAL_I2C_Master_Receive+0x1ba>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8000ad4:	ea4f 18e5 	mov.w	r8, r5, asr #7
 8000ad8:	f008 0806 	and.w	r8, r8, #6
 8000adc:	f048 02f0 	orr.w	r2, r8, #240	; 0xf0
 8000ae0:	611a      	str	r2, [r3, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8000ae2:	495d      	ldr	r1, [pc, #372]	; (8000c58 <HAL_I2C_Master_Receive+0x2c0>)
 8000ae4:	4633      	mov	r3, r6
 8000ae6:	463a      	mov	r2, r7
 8000ae8:	4620      	mov	r0, r4
 8000aea:	f7ff fd2a 	bl	8000542 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000aee:	b148      	cbz	r0, 8000b04 <HAL_I2C_Master_Receive+0x16c>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000af0:	6c23      	ldr	r3, [r4, #64]	; 0x40
      if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000af2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000af4:	2b04      	cmp	r3, #4
 8000af6:	f04f 0300 	mov.w	r3, #0
 8000afa:	d128      	bne.n	8000b4e <HAL_I2C_Master_Receive+0x1b6>
        __HAL_UNLOCK(hi2c);
 8000afc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
              return HAL_ERROR;
 8000b00:	2501      	movs	r5, #1
 8000b02:	e759      	b.n	80009b8 <HAL_I2C_Master_Receive+0x20>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8000b04:	6823      	ldr	r3, [r4, #0]
 8000b06:	b2ed      	uxtb	r5, r5
 8000b08:	611d      	str	r5, [r3, #16]
    if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000b0a:	463a      	mov	r2, r7
 8000b0c:	4633      	mov	r3, r6
 8000b0e:	4951      	ldr	r1, [pc, #324]	; (8000c54 <HAL_I2C_Master_Receive+0x2bc>)
 8000b10:	4620      	mov	r0, r4
 8000b12:	f7ff fd16 	bl	8000542 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000b16:	4602      	mov	r2, r0
 8000b18:	2800      	cmp	r0, #0
 8000b1a:	d1e9      	bne.n	8000af0 <HAL_I2C_Master_Receive+0x158>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000b1c:	6823      	ldr	r3, [r4, #0]
 8000b1e:	9007      	str	r0, [sp, #28]
 8000b20:	6959      	ldr	r1, [r3, #20]
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000b22:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000b24:	9107      	str	r1, [sp, #28]
 8000b26:	6999      	ldr	r1, [r3, #24]
 8000b28:	9107      	str	r1, [sp, #28]
 8000b2a:	9907      	ldr	r1, [sp, #28]
    hi2c->Instance->CR1 |= I2C_CR1_START;
 8000b2c:	6819      	ldr	r1, [r3, #0]
 8000b2e:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8000b32:	6019      	str	r1, [r3, #0]
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000b34:	9600      	str	r6, [sp, #0]
 8000b36:	463b      	mov	r3, r7
 8000b38:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000b3c:	f7ff fd41 	bl	80005c2 <I2C_WaitOnFlagUntilTimeout>
 8000b40:	2800      	cmp	r0, #0
 8000b42:	d1d6      	bne.n	8000af2 <HAL_I2C_Master_Receive+0x15a>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8000b44:	6822      	ldr	r2, [r4, #0]
 8000b46:	f048 03f1 	orr.w	r3, r8, #241	; 0xf1
 8000b4a:	6113      	str	r3, [r2, #16]
 8000b4c:	e78c      	b.n	8000a68 <HAL_I2C_Master_Receive+0xd0>
        __HAL_UNLOCK(hi2c);
 8000b4e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
              return HAL_TIMEOUT;
 8000b52:	2503      	movs	r5, #3
 8000b54:	e730      	b.n	80009b8 <HAL_I2C_Master_Receive+0x20>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000b56:	9503      	str	r5, [sp, #12]
 8000b58:	695a      	ldr	r2, [r3, #20]
 8000b5a:	9203      	str	r2, [sp, #12]
 8000b5c:	699a      	ldr	r2, [r3, #24]
 8000b5e:	9203      	str	r2, [sp, #12]
 8000b60:	9a03      	ldr	r2, [sp, #12]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000b62:	681a      	ldr	r2, [r3, #0]
 8000b64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000b68:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8000b6a:	2320      	movs	r3, #32
 8000b6c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000b70:	2300      	movs	r3, #0
 8000b72:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8000b76:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8000b7a:	e71d      	b.n	80009b8 <HAL_I2C_Master_Receive+0x20>
    else if(hi2c->XferSize == 2U)
 8000b7c:	2a02      	cmp	r2, #2
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 8000b7e:	681a      	ldr	r2, [r3, #0]
    else if(hi2c->XferSize == 2U)
 8000b80:	d10e      	bne.n	8000ba0 <HAL_I2C_Master_Receive+0x208>
      hi2c->Instance->CR1 |= I2C_CR1_POS;
 8000b82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000b86:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8000b88:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000b8a:	6823      	ldr	r3, [r4, #0]
 8000b8c:	9505      	str	r5, [sp, #20]
 8000b8e:	695a      	ldr	r2, [r3, #20]
 8000b90:	9205      	str	r2, [sp, #20]
 8000b92:	699a      	ldr	r2, [r3, #24]
 8000b94:	9205      	str	r2, [sp, #20]
 8000b96:	9a05      	ldr	r2, [sp, #20]
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8000b98:	681a      	ldr	r2, [r3, #0]
 8000b9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000b9e:	e781      	b.n	8000aa4 <HAL_I2C_Master_Receive+0x10c>
      hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8000ba0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000ba4:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000ba6:	9506      	str	r5, [sp, #24]
 8000ba8:	695a      	ldr	r2, [r3, #20]
 8000baa:	9206      	str	r2, [sp, #24]
 8000bac:	699b      	ldr	r3, [r3, #24]
 8000bae:	9306      	str	r3, [sp, #24]
 8000bb0:	9b06      	ldr	r3, [sp, #24]
 8000bb2:	e779      	b.n	8000aa8 <HAL_I2C_Master_Receive+0x110>
        else if(hi2c->XferSize == 2U)
 8000bb4:	2b02      	cmp	r3, #2
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8000bb6:	9600      	str	r6, [sp, #0]
 8000bb8:	463b      	mov	r3, r7
 8000bba:	f04f 0200 	mov.w	r2, #0
 8000bbe:	4641      	mov	r1, r8
 8000bc0:	4620      	mov	r0, r4
        else if(hi2c->XferSize == 2U)
 8000bc2:	d124      	bne.n	8000c0e <HAL_I2C_Master_Receive+0x276>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8000bc4:	f7ff fcfd 	bl	80005c2 <I2C_WaitOnFlagUntilTimeout>
 8000bc8:	2800      	cmp	r0, #0
 8000bca:	d1c2      	bne.n	8000b52 <HAL_I2C_Master_Receive+0x1ba>
 8000bcc:	b672      	cpsid	i
          hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000bce:	6823      	ldr	r3, [r4, #0]
 8000bd0:	681a      	ldr	r2, [r3, #0]
 8000bd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000bd6:	601a      	str	r2, [r3, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8000bd8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000bda:	691b      	ldr	r3, [r3, #16]
 8000bdc:	1c51      	adds	r1, r2, #1
 8000bde:	6261      	str	r1, [r4, #36]	; 0x24
 8000be0:	7013      	strb	r3, [r2, #0]
          hi2c->XferSize--;
 8000be2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8000be4:	3b01      	subs	r3, #1
 8000be6:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8000be8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000bea:	3b01      	subs	r3, #1
 8000bec:	b29b      	uxth	r3, r3
 8000bee:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8000bf0:	b662      	cpsie	i
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8000bf2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000bf4:	1c5a      	adds	r2, r3, #1
 8000bf6:	6262      	str	r2, [r4, #36]	; 0x24
 8000bf8:	6822      	ldr	r2, [r4, #0]
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8000bfa:	6912      	ldr	r2, [r2, #16]
 8000bfc:	701a      	strb	r2, [r3, #0]
          hi2c->XferSize--;
 8000bfe:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8000c00:	3b01      	subs	r3, #1
 8000c02:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8000c04:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000c06:	3b01      	subs	r3, #1
 8000c08:	b29b      	uxth	r3, r3
 8000c0a:	8563      	strh	r3, [r4, #42]	; 0x2a
 8000c0c:	e74e      	b.n	8000aac <HAL_I2C_Master_Receive+0x114>
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8000c0e:	f7ff fcd8 	bl	80005c2 <I2C_WaitOnFlagUntilTimeout>
 8000c12:	4602      	mov	r2, r0
 8000c14:	2800      	cmp	r0, #0
 8000c16:	d19c      	bne.n	8000b52 <HAL_I2C_Master_Receive+0x1ba>
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8000c18:	6821      	ldr	r1, [r4, #0]
 8000c1a:	680b      	ldr	r3, [r1, #0]
 8000c1c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000c20:	600b      	str	r3, [r1, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8000c22:	b672      	cpsid	i
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8000c24:	6a63      	ldr	r3, [r4, #36]	; 0x24
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8000c26:	4620      	mov	r0, r4
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8000c28:	1c59      	adds	r1, r3, #1
 8000c2a:	6261      	str	r1, [r4, #36]	; 0x24
 8000c2c:	6821      	ldr	r1, [r4, #0]
 8000c2e:	6909      	ldr	r1, [r1, #16]
 8000c30:	7019      	strb	r1, [r3, #0]
          hi2c->XferSize--;
 8000c32:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8000c34:	9600      	str	r6, [sp, #0]
          hi2c->XferSize--;
 8000c36:	3b01      	subs	r3, #1
 8000c38:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8000c3a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8000c3c:	4641      	mov	r1, r8
          hi2c->XferCount--;
 8000c3e:	3b01      	subs	r3, #1
 8000c40:	b29b      	uxth	r3, r3
 8000c42:	8563      	strh	r3, [r4, #42]	; 0x2a
          if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8000c44:	463b      	mov	r3, r7
 8000c46:	f7ff fcbc 	bl	80005c2 <I2C_WaitOnFlagUntilTimeout>
 8000c4a:	2800      	cmp	r0, #0
 8000c4c:	d0bf      	beq.n	8000bce <HAL_I2C_Master_Receive+0x236>
 8000c4e:	e780      	b.n	8000b52 <HAL_I2C_Master_Receive+0x1ba>
 8000c50:	00100002 	.word	0x00100002
 8000c54:	00010002 	.word	0x00010002
 8000c58:	00010008 	.word	0x00010008
 8000c5c:	00010004 	.word	0x00010004
        if(I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)      
 8000c60:	4632      	mov	r2, r6
 8000c62:	4639      	mov	r1, r7
 8000c64:	4620      	mov	r0, r4
 8000c66:	f7ff fd00 	bl	800066a <I2C_WaitOnRXNEFlagUntilTimeout>
 8000c6a:	2800      	cmp	r0, #0
 8000c6c:	f47f af2e 	bne.w	8000acc <HAL_I2C_Master_Receive+0x134>
        (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8000c70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000c72:	1c5a      	adds	r2, r3, #1
 8000c74:	6262      	str	r2, [r4, #36]	; 0x24
 8000c76:	6822      	ldr	r2, [r4, #0]
 8000c78:	6912      	ldr	r2, [r2, #16]
 8000c7a:	701a      	strb	r2, [r3, #0]
        hi2c->XferSize--;
 8000c7c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8000c7e:	6822      	ldr	r2, [r4, #0]
        hi2c->XferSize--;
 8000c80:	3b01      	subs	r3, #1
 8000c82:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8000c84:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000c86:	3b01      	subs	r3, #1
 8000c88:	b29b      	uxth	r3, r3
 8000c8a:	8563      	strh	r3, [r4, #42]	; 0x2a
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8000c8c:	6953      	ldr	r3, [r2, #20]
 8000c8e:	075b      	lsls	r3, r3, #29
 8000c90:	f57f af0c 	bpl.w	8000aac <HAL_I2C_Master_Receive+0x114>
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8000c94:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000c96:	1c59      	adds	r1, r3, #1
 8000c98:	6261      	str	r1, [r4, #36]	; 0x24
 8000c9a:	e7ae      	b.n	8000bfa <HAL_I2C_Master_Receive+0x262>

08000c9c <HAL_I2C_IsDeviceReady>:
{
 8000c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ca0:	4604      	mov	r4, r0
 8000ca2:	b085      	sub	sp, #20
 8000ca4:	4698      	mov	r8, r3
 8000ca6:	4689      	mov	r9, r1
 8000ca8:	4692      	mov	sl, r2
  tickstart = HAL_GetTick();
 8000caa:	f7ff fa7d 	bl	80001a8 <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8000cae:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  tickstart = HAL_GetTick();
 8000cb2:	4606      	mov	r6, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 8000cb4:	2b20      	cmp	r3, #32
 8000cb6:	d003      	beq.n	8000cc0 <HAL_I2C_IsDeviceReady+0x24>
    return HAL_BUSY;
 8000cb8:	2002      	movs	r0, #2
}
 8000cba:	b005      	add	sp, #20
 8000cbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000cc0:	9000      	str	r0, [sp, #0]
 8000cc2:	2319      	movs	r3, #25
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	494b      	ldr	r1, [pc, #300]	; (8000df4 <HAL_I2C_IsDeviceReady+0x158>)
 8000cc8:	4620      	mov	r0, r4
 8000cca:	f7ff fc7a 	bl	80005c2 <I2C_WaitOnFlagUntilTimeout>
 8000cce:	2800      	cmp	r0, #0
 8000cd0:	d1f2      	bne.n	8000cb8 <HAL_I2C_IsDeviceReady+0x1c>
    __HAL_LOCK(hi2c);
 8000cd2:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8000cd6:	2b01      	cmp	r3, #1
 8000cd8:	d0ee      	beq.n	8000cb8 <HAL_I2C_IsDeviceReady+0x1c>
 8000cda:	2301      	movs	r3, #1
 8000cdc:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000ce0:	6823      	ldr	r3, [r4, #0]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000ce2:	2500      	movs	r5, #0
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000ce4:	681a      	ldr	r2, [r3, #0]
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000ce6:	f8df b10c 	ldr.w	fp, [pc, #268]	; 8000df4 <HAL_I2C_IsDeviceReady+0x158>
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000cea:	07d2      	lsls	r2, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8000cec:	bf58      	it	pl
 8000cee:	681a      	ldrpl	r2, [r3, #0]
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000cf0:	f009 09fe 	and.w	r9, r9, #254	; 0xfe
      __HAL_I2C_ENABLE(hi2c);
 8000cf4:	bf5c      	itt	pl
 8000cf6:	f042 0201 	orrpl.w	r2, r2, #1
 8000cfa:	601a      	strpl	r2, [r3, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000d02:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8000d04:	2324      	movs	r3, #36	; 0x24
 8000d06:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000d0a:	4b3b      	ldr	r3, [pc, #236]	; (8000df8 <HAL_I2C_IsDeviceReady+0x15c>)
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000d0c:	6425      	str	r5, [r4, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000d0e:	62e3      	str	r3, [r4, #44]	; 0x2c
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8000d10:	6822      	ldr	r2, [r4, #0]
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8000d12:	f04f 1101 	mov.w	r1, #65537	; 0x10001
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8000d16:	6813      	ldr	r3, [r2, #0]
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8000d18:	4620      	mov	r0, r4
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8000d1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d1e:	6013      	str	r3, [r2, #0]
      if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8000d20:	9600      	str	r6, [sp, #0]
 8000d22:	4643      	mov	r3, r8
 8000d24:	2200      	movs	r2, #0
 8000d26:	f7ff fc4c 	bl	80005c2 <I2C_WaitOnFlagUntilTimeout>
 8000d2a:	b108      	cbz	r0, 8000d30 <HAL_I2C_IsDeviceReady+0x94>
        return HAL_TIMEOUT;
 8000d2c:	2003      	movs	r0, #3
 8000d2e:	e7c4      	b.n	8000cba <HAL_I2C_IsDeviceReady+0x1e>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000d30:	6823      	ldr	r3, [r4, #0]
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8000d32:	27a0      	movs	r7, #160	; 0xa0
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000d34:	f8c3 9010 	str.w	r9, [r3, #16]
      tickstart = HAL_GetTick();
 8000d38:	f7ff fa36 	bl	80001a8 <HAL_GetTick>
 8000d3c:	4606      	mov	r6, r0
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8000d3e:	6823      	ldr	r3, [r4, #0]
 8000d40:	6959      	ldr	r1, [r3, #20]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8000d42:	695a      	ldr	r2, [r3, #20]
      tmp3 = hi2c->State;
 8000d44:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8000d48:	f3c1 0140 	ubfx	r1, r1, #1, #1
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8000d4c:	f3c2 2280 	ubfx	r2, r2, #10, #1
      tmp3 = hi2c->State;
 8000d50:	b2db      	uxtb	r3, r3
      while((tmp1 == RESET) && (tmp2 == RESET) && (tmp3 != HAL_I2C_STATE_TIMEOUT))
 8000d52:	b911      	cbnz	r1, 8000d5a <HAL_I2C_IsDeviceReady+0xbe>
 8000d54:	b90a      	cbnz	r2, 8000d5a <HAL_I2C_IsDeviceReady+0xbe>
 8000d56:	2ba0      	cmp	r3, #160	; 0xa0
 8000d58:	d120      	bne.n	8000d9c <HAL_I2C_IsDeviceReady+0x100>
      hi2c->State = HAL_I2C_STATE_READY;
 8000d5a:	2720      	movs	r7, #32
      if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8000d5c:	6823      	ldr	r3, [r4, #0]
      hi2c->State = HAL_I2C_STATE_READY;
 8000d5e:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
      if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8000d62:	695a      	ldr	r2, [r3, #20]
 8000d64:	f012 0f02 	tst.w	r2, #2
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000d6e:	601a      	str	r2, [r3, #0]
      if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8000d70:	d02a      	beq.n	8000dc8 <HAL_I2C_IsDeviceReady+0x12c>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000d72:	2200      	movs	r2, #0
 8000d74:	9203      	str	r2, [sp, #12]
 8000d76:	695a      	ldr	r2, [r3, #20]
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000d78:	491e      	ldr	r1, [pc, #120]	; (8000df4 <HAL_I2C_IsDeviceReady+0x158>)
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000d7a:	9203      	str	r2, [sp, #12]
 8000d7c:	699b      	ldr	r3, [r3, #24]
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000d7e:	2201      	movs	r2, #1
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000d80:	9303      	str	r3, [sp, #12]
 8000d82:	9b03      	ldr	r3, [sp, #12]
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000d84:	9600      	str	r6, [sp, #0]
 8000d86:	2319      	movs	r3, #25
 8000d88:	4620      	mov	r0, r4
 8000d8a:	f7ff fc1a 	bl	80005c2 <I2C_WaitOnFlagUntilTimeout>
 8000d8e:	2800      	cmp	r0, #0
 8000d90:	d1cc      	bne.n	8000d2c <HAL_I2C_IsDeviceReady+0x90>
        hi2c->State = HAL_I2C_STATE_READY;
 8000d92:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8000d96:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
        return HAL_OK;
 8000d9a:	e78e      	b.n	8000cba <HAL_I2C_IsDeviceReady+0x1e>
        if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8000d9c:	f1b8 0f00 	cmp.w	r8, #0
 8000da0:	d10c      	bne.n	8000dbc <HAL_I2C_IsDeviceReady+0x120>
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8000da2:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8000da6:	6823      	ldr	r3, [r4, #0]
 8000da8:	6959      	ldr	r1, [r3, #20]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8000daa:	695a      	ldr	r2, [r3, #20]
        tmp3 = hi2c->State;
 8000dac:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8000db0:	f3c1 0140 	ubfx	r1, r1, #1, #1
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8000db4:	f3c2 2280 	ubfx	r2, r2, #10, #1
        tmp3 = hi2c->State;
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	e7ca      	b.n	8000d52 <HAL_I2C_IsDeviceReady+0xb6>
        if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8000dbc:	f7ff f9f4 	bl	80001a8 <HAL_GetTick>
 8000dc0:	1b80      	subs	r0, r0, r6
 8000dc2:	4580      	cmp	r8, r0
 8000dc4:	d3ed      	bcc.n	8000da2 <HAL_I2C_IsDeviceReady+0x106>
 8000dc6:	e7ee      	b.n	8000da6 <HAL_I2C_IsDeviceReady+0x10a>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000dc8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000dcc:	4659      	mov	r1, fp
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000dce:	615a      	str	r2, [r3, #20]
        if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000dd0:	4620      	mov	r0, r4
 8000dd2:	9600      	str	r6, [sp, #0]
 8000dd4:	2319      	movs	r3, #25
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	f7ff fbf3 	bl	80005c2 <I2C_WaitOnFlagUntilTimeout>
 8000ddc:	2800      	cmp	r0, #0
 8000dde:	d1a5      	bne.n	8000d2c <HAL_I2C_IsDeviceReady+0x90>
 8000de0:	3501      	adds	r5, #1
    }while(I2C_Trials++ < Trials);
 8000de2:	45aa      	cmp	sl, r5
 8000de4:	d894      	bhi.n	8000d10 <HAL_I2C_IsDeviceReady+0x74>
    __HAL_UNLOCK(hi2c);
 8000de6:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8000dea:	f884 703d 	strb.w	r7, [r4, #61]	; 0x3d
    return HAL_ERROR;
 8000dee:	2001      	movs	r0, #1
 8000df0:	e763      	b.n	8000cba <HAL_I2C_IsDeviceReady+0x1e>
 8000df2:	bf00      	nop
 8000df4:	00100002 	.word	0x00100002
 8000df8:	ffff0000 	.word	0xffff0000

08000dfc <HAL_I2C_MasterTxCpltCallback>:
 8000dfc:	4770      	bx	lr

08000dfe <HAL_I2C_MasterRxCpltCallback>:
 8000dfe:	4770      	bx	lr

08000e00 <HAL_I2C_SlaveTxCpltCallback>:
 8000e00:	4770      	bx	lr

08000e02 <HAL_I2C_SlaveRxCpltCallback>:
 8000e02:	4770      	bx	lr

08000e04 <HAL_I2C_AddrCallback>:
{
 8000e04:	4770      	bx	lr

08000e06 <HAL_I2C_ListenCpltCallback>:
 8000e06:	4770      	bx	lr

08000e08 <HAL_I2C_MemTxCpltCallback>:
 8000e08:	4770      	bx	lr

08000e0a <HAL_I2C_MemRxCpltCallback>:
 8000e0a:	4770      	bx	lr

08000e0c <HAL_I2C_ErrorCallback>:
 8000e0c:	4770      	bx	lr

08000e0e <HAL_I2C_AbortCpltCallback>:
{
 8000e0e:	4770      	bx	lr

08000e10 <I2C_ITError>:
  uint32_t CurrentState = hi2c->State;
 8000e10:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 8000e14:	b510      	push	{r4, lr}
  if((CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8000e16:	3b29      	subs	r3, #41	; 0x29
 8000e18:	2b01      	cmp	r3, #1
{
 8000e1a:	4604      	mov	r4, r0
 8000e1c:	6803      	ldr	r3, [r0, #0]
  if((CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8000e1e:	d839      	bhi.n	8000e94 <I2C_ITError+0x84>
    hi2c->PreviousState = I2C_STATE_NONE;
 8000e20:	2200      	movs	r2, #0
 8000e22:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8000e24:	2228      	movs	r2, #40	; 0x28
 8000e26:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000e30:	601a      	str	r2, [r3, #0]
  if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8000e32:	685a      	ldr	r2, [r3, #4]
 8000e34:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 8000e38:	d054      	beq.n	8000ee4 <I2C_ITError+0xd4>
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8000e3a:	685a      	ldr	r2, [r3, #4]
    if(hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8000e3c:	6b60      	ldr	r0, [r4, #52]	; 0x34
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8000e3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000e42:	605a      	str	r2, [r3, #4]
    if(hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8000e44:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	4b39      	ldr	r3, [pc, #228]	; (8000f30 <I2C_ITError+0x120>)
 8000e4c:	d031      	beq.n	8000eb2 <I2C_ITError+0xa2>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8000e4e:	6343      	str	r3, [r0, #52]	; 0x34
      if(HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8000e50:	f7ff fa3a 	bl	80002c8 <HAL_DMA_Abort_IT>
 8000e54:	b150      	cbz	r0, 8000e6c <I2C_ITError+0x5c>
        __HAL_I2C_DISABLE(hi2c);
 8000e56:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8000e58:	6b60      	ldr	r0, [r4, #52]	; 0x34
        __HAL_I2C_DISABLE(hi2c);
 8000e5a:	6813      	ldr	r3, [r2, #0]
 8000e5c:	f023 0301 	bic.w	r3, r3, #1
 8000e60:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8000e62:	2320      	movs	r3, #32
 8000e64:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8000e68:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8000e6a:	4798      	blx	r3
  if((hi2c->State == HAL_I2C_STATE_LISTEN) && ((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF))
 8000e6c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8000e70:	2b28      	cmp	r3, #40	; 0x28
 8000e72:	d10e      	bne.n	8000e92 <I2C_ITError+0x82>
 8000e74:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000e76:	075b      	lsls	r3, r3, #29
 8000e78:	d50b      	bpl.n	8000e92 <I2C_ITError+0x82>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000e7a:	4b2e      	ldr	r3, [pc, #184]	; (8000f34 <I2C_ITError+0x124>)
    hi2c->State = HAL_I2C_STATE_READY;
 8000e7c:	2220      	movs	r2, #32
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000e7e:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8000e80:	2300      	movs	r3, #0
    HAL_I2C_ListenCpltCallback(hi2c);
 8000e82:	4620      	mov	r0, r4
    hi2c->PreviousState = I2C_STATE_NONE;
 8000e84:	6323      	str	r3, [r4, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_READY;
 8000e86:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e8a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8000e8e:	f7ff ffba 	bl	8000e06 <HAL_I2C_ListenCpltCallback>
 8000e92:	bd10      	pop	{r4, pc}
    if((hi2c->State != HAL_I2C_STATE_ABORT) && ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) != I2C_CR2_DMAEN))
 8000e94:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8000e98:	2a60      	cmp	r2, #96	; 0x60
 8000e9a:	d005      	beq.n	8000ea8 <I2C_ITError+0x98>
 8000e9c:	685a      	ldr	r2, [r3, #4]
 8000e9e:	0512      	lsls	r2, r2, #20
      hi2c->State = HAL_I2C_STATE_READY;
 8000ea0:	bf5c      	itt	pl
 8000ea2:	2220      	movpl	r2, #32
 8000ea4:	f880 203d 	strbpl.w	r2, [r0, #61]	; 0x3d
    hi2c->PreviousState = I2C_STATE_NONE;
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000eac:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
 8000eb0:	e7bb      	b.n	8000e2a <I2C_ITError+0x1a>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8000eb2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000eb4:	6343      	str	r3, [r0, #52]	; 0x34
      if(HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8000eb6:	f7ff fa07 	bl	80002c8 <HAL_DMA_Abort_IT>
 8000eba:	2800      	cmp	r0, #0
 8000ebc:	d0d6      	beq.n	8000e6c <I2C_ITError+0x5c>
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8000ebe:	6822      	ldr	r2, [r4, #0]
 8000ec0:	6953      	ldr	r3, [r2, #20]
 8000ec2:	0658      	lsls	r0, r3, #25
 8000ec4:	d504      	bpl.n	8000ed0 <I2C_ITError+0xc0>
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8000ec6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000ec8:	6912      	ldr	r2, [r2, #16]
 8000eca:	1c59      	adds	r1, r3, #1
 8000ecc:	6261      	str	r1, [r4, #36]	; 0x24
 8000ece:	701a      	strb	r2, [r3, #0]
        __HAL_I2C_DISABLE(hi2c);
 8000ed0:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8000ed2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        __HAL_I2C_DISABLE(hi2c);
 8000ed4:	6813      	ldr	r3, [r2, #0]
 8000ed6:	f023 0301 	bic.w	r3, r3, #1
 8000eda:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 8000edc:	2320      	movs	r3, #32
 8000ede:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 8000ee2:	e7c1      	b.n	8000e68 <I2C_ITError+0x58>
  else if(hi2c->State == HAL_I2C_STATE_ABORT)
 8000ee4:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 8000ee8:	2960      	cmp	r1, #96	; 0x60
 8000eea:	d114      	bne.n	8000f16 <I2C_ITError+0x106>
    hi2c->State = HAL_I2C_STATE_READY;
 8000eec:	2120      	movs	r1, #32
 8000eee:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000ef2:	6422      	str	r2, [r4, #64]	; 0x40
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8000ef4:	695a      	ldr	r2, [r3, #20]
 8000ef6:	0651      	lsls	r1, r2, #25
 8000ef8:	d504      	bpl.n	8000f04 <I2C_ITError+0xf4>
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8000efa:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000efc:	691b      	ldr	r3, [r3, #16]
 8000efe:	1c51      	adds	r1, r2, #1
 8000f00:	6261      	str	r1, [r4, #36]	; 0x24
 8000f02:	7013      	strb	r3, [r2, #0]
    __HAL_I2C_DISABLE(hi2c);
 8000f04:	6822      	ldr	r2, [r4, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8000f06:	4620      	mov	r0, r4
    __HAL_I2C_DISABLE(hi2c);
 8000f08:	6813      	ldr	r3, [r2, #0]
 8000f0a:	f023 0301 	bic.w	r3, r3, #1
 8000f0e:	6013      	str	r3, [r2, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8000f10:	f7ff ff7d 	bl	8000e0e <HAL_I2C_AbortCpltCallback>
 8000f14:	e7aa      	b.n	8000e6c <I2C_ITError+0x5c>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8000f16:	695a      	ldr	r2, [r3, #20]
 8000f18:	0652      	lsls	r2, r2, #25
 8000f1a:	d504      	bpl.n	8000f26 <I2C_ITError+0x116>
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8000f1c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000f1e:	691b      	ldr	r3, [r3, #16]
 8000f20:	1c51      	adds	r1, r2, #1
 8000f22:	6261      	str	r1, [r4, #36]	; 0x24
 8000f24:	7013      	strb	r3, [r2, #0]
    HAL_I2C_ErrorCallback(hi2c);
 8000f26:	4620      	mov	r0, r4
 8000f28:	f7ff ff70 	bl	8000e0c <HAL_I2C_ErrorCallback>
 8000f2c:	e79e      	b.n	8000e6c <I2C_ITError+0x5c>
 8000f2e:	bf00      	nop
 8000f30:	0800160d 	.word	0x0800160d
 8000f34:	ffff0000 	.word	0xffff0000

08000f38 <HAL_I2C_EV_IRQHandler>:
  uint32_t sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8000f38:	6803      	ldr	r3, [r0, #0]
{
 8000f3a:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8000f3c:	699d      	ldr	r5, [r3, #24]
  uint32_t sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8000f3e:	6959      	ldr	r1, [r3, #20]
  uint32_t itsources    = READ_REG(hi2c->Instance->CR2);
 8000f40:	685a      	ldr	r2, [r3, #4]
  uint32_t CurrentMode  = hi2c->Mode;
 8000f42:	f890 403e 	ldrb.w	r4, [r0, #62]	; 0x3e
{
 8000f46:	b08d      	sub	sp, #52	; 0x34
  uint32_t CurrentMode  = hi2c->Mode;
 8000f48:	b2e4      	uxtb	r4, r4
  if((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8000f4a:	2c10      	cmp	r4, #16
 8000f4c:	d002      	beq.n	8000f54 <HAL_I2C_EV_IRQHandler+0x1c>
 8000f4e:	2c40      	cmp	r4, #64	; 0x40
 8000f50:	f040 8256 	bne.w	8001400 <HAL_I2C_EV_IRQHandler+0x4c8>
    if(((sr1itflags & I2C_FLAG_SB) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8000f54:	f011 1f01 	tst.w	r1, #65537	; 0x10001
 8000f58:	d066      	beq.n	8001028 <HAL_I2C_EV_IRQHandler+0xf0>
 8000f5a:	0597      	lsls	r7, r2, #22
 8000f5c:	d564      	bpl.n	8001028 <HAL_I2C_EV_IRQHandler+0xf0>
  if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8000f5e:	f890 403e 	ldrb.w	r4, [r0, #62]	; 0x3e
 8000f62:	2c40      	cmp	r4, #64	; 0x40
 8000f64:	d143      	bne.n	8000fee <HAL_I2C_EV_IRQHandler+0xb6>
    if(hi2c->EventCount == 0U)
 8000f66:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8000f68:	2c00      	cmp	r4, #0
 8000f6a:	d13b      	bne.n	8000fe4 <HAL_I2C_EV_IRQHandler+0xac>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8000f6c:	6c44      	ldr	r4, [r0, #68]	; 0x44
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8000f6e:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8000f72:	611c      	str	r4, [r3, #16]
    if((sr2itflags & I2C_FLAG_TRA) != RESET)
 8000f74:	4e94      	ldr	r6, [pc, #592]	; (80011c8 <HAL_I2C_EV_IRQHandler+0x290>)
 8000f76:	4c95      	ldr	r4, [pc, #596]	; (80011cc <HAL_I2C_EV_IRQHandler+0x294>)
 8000f78:	402e      	ands	r6, r5
 8000f7a:	400c      	ands	r4, r1
 8000f7c:	2e00      	cmp	r6, #0
 8000f7e:	f000 81a2 	beq.w	80012c6 <HAL_I2C_EV_IRQHandler+0x38e>
      if(((sr1itflags & I2C_FLAG_TXE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 8000f82:	4d93      	ldr	r5, [pc, #588]	; (80011d0 <HAL_I2C_EV_IRQHandler+0x298>)
 8000f84:	400d      	ands	r5, r1
 8000f86:	2d00      	cmp	r5, #0
 8000f88:	f000 8169 	beq.w	800125e <HAL_I2C_EV_IRQHandler+0x326>
 8000f8c:	0555      	lsls	r5, r2, #21
 8000f8e:	f140 8166 	bpl.w	800125e <HAL_I2C_EV_IRQHandler+0x326>
 8000f92:	2c00      	cmp	r4, #0
 8000f94:	f040 8163 	bne.w	800125e <HAL_I2C_EV_IRQHandler+0x326>
  uint32_t CurrentState       = hi2c->State;
 8000f98:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  if((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8000f9c:	8d05      	ldrh	r5, [r0, #40]	; 0x28
  uint32_t CurrentMode        = hi2c->Mode;
 8000f9e:	f890 103e 	ldrb.w	r1, [r0, #62]	; 0x3e
  uint32_t CurrentState       = hi2c->State;
 8000fa2:	b2d2      	uxtb	r2, r2
  uint32_t CurrentMode        = hi2c->Mode;
 8000fa4:	b2c9      	uxtb	r1, r1
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8000fa6:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
  if((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8000fa8:	2d00      	cmp	r5, #0
 8000faa:	f040 8117 	bne.w	80011dc <HAL_I2C_EV_IRQHandler+0x2a4>
 8000fae:	2a21      	cmp	r2, #33	; 0x21
 8000fb0:	f040 8116 	bne.w	80011e0 <HAL_I2C_EV_IRQHandler+0x2a8>
    if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8000fb4:	2c04      	cmp	r4, #4
 8000fb6:	f000 816f 	beq.w	8001298 <HAL_I2C_EV_IRQHandler+0x360>
 8000fba:	2c08      	cmp	r4, #8
 8000fbc:	f000 816c 	beq.w	8001298 <HAL_I2C_EV_IRQHandler+0x360>
 8000fc0:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
 8000fc4:	f000 8168 	beq.w	8001298 <HAL_I2C_EV_IRQHandler+0x360>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8000fc8:	685a      	ldr	r2, [r3, #4]
 8000fca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8000fce:	605a      	str	r2, [r3, #4]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8000fd0:	2311      	movs	r3, #17
 8000fd2:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000fd4:	f880 503e 	strb.w	r5, [r0, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8000fd8:	2320      	movs	r3, #32
 8000fda:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8000fde:	f7ff ff0d 	bl	8000dfc <HAL_I2C_MasterTxCpltCallback>
 8000fe2:	e118      	b.n	8001216 <HAL_I2C_EV_IRQHandler+0x2de>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8000fe4:	6c44      	ldr	r4, [r0, #68]	; 0x44
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8000fe6:	f044 0401 	orr.w	r4, r4, #1
 8000fea:	b2e4      	uxtb	r4, r4
 8000fec:	e7c1      	b.n	8000f72 <HAL_I2C_EV_IRQHandler+0x3a>
    if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000fee:	6904      	ldr	r4, [r0, #16]
 8000ff0:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
 8000ff4:	d105      	bne.n	8001002 <HAL_I2C_EV_IRQHandler+0xca>
      if(hi2c->State == HAL_I2C_STATE_BUSY_TX) 
 8000ff6:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 8000ffa:	2c21      	cmp	r4, #33	; 0x21
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8000ffc:	6c44      	ldr	r4, [r0, #68]	; 0x44
      if(hi2c->State == HAL_I2C_STATE_BUSY_TX) 
 8000ffe:	d1f2      	bne.n	8000fe6 <HAL_I2C_EV_IRQHandler+0xae>
 8001000:	e7b5      	b.n	8000f6e <HAL_I2C_EV_IRQHandler+0x36>
      if(hi2c->EventCount == 0U)
 8001002:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8001004:	b934      	cbnz	r4, 8001014 <HAL_I2C_EV_IRQHandler+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8001006:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001008:	11e4      	asrs	r4, r4, #7
 800100a:	f004 0406 	and.w	r4, r4, #6
 800100e:	f044 04f0 	orr.w	r4, r4, #240	; 0xf0
 8001012:	e7ae      	b.n	8000f72 <HAL_I2C_EV_IRQHandler+0x3a>
      else if(hi2c->EventCount == 1U)
 8001014:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8001016:	2c01      	cmp	r4, #1
 8001018:	d1ac      	bne.n	8000f74 <HAL_I2C_EV_IRQHandler+0x3c>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800101a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800101c:	11e4      	asrs	r4, r4, #7
 800101e:	f004 0406 	and.w	r4, r4, #6
 8001022:	f044 04f1 	orr.w	r4, r4, #241	; 0xf1
 8001026:	e7a4      	b.n	8000f72 <HAL_I2C_EV_IRQHandler+0x3a>
    else if(((sr1itflags & I2C_FLAG_ADD10) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8001028:	4c6a      	ldr	r4, [pc, #424]	; (80011d4 <HAL_I2C_EV_IRQHandler+0x29c>)
 800102a:	400c      	ands	r4, r1
 800102c:	b11c      	cbz	r4, 8001036 <HAL_I2C_EV_IRQHandler+0xfe>
 800102e:	0596      	lsls	r6, r2, #22
 8001030:	d501      	bpl.n	8001036 <HAL_I2C_EV_IRQHandler+0xfe>
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8001032:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001034:	e7d9      	b.n	8000fea <HAL_I2C_EV_IRQHandler+0xb2>
    else if(((sr1itflags & I2C_FLAG_ADDR) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8001036:	4c68      	ldr	r4, [pc, #416]	; (80011d8 <HAL_I2C_EV_IRQHandler+0x2a0>)
 8001038:	400c      	ands	r4, r1
 800103a:	2c00      	cmp	r4, #0
 800103c:	d09a      	beq.n	8000f74 <HAL_I2C_EV_IRQHandler+0x3c>
 800103e:	0594      	lsls	r4, r2, #22
 8001040:	d598      	bpl.n	8000f74 <HAL_I2C_EV_IRQHandler+0x3c>
  uint32_t CurrentMode        = hi2c->Mode;
 8001042:	f890 403e 	ldrb.w	r4, [r0, #62]	; 0x3e
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001046:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
  uint32_t Prev_State         = hi2c->PreviousState;
 8001048:	f8d0 e030 	ldr.w	lr, [r0, #48]	; 0x30
  if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800104c:	f890 703d 	ldrb.w	r7, [r0, #61]	; 0x3d
  uint32_t CurrentMode        = hi2c->Mode;
 8001050:	b2e4      	uxtb	r4, r4
  if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001052:	2f22      	cmp	r7, #34	; 0x22
 8001054:	f040 80af 	bne.w	80011b6 <HAL_I2C_EV_IRQHandler+0x27e>
    if((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8001058:	6d07      	ldr	r7, [r0, #80]	; 0x50
 800105a:	b947      	cbnz	r7, 800106e <HAL_I2C_EV_IRQHandler+0x136>
 800105c:	2c40      	cmp	r4, #64	; 0x40
 800105e:	d106      	bne.n	800106e <HAL_I2C_EV_IRQHandler+0x136>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001060:	9700      	str	r7, [sp, #0]
 8001062:	695c      	ldr	r4, [r3, #20]
 8001064:	9400      	str	r4, [sp, #0]
 8001066:	699c      	ldr	r4, [r3, #24]
 8001068:	9400      	str	r4, [sp, #0]
 800106a:	9c00      	ldr	r4, [sp, #0]
 800106c:	e782      	b.n	8000f74 <HAL_I2C_EV_IRQHandler+0x3c>
    else if((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800106e:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8001070:	b98c      	cbnz	r4, 8001096 <HAL_I2C_EV_IRQHandler+0x15e>
 8001072:	6907      	ldr	r7, [r0, #16]
 8001074:	f5b7 4f40 	cmp.w	r7, #49152	; 0xc000
 8001078:	d10d      	bne.n	8001096 <HAL_I2C_EV_IRQHandler+0x15e>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800107a:	9401      	str	r4, [sp, #4]
 800107c:	695c      	ldr	r4, [r3, #20]
 800107e:	9401      	str	r4, [sp, #4]
 8001080:	699c      	ldr	r4, [r3, #24]
 8001082:	9401      	str	r4, [sp, #4]
 8001084:	9c01      	ldr	r4, [sp, #4]
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8001086:	681c      	ldr	r4, [r3, #0]
 8001088:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 800108c:	601c      	str	r4, [r3, #0]
      hi2c->EventCount++;
 800108e:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8001090:	3401      	adds	r4, #1
      hi2c->EventCount = 0U;
 8001092:	6504      	str	r4, [r0, #80]	; 0x50
 8001094:	e76e      	b.n	8000f74 <HAL_I2C_EV_IRQHandler+0x3c>
      if(hi2c->XferCount == 0U)
 8001096:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
 8001098:	b2a4      	uxth	r4, r4
 800109a:	b954      	cbnz	r4, 80010b2 <HAL_I2C_EV_IRQHandler+0x17a>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800109c:	9402      	str	r4, [sp, #8]
 800109e:	695c      	ldr	r4, [r3, #20]
 80010a0:	9402      	str	r4, [sp, #8]
 80010a2:	699c      	ldr	r4, [r3, #24]
 80010a4:	9402      	str	r4, [sp, #8]
 80010a6:	9c02      	ldr	r4, [sp, #8]
            hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80010a8:	681c      	ldr	r4, [r3, #0]
 80010aa:	f444 7400 	orr.w	r4, r4, #512	; 0x200
 80010ae:	601c      	str	r4, [r3, #0]
 80010b0:	e019      	b.n	80010e6 <HAL_I2C_EV_IRQHandler+0x1ae>
      else if(hi2c->XferCount == 1U)   
 80010b2:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
 80010b4:	b2a4      	uxth	r4, r4
 80010b6:	2c01      	cmp	r4, #1
 80010b8:	d142      	bne.n	8001140 <HAL_I2C_EV_IRQHandler+0x208>
        if(CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80010ba:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
 80010be:	d11b      	bne.n	80010f8 <HAL_I2C_EV_IRQHandler+0x1c0>
            hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80010c0:	681c      	ldr	r4, [r3, #0]
 80010c2:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 80010c6:	601c      	str	r4, [r3, #0]
          if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80010c8:	685c      	ldr	r4, [r3, #4]
 80010ca:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
 80010ce:	d00c      	beq.n	80010ea <HAL_I2C_EV_IRQHandler+0x1b2>
            hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80010d0:	681c      	ldr	r4, [r3, #0]
 80010d2:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 80010d6:	601c      	str	r4, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80010d8:	2400      	movs	r4, #0
 80010da:	9403      	str	r4, [sp, #12]
 80010dc:	695c      	ldr	r4, [r3, #20]
 80010de:	9403      	str	r4, [sp, #12]
 80010e0:	699c      	ldr	r4, [r3, #24]
 80010e2:	9403      	str	r4, [sp, #12]
 80010e4:	9c03      	ldr	r4, [sp, #12]
      hi2c->EventCount = 0U;
 80010e6:	2400      	movs	r4, #0
 80010e8:	e7d3      	b.n	8001092 <HAL_I2C_EV_IRQHandler+0x15a>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80010ea:	9404      	str	r4, [sp, #16]
 80010ec:	695c      	ldr	r4, [r3, #20]
 80010ee:	9404      	str	r4, [sp, #16]
 80010f0:	699c      	ldr	r4, [r3, #24]
 80010f2:	9404      	str	r4, [sp, #16]
 80010f4:	9c04      	ldr	r4, [sp, #16]
 80010f6:	e7d7      	b.n	80010a8 <HAL_I2C_EV_IRQHandler+0x170>
        else if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80010f8:	2e04      	cmp	r6, #4
 80010fa:	d015      	beq.n	8001128 <HAL_I2C_EV_IRQHandler+0x1f0>
 80010fc:	2e08      	cmp	r6, #8
 80010fe:	d013      	beq.n	8001128 <HAL_I2C_EV_IRQHandler+0x1f0>
          && (Prev_State != I2C_STATE_MASTER_BUSY_RX))
 8001100:	f1be 0f12 	cmp.w	lr, #18
 8001104:	d010      	beq.n	8001128 <HAL_I2C_EV_IRQHandler+0x1f0>
          if(hi2c->XferOptions != I2C_NEXT_FRAME)
 8001106:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001108:	2c02      	cmp	r4, #2
            hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800110a:	681c      	ldr	r4, [r3, #0]
 800110c:	bf14      	ite	ne
 800110e:	f424 6480 	bicne.w	r4, r4, #1024	; 0x400
            hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001112:	f444 6480 	orreq.w	r4, r4, #1024	; 0x400
 8001116:	601c      	str	r4, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001118:	2400      	movs	r4, #0
 800111a:	9405      	str	r4, [sp, #20]
 800111c:	695c      	ldr	r4, [r3, #20]
 800111e:	9405      	str	r4, [sp, #20]
 8001120:	699c      	ldr	r4, [r3, #24]
 8001122:	9405      	str	r4, [sp, #20]
 8001124:	9c05      	ldr	r4, [sp, #20]
 8001126:	e7de      	b.n	80010e6 <HAL_I2C_EV_IRQHandler+0x1ae>
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001128:	681c      	ldr	r4, [r3, #0]
 800112a:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 800112e:	601c      	str	r4, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001130:	2400      	movs	r4, #0
 8001132:	9406      	str	r4, [sp, #24]
 8001134:	695c      	ldr	r4, [r3, #20]
 8001136:	9406      	str	r4, [sp, #24]
 8001138:	699c      	ldr	r4, [r3, #24]
 800113a:	9406      	str	r4, [sp, #24]
 800113c:	9c06      	ldr	r4, [sp, #24]
 800113e:	e7b3      	b.n	80010a8 <HAL_I2C_EV_IRQHandler+0x170>
      else if(hi2c->XferCount == 2U)
 8001140:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
 8001142:	b2a4      	uxth	r4, r4
 8001144:	2c02      	cmp	r4, #2
 8001146:	d123      	bne.n	8001190 <HAL_I2C_EV_IRQHandler+0x258>
        if(hi2c->XferOptions != I2C_NEXT_FRAME)
 8001148:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 800114a:	2600      	movs	r6, #0
 800114c:	2c02      	cmp	r4, #2
          hi2c->Instance->CR1 |= I2C_CR1_POS;
 800114e:	681c      	ldr	r4, [r3, #0]
        if(hi2c->XferOptions != I2C_NEXT_FRAME)
 8001150:	d014      	beq.n	800117c <HAL_I2C_EV_IRQHandler+0x244>
          hi2c->Instance->CR1 |= I2C_CR1_POS;
 8001152:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 8001156:	601c      	str	r4, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001158:	9607      	str	r6, [sp, #28]
 800115a:	695c      	ldr	r4, [r3, #20]
 800115c:	9407      	str	r4, [sp, #28]
 800115e:	699c      	ldr	r4, [r3, #24]
 8001160:	9407      	str	r4, [sp, #28]
 8001162:	9c07      	ldr	r4, [sp, #28]
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001164:	681c      	ldr	r4, [r3, #0]
 8001166:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 800116a:	601c      	str	r4, [r3, #0]
        if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800116c:	685c      	ldr	r4, [r3, #4]
 800116e:	0527      	lsls	r7, r4, #20
 8001170:	d5b9      	bpl.n	80010e6 <HAL_I2C_EV_IRQHandler+0x1ae>
          hi2c->Instance->CR2 |= I2C_CR2_LAST;
 8001172:	685c      	ldr	r4, [r3, #4]
 8001174:	f444 5480 	orr.w	r4, r4, #4096	; 0x1000
 8001178:	605c      	str	r4, [r3, #4]
 800117a:	e7b4      	b.n	80010e6 <HAL_I2C_EV_IRQHandler+0x1ae>
          hi2c->Instance->CR1 |= I2C_CR1_ACK;
 800117c:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
 8001180:	601c      	str	r4, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001182:	9608      	str	r6, [sp, #32]
 8001184:	695c      	ldr	r4, [r3, #20]
 8001186:	9408      	str	r4, [sp, #32]
 8001188:	699c      	ldr	r4, [r3, #24]
 800118a:	9408      	str	r4, [sp, #32]
 800118c:	9c08      	ldr	r4, [sp, #32]
 800118e:	e7ed      	b.n	800116c <HAL_I2C_EV_IRQHandler+0x234>
        hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001190:	681c      	ldr	r4, [r3, #0]
 8001192:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
 8001196:	601c      	str	r4, [r3, #0]
        if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8001198:	685c      	ldr	r4, [r3, #4]
 800119a:	0526      	lsls	r6, r4, #20
          hi2c->Instance->CR2 |= I2C_CR2_LAST;
 800119c:	bf42      	ittt	mi
 800119e:	685c      	ldrmi	r4, [r3, #4]
 80011a0:	f444 5480 	orrmi.w	r4, r4, #4096	; 0x1000
 80011a4:	605c      	strmi	r4, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80011a6:	2400      	movs	r4, #0
 80011a8:	9409      	str	r4, [sp, #36]	; 0x24
 80011aa:	695c      	ldr	r4, [r3, #20]
 80011ac:	9409      	str	r4, [sp, #36]	; 0x24
 80011ae:	699c      	ldr	r4, [r3, #24]
 80011b0:	9409      	str	r4, [sp, #36]	; 0x24
 80011b2:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80011b4:	e797      	b.n	80010e6 <HAL_I2C_EV_IRQHandler+0x1ae>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80011b6:	2400      	movs	r4, #0
 80011b8:	940a      	str	r4, [sp, #40]	; 0x28
 80011ba:	695c      	ldr	r4, [r3, #20]
 80011bc:	940a      	str	r4, [sp, #40]	; 0x28
 80011be:	699c      	ldr	r4, [r3, #24]
 80011c0:	940a      	str	r4, [sp, #40]	; 0x28
 80011c2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80011c4:	e6d6      	b.n	8000f74 <HAL_I2C_EV_IRQHandler+0x3c>
 80011c6:	bf00      	nop
 80011c8:	00100004 	.word	0x00100004
 80011cc:	00010004 	.word	0x00010004
 80011d0:	00010080 	.word	0x00010080
 80011d4:	00010008 	.word	0x00010008
 80011d8:	00010002 	.word	0x00010002
  else if((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80011dc:	2a21      	cmp	r2, #33	; 0x21
 80011de:	d003      	beq.n	80011e8 <HAL_I2C_EV_IRQHandler+0x2b0>
 80011e0:	2940      	cmp	r1, #64	; 0x40
 80011e2:	d118      	bne.n	8001216 <HAL_I2C_EV_IRQHandler+0x2de>
    ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80011e4:	2a22      	cmp	r2, #34	; 0x22
 80011e6:	d116      	bne.n	8001216 <HAL_I2C_EV_IRQHandler+0x2de>
    if(hi2c->XferCount == 0U)
 80011e8:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 80011ea:	b292      	uxth	r2, r2
 80011ec:	b922      	cbnz	r2, 80011f8 <HAL_I2C_EV_IRQHandler+0x2c0>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80011ee:	685a      	ldr	r2, [r3, #4]
 80011f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80011f4:	605a      	str	r2, [r3, #4]
 80011f6:	e00e      	b.n	8001216 <HAL_I2C_EV_IRQHandler+0x2de>
      if(hi2c->Mode == HAL_I2C_MODE_MEM)
 80011f8:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 80011fc:	2a40      	cmp	r2, #64	; 0x40
 80011fe:	d128      	bne.n	8001252 <HAL_I2C_EV_IRQHandler+0x31a>
        if(hi2c->EventCount == 0)
 8001200:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8001202:	b982      	cbnz	r2, 8001226 <HAL_I2C_EV_IRQHandler+0x2ee>
          if(hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001204:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8001206:	2a01      	cmp	r2, #1
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001208:	6c82      	ldr	r2, [r0, #72]	; 0x48
          if(hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800120a:	d106      	bne.n	800121a <HAL_I2C_EV_IRQHandler+0x2e2>
 800120c:	b2d2      	uxtb	r2, r2
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800120e:	611a      	str	r2, [r3, #16]
            hi2c->EventCount += 2;
 8001210:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001212:	3302      	adds	r3, #2
            hi2c->EventCount++;
 8001214:	6503      	str	r3, [r0, #80]	; 0x50
}
 8001216:	b00d      	add	sp, #52	; 0x34
 8001218:	bdf0      	pop	{r4, r5, r6, r7, pc}
            hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800121a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800121e:	611a      	str	r2, [r3, #16]
            hi2c->EventCount++;
 8001220:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001222:	3301      	adds	r3, #1
 8001224:	e7f6      	b.n	8001214 <HAL_I2C_EV_IRQHandler+0x2dc>
        else if(hi2c->EventCount == 1)
 8001226:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8001228:	2a01      	cmp	r2, #1
 800122a:	d102      	bne.n	8001232 <HAL_I2C_EV_IRQHandler+0x2fa>
          hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800122c:	6c82      	ldr	r2, [r0, #72]	; 0x48
 800122e:	b2d2      	uxtb	r2, r2
 8001230:	e7f5      	b.n	800121e <HAL_I2C_EV_IRQHandler+0x2e6>
        else if(hi2c->EventCount == 2)
 8001232:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8001234:	2a02      	cmp	r2, #2
 8001236:	d1ee      	bne.n	8001216 <HAL_I2C_EV_IRQHandler+0x2de>
          if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001238:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 800123c:	2a22      	cmp	r2, #34	; 0x22
 800123e:	d104      	bne.n	800124a <HAL_I2C_EV_IRQHandler+0x312>
            hi2c->Instance->CR1 |= I2C_CR1_START;
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	e7e5      	b.n	8001216 <HAL_I2C_EV_IRQHandler+0x2de>
          else if(hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800124a:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 800124e:	2a21      	cmp	r2, #33	; 0x21
 8001250:	d1e1      	bne.n	8001216 <HAL_I2C_EV_IRQHandler+0x2de>
    hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001252:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8001254:	1c51      	adds	r1, r2, #1
 8001256:	6241      	str	r1, [r0, #36]	; 0x24
 8001258:	7812      	ldrb	r2, [r2, #0]
 800125a:	611a      	str	r2, [r3, #16]
 800125c:	e099      	b.n	8001392 <HAL_I2C_EV_IRQHandler+0x45a>
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 800125e:	2c00      	cmp	r4, #0
 8001260:	d0d9      	beq.n	8001216 <HAL_I2C_EV_IRQHandler+0x2de>
 8001262:	0594      	lsls	r4, r2, #22
 8001264:	d5d7      	bpl.n	8001216 <HAL_I2C_EV_IRQHandler+0x2de>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001266:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  if(hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001268:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 800126c:	2a21      	cmp	r2, #33	; 0x21
 800126e:	d1d2      	bne.n	8001216 <HAL_I2C_EV_IRQHandler+0x2de>
    if(hi2c->XferCount != 0U)
 8001270:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8001272:	b292      	uxth	r2, r2
 8001274:	2a00      	cmp	r2, #0
 8001276:	d1ec      	bne.n	8001252 <HAL_I2C_EV_IRQHandler+0x31a>
      if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001278:	2904      	cmp	r1, #4
 800127a:	d00d      	beq.n	8001298 <HAL_I2C_EV_IRQHandler+0x360>
 800127c:	2908      	cmp	r1, #8
 800127e:	d00b      	beq.n	8001298 <HAL_I2C_EV_IRQHandler+0x360>
 8001280:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 8001284:	d008      	beq.n	8001298 <HAL_I2C_EV_IRQHandler+0x360>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001286:	6859      	ldr	r1, [r3, #4]
 8001288:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 800128c:	6059      	str	r1, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800128e:	2311      	movs	r3, #17
 8001290:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001292:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
 8001296:	e69f      	b.n	8000fd8 <HAL_I2C_EV_IRQHandler+0xa0>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001298:	685a      	ldr	r2, [r3, #4]
 800129a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800129e:	605a      	str	r2, [r3, #4]
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80012a6:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80012a8:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 80012aa:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 80012ac:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80012ae:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
        if(hi2c->Mode == HAL_I2C_MODE_MEM)
 80012b2:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80012b6:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        if(hi2c->Mode == HAL_I2C_MODE_MEM)
 80012ba:	2a40      	cmp	r2, #64	; 0x40
 80012bc:	f47f ae8f 	bne.w	8000fde <HAL_I2C_EV_IRQHandler+0xa6>
          HAL_I2C_MemTxCpltCallback(hi2c);
 80012c0:	f7ff fda2 	bl	8000e08 <HAL_I2C_MemTxCpltCallback>
 80012c4:	e7a7      	b.n	8001216 <HAL_I2C_EV_IRQHandler+0x2de>
      if(((sr1itflags & I2C_FLAG_RXNE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 80012c6:	4d8f      	ldr	r5, [pc, #572]	; (8001504 <HAL_I2C_EV_IRQHandler+0x5cc>)
 80012c8:	400d      	ands	r5, r1
 80012ca:	2d00      	cmp	r5, #0
 80012cc:	d046      	beq.n	800135c <HAL_I2C_EV_IRQHandler+0x424>
 80012ce:	0551      	lsls	r1, r2, #21
 80012d0:	d544      	bpl.n	800135c <HAL_I2C_EV_IRQHandler+0x424>
 80012d2:	2c00      	cmp	r4, #0
 80012d4:	d142      	bne.n	800135c <HAL_I2C_EV_IRQHandler+0x424>
  if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80012d6:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 80012da:	2a22      	cmp	r2, #34	; 0x22
 80012dc:	d19b      	bne.n	8001216 <HAL_I2C_EV_IRQHandler+0x2de>
    tmp = hi2c->XferCount;
 80012de:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 80012e0:	b292      	uxth	r2, r2
    if(tmp > 3U)
 80012e2:	2a03      	cmp	r2, #3
 80012e4:	d905      	bls.n	80012f2 <HAL_I2C_EV_IRQHandler+0x3ba>
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80012e6:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80012e8:	691b      	ldr	r3, [r3, #16]
 80012ea:	1c51      	adds	r1, r2, #1
 80012ec:	6241      	str	r1, [r0, #36]	; 0x24
 80012ee:	7013      	strb	r3, [r2, #0]
 80012f0:	e04f      	b.n	8001392 <HAL_I2C_EV_IRQHandler+0x45a>
    else if((tmp == 2U) || (tmp == 3U))
 80012f2:	3a02      	subs	r2, #2
 80012f4:	2a01      	cmp	r2, #1
      if(hi2c->XferOptions != I2C_NEXT_FRAME)
 80012f6:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    else if((tmp == 2U) || (tmp == 3U))
 80012f8:	d80d      	bhi.n	8001316 <HAL_I2C_EV_IRQHandler+0x3de>
      if(hi2c->XferOptions != I2C_NEXT_FRAME)
 80012fa:	2a02      	cmp	r2, #2
        hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	bf1d      	ittte	ne
 8001300:	f422 6280 	bicne.w	r2, r2, #1024	; 0x400
 8001304:	601a      	strne	r2, [r3, #0]
        hi2c->Instance->CR1 |= I2C_CR1_POS;
 8001306:	681a      	ldrne	r2, [r3, #0]
        hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001308:	f442 6280 	orreq.w	r2, r2, #1024	; 0x400
        hi2c->Instance->CR1 |= I2C_CR1_POS;
 800130c:	bf18      	it	ne
 800130e:	f442 6200 	orrne.w	r2, r2, #2048	; 0x800
        hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001312:	601a      	str	r2, [r3, #0]
 8001314:	e76b      	b.n	80011ee <HAL_I2C_EV_IRQHandler+0x2b6>
      if(hi2c->XferOptions != I2C_NEXT_FRAME)
 8001316:	2a02      	cmp	r2, #2
        hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	bf14      	ite	ne
 800131c:	f422 6280 	bicne.w	r2, r2, #1024	; 0x400
        hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001320:	f442 6280 	orreq.w	r2, r2, #1024	; 0x400
 8001324:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001326:	685a      	ldr	r2, [r3, #4]
 8001328:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800132c:	605a      	str	r2, [r3, #4]
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800132e:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8001330:	691b      	ldr	r3, [r3, #16]
 8001332:	1c51      	adds	r1, r2, #1
 8001334:	6241      	str	r1, [r0, #36]	; 0x24
 8001336:	7013      	strb	r3, [r2, #0]
    hi2c->XferCount--;
 8001338:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800133a:	3b01      	subs	r3, #1
 800133c:	b29b      	uxth	r3, r3
 800133e:	8543      	strh	r3, [r0, #42]	; 0x2a
    hi2c->State = HAL_I2C_STATE_READY;
 8001340:	2320      	movs	r3, #32
 8001342:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->PreviousState = I2C_STATE_NONE;
 8001346:	2300      	movs	r3, #0
 8001348:	6303      	str	r3, [r0, #48]	; 0x30
    if(hi2c->Mode == HAL_I2C_MODE_MEM)
 800134a:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800134e:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8001352:	2a40      	cmp	r2, #64	; 0x40
 8001354:	d151      	bne.n	80013fa <HAL_I2C_EV_IRQHandler+0x4c2>
      HAL_I2C_MemRxCpltCallback(hi2c);
 8001356:	f7ff fd58 	bl	8000e0a <HAL_I2C_MemRxCpltCallback>
 800135a:	e75c      	b.n	8001216 <HAL_I2C_EV_IRQHandler+0x2de>
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 800135c:	2c00      	cmp	r4, #0
 800135e:	f43f af5a 	beq.w	8001216 <HAL_I2C_EV_IRQHandler+0x2de>
 8001362:	0597      	lsls	r7, r2, #22
 8001364:	f57f af57 	bpl.w	8001216 <HAL_I2C_EV_IRQHandler+0x2de>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001368:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  if(hi2c->XferCount == 3U)
 800136a:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
 800136c:	b289      	uxth	r1, r1
 800136e:	2903      	cmp	r1, #3
 8001370:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8001372:	d113      	bne.n	800139c <HAL_I2C_EV_IRQHandler+0x464>
    if((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001374:	2a04      	cmp	r2, #4
 8001376:	d004      	beq.n	8001382 <HAL_I2C_EV_IRQHandler+0x44a>
 8001378:	2a08      	cmp	r2, #8
 800137a:	d002      	beq.n	8001382 <HAL_I2C_EV_IRQHandler+0x44a>
 800137c:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8001380:	d103      	bne.n	800138a <HAL_I2C_EV_IRQHandler+0x452>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001388:	601a      	str	r2, [r3, #0]
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800138a:	691b      	ldr	r3, [r3, #16]
 800138c:	1c4a      	adds	r2, r1, #1
 800138e:	6242      	str	r2, [r0, #36]	; 0x24
 8001390:	700b      	strb	r3, [r1, #0]
    hi2c->XferCount--;
 8001392:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001394:	3b01      	subs	r3, #1
 8001396:	b29b      	uxth	r3, r3
 8001398:	8543      	strh	r3, [r0, #42]	; 0x2a
}
 800139a:	e73c      	b.n	8001216 <HAL_I2C_EV_IRQHandler+0x2de>
  else if(hi2c->XferCount == 2U)
 800139c:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
 800139e:	b2a4      	uxth	r4, r4
 80013a0:	2c02      	cmp	r4, #2
 80013a2:	d1f2      	bne.n	800138a <HAL_I2C_EV_IRQHandler+0x452>
    if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80013a4:	2a04      	cmp	r2, #4
 80013a6:	d01f      	beq.n	80013e8 <HAL_I2C_EV_IRQHandler+0x4b0>
 80013a8:	2a08      	cmp	r2, #8
 80013aa:	d01d      	beq.n	80013e8 <HAL_I2C_EV_IRQHandler+0x4b0>
 80013ac:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 80013b0:	d01a      	beq.n	80013e8 <HAL_I2C_EV_IRQHandler+0x4b0>
      if(CurrentXferOptions != I2C_NEXT_FRAME)
 80013b2:	2a02      	cmp	r2, #2
        hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	bf14      	ite	ne
 80013b8:	f422 6280 	bicne.w	r2, r2, #1024	; 0x400
        hi2c->Instance->CR1 |= I2C_CR1_ACK;
 80013bc:	f442 6280 	orreq.w	r2, r2, #1024	; 0x400
 80013c0:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80013c2:	685a      	ldr	r2, [r3, #4]
 80013c4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80013c8:	605a      	str	r2, [r3, #4]
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80013ca:	691b      	ldr	r3, [r3, #16]
 80013cc:	1c4a      	adds	r2, r1, #1
 80013ce:	6242      	str	r2, [r0, #36]	; 0x24
 80013d0:	700b      	strb	r3, [r1, #0]
    hi2c->XferCount--;
 80013d2:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80013d4:	3b01      	subs	r3, #1
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	8543      	strh	r3, [r0, #42]	; 0x2a
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80013da:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80013dc:	1c5a      	adds	r2, r3, #1
 80013de:	6242      	str	r2, [r0, #36]	; 0x24
 80013e0:	6802      	ldr	r2, [r0, #0]
 80013e2:	6912      	ldr	r2, [r2, #16]
 80013e4:	701a      	strb	r2, [r3, #0]
 80013e6:	e7a7      	b.n	8001338 <HAL_I2C_EV_IRQHandler+0x400>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80013e8:	685a      	ldr	r2, [r3, #4]
 80013ea:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80013ee:	605a      	str	r2, [r3, #4]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80013f6:	601a      	str	r2, [r3, #0]
 80013f8:	e7e7      	b.n	80013ca <HAL_I2C_EV_IRQHandler+0x492>
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80013fa:	f7ff fd00 	bl	8000dfe <HAL_I2C_MasterRxCpltCallback>
 80013fe:	e70a      	b.n	8001216 <HAL_I2C_EV_IRQHandler+0x2de>
    if(((sr1itflags & I2C_FLAG_ADDR) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8001400:	4c41      	ldr	r4, [pc, #260]	; (8001508 <HAL_I2C_EV_IRQHandler+0x5d0>)
 8001402:	400c      	ands	r4, r1
 8001404:	b174      	cbz	r4, 8001424 <HAL_I2C_EV_IRQHandler+0x4ec>
 8001406:	0596      	lsls	r6, r2, #22
 8001408:	d50c      	bpl.n	8001424 <HAL_I2C_EV_IRQHandler+0x4ec>
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TRA) == RESET)
 800140a:	6999      	ldr	r1, [r3, #24]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_DUALF) == RESET)
 800140c:	699b      	ldr	r3, [r3, #24]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TRA) == RESET)
 800140e:	f081 0104 	eor.w	r1, r1, #4
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_DUALF) == RESET)
 8001412:	061d      	lsls	r5, r3, #24
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8001414:	f3c1 0180 	ubfx	r1, r1, #2, #1
    SlaveAddrCode = hi2c->Init.OwnAddress1;
 8001418:	bf54      	ite	pl
 800141a:	8982      	ldrhpl	r2, [r0, #12]
    SlaveAddrCode = hi2c->Init.OwnAddress2;
 800141c:	8b02      	ldrhmi	r2, [r0, #24]
  HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800141e:	f7ff fcf1 	bl	8000e04 <HAL_I2C_AddrCallback>
 8001422:	e6f8      	b.n	8001216 <HAL_I2C_EV_IRQHandler+0x2de>
    else if(((sr1itflags & I2C_FLAG_STOPF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8001424:	4c39      	ldr	r4, [pc, #228]	; (800150c <HAL_I2C_EV_IRQHandler+0x5d4>)
 8001426:	400c      	ands	r4, r1
 8001428:	2c00      	cmp	r4, #0
 800142a:	d073      	beq.n	8001514 <HAL_I2C_EV_IRQHandler+0x5dc>
 800142c:	0594      	lsls	r4, r2, #22
 800142e:	d571      	bpl.n	8001514 <HAL_I2C_EV_IRQHandler+0x5dc>
  uint32_t CurrentState = hi2c->State;
 8001430:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001434:	6859      	ldr	r1, [r3, #4]
  uint32_t CurrentState = hi2c->State;
 8001436:	b2d2      	uxtb	r2, r2
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001438:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 800143c:	6059      	str	r1, [r3, #4]
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800143e:	2100      	movs	r1, #0
 8001440:	910b      	str	r1, [sp, #44]	; 0x2c
 8001442:	6959      	ldr	r1, [r3, #20]
 8001444:	910b      	str	r1, [sp, #44]	; 0x2c
 8001446:	6819      	ldr	r1, [r3, #0]
 8001448:	f041 0101 	orr.w	r1, r1, #1
 800144c:	6019      	str	r1, [r3, #0]
 800144e:	990b      	ldr	r1, [sp, #44]	; 0x2c
  hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001450:	6819      	ldr	r1, [r3, #0]
 8001452:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8001456:	6019      	str	r1, [r3, #0]
  if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8001458:	6859      	ldr	r1, [r3, #4]
 800145a:	0509      	lsls	r1, r1, #20
 800145c:	d50c      	bpl.n	8001478 <HAL_I2C_EV_IRQHandler+0x540>
    if((hi2c->State == HAL_I2C_STATE_BUSY_RX) || (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800145e:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
 8001462:	2922      	cmp	r1, #34	; 0x22
 8001464:	d003      	beq.n	800146e <HAL_I2C_EV_IRQHandler+0x536>
 8001466:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
 800146a:	292a      	cmp	r1, #42	; 0x2a
 800146c:	d129      	bne.n	80014c2 <HAL_I2C_EV_IRQHandler+0x58a>
      hi2c->XferCount = __HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 800146e:	6b81      	ldr	r1, [r0, #56]	; 0x38
      hi2c->XferCount = __HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8001470:	6809      	ldr	r1, [r1, #0]
 8001472:	6849      	ldr	r1, [r1, #4]
 8001474:	b289      	uxth	r1, r1
 8001476:	8541      	strh	r1, [r0, #42]	; 0x2a
  if(hi2c->XferCount != 0U)
 8001478:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
 800147a:	b289      	uxth	r1, r1
 800147c:	b1e1      	cbz	r1, 80014b8 <HAL_I2C_EV_IRQHandler+0x580>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800147e:	6959      	ldr	r1, [r3, #20]
 8001480:	074f      	lsls	r7, r1, #29
 8001482:	d508      	bpl.n	8001496 <HAL_I2C_EV_IRQHandler+0x55e>
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001484:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8001486:	691b      	ldr	r3, [r3, #16]
 8001488:	1c4c      	adds	r4, r1, #1
 800148a:	6244      	str	r4, [r0, #36]	; 0x24
 800148c:	700b      	strb	r3, [r1, #0]
      hi2c->XferCount--;
 800148e:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001490:	3b01      	subs	r3, #1
 8001492:	b29b      	uxth	r3, r3
 8001494:	8543      	strh	r3, [r0, #42]	; 0x2a
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8001496:	6801      	ldr	r1, [r0, #0]
 8001498:	694b      	ldr	r3, [r1, #20]
 800149a:	065e      	lsls	r6, r3, #25
 800149c:	d508      	bpl.n	80014b0 <HAL_I2C_EV_IRQHandler+0x578>
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800149e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80014a0:	6909      	ldr	r1, [r1, #16]
 80014a2:	1c5c      	adds	r4, r3, #1
 80014a4:	6244      	str	r4, [r0, #36]	; 0x24
 80014a6:	7019      	strb	r1, [r3, #0]
      hi2c->XferCount--;
 80014a8:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80014aa:	3b01      	subs	r3, #1
 80014ac:	b29b      	uxth	r3, r3
 80014ae:	8543      	strh	r3, [r0, #42]	; 0x2a
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80014b0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80014b2:	f043 0304 	orr.w	r3, r3, #4
 80014b6:	6403      	str	r3, [r0, #64]	; 0x40
  if(hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80014b8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80014ba:	b123      	cbz	r3, 80014c6 <HAL_I2C_EV_IRQHandler+0x58e>
    I2C_ITError(hi2c);
 80014bc:	f7ff fca8 	bl	8000e10 <I2C_ITError>
 80014c0:	e6a9      	b.n	8001216 <HAL_I2C_EV_IRQHandler+0x2de>
      hi2c->XferCount = __HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 80014c2:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80014c4:	e7d4      	b.n	8001470 <HAL_I2C_EV_IRQHandler+0x538>
    if((CurrentState == HAL_I2C_STATE_LISTEN ) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN) || \
 80014c6:	f1a2 0128 	sub.w	r1, r2, #40	; 0x28
 80014ca:	2902      	cmp	r1, #2
 80014cc:	d80a      	bhi.n	80014e4 <HAL_I2C_EV_IRQHandler+0x5ac>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80014ce:	4a10      	ldr	r2, [pc, #64]	; (8001510 <HAL_I2C_EV_IRQHandler+0x5d8>)
 80014d0:	62c2      	str	r2, [r0, #44]	; 0x2c
      hi2c->State = HAL_I2C_STATE_READY;
 80014d2:	2220      	movs	r2, #32
      hi2c->PreviousState = I2C_STATE_NONE;
 80014d4:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80014d6:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80014da:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80014de:	f7ff fc92 	bl	8000e06 <HAL_I2C_ListenCpltCallback>
 80014e2:	e698      	b.n	8001216 <HAL_I2C_EV_IRQHandler+0x2de>
      if((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80014e4:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80014e6:	2b22      	cmp	r3, #34	; 0x22
 80014e8:	d002      	beq.n	80014f0 <HAL_I2C_EV_IRQHandler+0x5b8>
 80014ea:	2a22      	cmp	r2, #34	; 0x22
 80014ec:	f47f ae93 	bne.w	8001216 <HAL_I2C_EV_IRQHandler+0x2de>
        hi2c->PreviousState = I2C_STATE_NONE;
 80014f0:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 80014f2:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 80014f4:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80014f6:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80014fa:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80014fe:	f7ff fc80 	bl	8000e02 <HAL_I2C_SlaveRxCpltCallback>
 8001502:	e688      	b.n	8001216 <HAL_I2C_EV_IRQHandler+0x2de>
 8001504:	00010040 	.word	0x00010040
 8001508:	00010002 	.word	0x00010002
 800150c:	00010010 	.word	0x00010010
 8001510:	ffff0000 	.word	0xffff0000
    else if((sr2itflags & I2C_FLAG_TRA) != RESET)
 8001514:	4e39      	ldr	r6, [pc, #228]	; (80015fc <HAL_I2C_EV_IRQHandler+0x6c4>)
 8001516:	4c3a      	ldr	r4, [pc, #232]	; (8001600 <HAL_I2C_EV_IRQHandler+0x6c8>)
 8001518:	402e      	ands	r6, r5
 800151a:	400c      	ands	r4, r1
 800151c:	2e00      	cmp	r6, #0
 800151e:	d036      	beq.n	800158e <HAL_I2C_EV_IRQHandler+0x656>
      if(((sr1itflags & I2C_FLAG_TXE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 8001520:	4d38      	ldr	r5, [pc, #224]	; (8001604 <HAL_I2C_EV_IRQHandler+0x6cc>)
 8001522:	400d      	ands	r5, r1
 8001524:	b33d      	cbz	r5, 8001576 <HAL_I2C_EV_IRQHandler+0x63e>
 8001526:	0555      	lsls	r5, r2, #21
 8001528:	d525      	bpl.n	8001576 <HAL_I2C_EV_IRQHandler+0x63e>
 800152a:	bb24      	cbnz	r4, 8001576 <HAL_I2C_EV_IRQHandler+0x63e>
  uint32_t CurrentState = hi2c->State;
 800152c:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
  if(hi2c->XferCount != 0U)
 8001530:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
  uint32_t CurrentState = hi2c->State;
 8001532:	b2c9      	uxtb	r1, r1
  if(hi2c->XferCount != 0U)
 8001534:	b292      	uxth	r2, r2
 8001536:	2a00      	cmp	r2, #0
 8001538:	f43f ae6d 	beq.w	8001216 <HAL_I2C_EV_IRQHandler+0x2de>
    hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800153c:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800153e:	1c54      	adds	r4, r2, #1
 8001540:	6244      	str	r4, [r0, #36]	; 0x24
 8001542:	7812      	ldrb	r2, [r2, #0]
 8001544:	611a      	str	r2, [r3, #16]
    hi2c->XferCount--;
 8001546:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8001548:	3a01      	subs	r2, #1
 800154a:	b292      	uxth	r2, r2
 800154c:	8542      	strh	r2, [r0, #42]	; 0x2a
    if((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800154e:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8001550:	b292      	uxth	r2, r2
 8001552:	2a00      	cmp	r2, #0
 8001554:	f47f ae5f 	bne.w	8001216 <HAL_I2C_EV_IRQHandler+0x2de>
 8001558:	2929      	cmp	r1, #41	; 0x29
 800155a:	f47f ae5c 	bne.w	8001216 <HAL_I2C_EV_IRQHandler+0x2de>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800155e:	685a      	ldr	r2, [r3, #4]
 8001560:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001564:	605a      	str	r2, [r3, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001566:	2321      	movs	r3, #33	; 0x21
 8001568:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800156a:	2328      	movs	r3, #40	; 0x28
 800156c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001570:	f7ff fc46 	bl	8000e00 <HAL_I2C_SlaveTxCpltCallback>
 8001574:	e64f      	b.n	8001216 <HAL_I2C_EV_IRQHandler+0x2de>
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8001576:	2c00      	cmp	r4, #0
 8001578:	f43f ae4d 	beq.w	8001216 <HAL_I2C_EV_IRQHandler+0x2de>
 800157c:	0594      	lsls	r4, r2, #22
 800157e:	f57f ae4a 	bpl.w	8001216 <HAL_I2C_EV_IRQHandler+0x2de>
  if(hi2c->XferCount != 0U)
 8001582:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8001584:	b292      	uxth	r2, r2
 8001586:	2a00      	cmp	r2, #0
 8001588:	f47f ae63 	bne.w	8001252 <HAL_I2C_EV_IRQHandler+0x31a>
 800158c:	e643      	b.n	8001216 <HAL_I2C_EV_IRQHandler+0x2de>
      if(((sr1itflags & I2C_FLAG_RXNE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 800158e:	4d1e      	ldr	r5, [pc, #120]	; (8001608 <HAL_I2C_EV_IRQHandler+0x6d0>)
 8001590:	400d      	ands	r5, r1
 8001592:	b335      	cbz	r5, 80015e2 <HAL_I2C_EV_IRQHandler+0x6aa>
 8001594:	0551      	lsls	r1, r2, #21
 8001596:	d524      	bpl.n	80015e2 <HAL_I2C_EV_IRQHandler+0x6aa>
 8001598:	bb1c      	cbnz	r4, 80015e2 <HAL_I2C_EV_IRQHandler+0x6aa>
  uint32_t CurrentState = hi2c->State;
 800159a:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  if(hi2c->XferCount != 0U)
 800159e:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
  uint32_t CurrentState = hi2c->State;
 80015a0:	b2d2      	uxtb	r2, r2
  if(hi2c->XferCount != 0U)
 80015a2:	b289      	uxth	r1, r1
 80015a4:	2900      	cmp	r1, #0
 80015a6:	f43f ae36 	beq.w	8001216 <HAL_I2C_EV_IRQHandler+0x2de>
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80015aa:	6a41      	ldr	r1, [r0, #36]	; 0x24
 80015ac:	691b      	ldr	r3, [r3, #16]
 80015ae:	1c4c      	adds	r4, r1, #1
 80015b0:	6244      	str	r4, [r0, #36]	; 0x24
 80015b2:	700b      	strb	r3, [r1, #0]
    hi2c->XferCount--;
 80015b4:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80015b6:	3b01      	subs	r3, #1
 80015b8:	b29b      	uxth	r3, r3
 80015ba:	8543      	strh	r3, [r0, #42]	; 0x2a
    if((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80015bc:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80015be:	b29b      	uxth	r3, r3
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	f47f ae28 	bne.w	8001216 <HAL_I2C_EV_IRQHandler+0x2de>
 80015c6:	2a2a      	cmp	r2, #42	; 0x2a
 80015c8:	f47f ae25 	bne.w	8001216 <HAL_I2C_EV_IRQHandler+0x2de>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80015cc:	6802      	ldr	r2, [r0, #0]
 80015ce:	6853      	ldr	r3, [r2, #4]
 80015d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80015d4:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80015d6:	2322      	movs	r3, #34	; 0x22
 80015d8:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80015da:	2328      	movs	r3, #40	; 0x28
 80015dc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 80015e0:	e78d      	b.n	80014fe <HAL_I2C_EV_IRQHandler+0x5c6>
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 80015e2:	2c00      	cmp	r4, #0
 80015e4:	f43f ae17 	beq.w	8001216 <HAL_I2C_EV_IRQHandler+0x2de>
 80015e8:	0592      	lsls	r2, r2, #22
 80015ea:	f57f ae14 	bpl.w	8001216 <HAL_I2C_EV_IRQHandler+0x2de>
  if(hi2c->XferCount != 0U)
 80015ee:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 80015f0:	b292      	uxth	r2, r2
 80015f2:	2a00      	cmp	r2, #0
 80015f4:	f47f ae77 	bne.w	80012e6 <HAL_I2C_EV_IRQHandler+0x3ae>
 80015f8:	e60d      	b.n	8001216 <HAL_I2C_EV_IRQHandler+0x2de>
 80015fa:	bf00      	nop
 80015fc:	00100004 	.word	0x00100004
 8001600:	00010004 	.word	0x00010004
 8001604:	00010080 	.word	0x00010080
 8001608:	00010040 	.word	0x00010040

0800160c <I2C_DMAAbort>:
  I2C_HandleTypeDef* hi2c = ( I2C_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800160c:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 800160e:	b508      	push	{r3, lr}
  hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001610:	6803      	ldr	r3, [r0, #0]
  hi2c->hdmatx->XferAbortCallback = NULL;
 8001612:	6b41      	ldr	r1, [r0, #52]	; 0x34
  hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800161a:	601a      	str	r2, [r3, #0]
  hi2c->XferCount = 0U;
 800161c:	2200      	movs	r2, #0
 800161e:	8542      	strh	r2, [r0, #42]	; 0x2a
  hi2c->hdmatx->XferAbortCallback = NULL;
 8001620:	634a      	str	r2, [r1, #52]	; 0x34
  hi2c->hdmarx->XferAbortCallback = NULL;
 8001622:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8001624:	634a      	str	r2, [r1, #52]	; 0x34
  if(hi2c->State == HAL_I2C_STATE_ABORT)
 8001626:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
 800162a:	2960      	cmp	r1, #96	; 0x60
 800162c:	f04f 0120 	mov.w	r1, #32
    hi2c->State = HAL_I2C_STATE_READY;
 8001630:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001634:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
  if(hi2c->State == HAL_I2C_STATE_ABORT)
 8001638:	d107      	bne.n	800164a <I2C_DMAAbort+0x3e>
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800163a:	6402      	str	r2, [r0, #64]	; 0x40
    __HAL_I2C_DISABLE(hi2c);
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	f022 0201 	bic.w	r2, r2, #1
 8001642:	601a      	str	r2, [r3, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8001644:	f7ff fbe3 	bl	8000e0e <HAL_I2C_AbortCpltCallback>
 8001648:	bd08      	pop	{r3, pc}
    __HAL_I2C_DISABLE(hi2c);
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	f022 0201 	bic.w	r2, r2, #1
 8001650:	601a      	str	r2, [r3, #0]
    HAL_I2C_ErrorCallback(hi2c);
 8001652:	f7ff fbdb 	bl	8000e0c <HAL_I2C_ErrorCallback>
 8001656:	bd08      	pop	{r3, pc}

08001658 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t index = 0U;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 800165c:	4604      	mov	r4, r0
{
 800165e:	b086      	sub	sp, #24
  if(hpcd == NULL)
 8001660:	2800      	cmp	r0, #0
 8001662:	d060      	beq.n	8001726 <HAL_PCD_Init+0xce>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if(hpcd->State == HAL_PCD_STATE_RESET)
 8001664:	f890 3429 	ldrb.w	r3, [r0, #1065]	; 0x429
 8001668:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800166c:	b91b      	cbnz	r3, 8001676 <HAL_PCD_Init+0x1e>
  {  
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800166e:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001672:	f002 fa7f 	bl	8003b74 <HAL_PCD_MspInit>
  }
  
  hpcd->State = HAL_PCD_STATE_BUSY;
  
  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001676:	4625      	mov	r5, r4
  hpcd->State = HAL_PCD_STATE_BUSY;
 8001678:	2303      	movs	r3, #3

  /*Init the Core (common init.) */
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 800167a:	466e      	mov	r6, sp
  __HAL_PCD_DISABLE(hpcd);
 800167c:	f855 0b10 	ldr.w	r0, [r5], #16
  hpcd->State = HAL_PCD_STATE_BUSY;
 8001680:	f884 3429 	strb.w	r3, [r4, #1065]	; 0x429
  __HAL_PCD_DISABLE(hpcd);
 8001684:	f000 fefe 	bl	8002484 <USB_DisableGlobalInt>
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 8001688:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800168a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800168c:	682b      	ldr	r3, [r5, #0]
 800168e:	f104 0804 	add.w	r8, r4, #4
 8001692:	6033      	str	r3, [r6, #0]
 8001694:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8001698:	6820      	ldr	r0, [r4, #0]
 800169a:	f000 fee3 	bl	8002464 <USB_CoreInit>
 
  /* Force Device Mode*/
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 800169e:	2100      	movs	r1, #0
 80016a0:	6820      	ldr	r0, [r4, #0]
 80016a2:	f000 fef9 	bl	8002498 <USB_SetCurrentMode>
 
  /* Init endpoints structures */
  for (index = 0U; index < 15U ; index++)
 80016a6:	2100      	movs	r1, #0
 80016a8:	4623      	mov	r3, r4
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 80016aa:	4622      	mov	r2, r4
  {
    /* Init ep structure */
    hpcd->IN_ep[index].is_in = 1U;
 80016ac:	2601      	movs	r6, #1
    hpcd->IN_ep[index].num = index;
    hpcd->IN_ep[index].tx_fifo_num = index;
    /* Control until ep is actvated */
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 80016ae:	4608      	mov	r0, r1
 80016b0:	f104 0510 	add.w	r5, r4, #16
    hpcd->IN_ep[index].num = index;
 80016b4:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
    hpcd->IN_ep[index].tx_fifo_num = index;
 80016b8:	8691      	strh	r1, [r2, #52]	; 0x34
  for (index = 0U; index < 15U ; index++)
 80016ba:	3101      	adds	r1, #1
 80016bc:	290f      	cmp	r1, #15
    hpcd->IN_ep[index].is_in = 1U;
 80016be:	f882 6029 	strb.w	r6, [r2, #41]	; 0x29
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 80016c2:	f882 002b 	strb.w	r0, [r2, #43]	; 0x2b
    hpcd->IN_ep[index].maxpacket =  0U;
 80016c6:	6390      	str	r0, [r2, #56]	; 0x38
    hpcd->IN_ep[index].xfer_buff = 0U;
 80016c8:	63d0      	str	r0, [r2, #60]	; 0x3c
    hpcd->IN_ep[index].xfer_len = 0U;
 80016ca:	6410      	str	r0, [r2, #64]	; 0x40
 80016cc:	f102 0220 	add.w	r2, r2, #32
  for (index = 0U; index < 15U ; index++)
 80016d0:	d1f0      	bne.n	80016b4 <HAL_PCD_Init+0x5c>
 80016d2:	2200      	movs	r2, #0
  }
 
  for (index = 0U; index < 15U ; index++)
  {
    hpcd->OUT_ep[index].is_in = 0U;
 80016d4:	4617      	mov	r7, r2
    hpcd->OUT_ep[index].num = index;
 80016d6:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
    hpcd->IN_ep[index].tx_fifo_num = index;
 80016da:	869a      	strh	r2, [r3, #52]	; 0x34
  for (index = 0U; index < 15U ; index++)
 80016dc:	3201      	adds	r2, #1
 80016de:	2a0f      	cmp	r2, #15
    hpcd->OUT_ep[index].is_in = 0U;
 80016e0:	f883 7229 	strb.w	r7, [r3, #553]	; 0x229
    /* Control until ep is activated */
    hpcd->OUT_ep[index].type = EP_TYPE_CTRL;
 80016e4:	f883 722b 	strb.w	r7, [r3, #555]	; 0x22b
    hpcd->OUT_ep[index].maxpacket = 0U;
 80016e8:	f8c3 7238 	str.w	r7, [r3, #568]	; 0x238
    hpcd->OUT_ep[index].xfer_buff = 0U;
 80016ec:	f8c3 723c 	str.w	r7, [r3, #572]	; 0x23c
    hpcd->OUT_ep[index].xfer_len = 0U;
 80016f0:	f8c3 7240 	str.w	r7, [r3, #576]	; 0x240
 80016f4:	f103 0320 	add.w	r3, r3, #32
  for (index = 0U; index < 15U ; index++)
 80016f8:	d1ed      	bne.n	80016d6 <HAL_PCD_Init+0x7e>
  }
  
  /* Init Device */
  USB_DevInit(hpcd->Instance, hpcd->Init);
 80016fa:	466e      	mov	r6, sp
 80016fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016fe:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001700:	682b      	ldr	r3, [r5, #0]
 8001702:	6033      	str	r3, [r6, #0]
 8001704:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8001708:	6820      	ldr	r0, [r4, #0]
 800170a:	f000 fec7 	bl	800249c <USB_DevInit>
  
  hpcd->USB_Address = 0U;
  hpcd->State= HAL_PCD_STATE_READY;
 800170e:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 8001710:	f884 7024 	strb.w	r7, [r4, #36]	; 0x24
  
  USB_DevDisconnect (hpcd->Instance);  
 8001714:	6820      	ldr	r0, [r4, #0]
  hpcd->State= HAL_PCD_STATE_READY;
 8001716:	f884 3429 	strb.w	r3, [r4, #1065]	; 0x429
  USB_DevDisconnect (hpcd->Instance);  
 800171a:	f001 f997 	bl	8002a4c <USB_DevDisconnect>
  return HAL_OK;
 800171e:	2000      	movs	r0, #0
}
 8001720:	b006      	add	sp, #24
 8001722:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8001726:	2001      	movs	r0, #1
 8001728:	e7fa      	b.n	8001720 <HAL_PCD_Init+0xc8>

0800172a <HAL_PCD_Start>:
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 800172a:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
{
 800172e:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8001730:	2b01      	cmp	r3, #1
{
 8001732:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8001734:	d00e      	beq.n	8001754 <HAL_PCD_Start+0x2a>
 8001736:	2101      	movs	r1, #1
 8001738:	f880 1428 	strb.w	r1, [r0, #1064]	; 0x428
  HAL_PCDEx_SetConnectionState (hpcd, 1);
 800173c:	f002 fb31 	bl	8003da2 <HAL_PCDEx_SetConnectionState>
  USB_DevConnect (hpcd->Instance);
 8001740:	6820      	ldr	r0, [r4, #0]
 8001742:	f001 f981 	bl	8002a48 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8001746:	6820      	ldr	r0, [r4, #0]
 8001748:	f000 fe93 	bl	8002472 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 800174c:	2000      	movs	r0, #0
 800174e:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
 8001752:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8001754:	2002      	movs	r0, #2
}
 8001756:	bd10      	pop	{r4, pc}

08001758 <HAL_PCD_SetAddress>:
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 8001758:	f890 2428 	ldrb.w	r2, [r0, #1064]	; 0x428
{
 800175c:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 800175e:	2a01      	cmp	r2, #1
{
 8001760:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8001762:	d00b      	beq.n	800177c <HAL_PCD_SetAddress+0x24>
 8001764:	2201      	movs	r2, #1
 8001766:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428
  hpcd->USB_Address = address;
 800176a:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
  USB_SetDevAddress(hpcd->Instance, address);
 800176e:	6800      	ldr	r0, [r0, #0]
 8001770:	f001 f964 	bl	8002a3c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001774:	2000      	movs	r0, #0
 8001776:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
 800177a:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 800177c:	2002      	movs	r0, #2
  return HAL_OK;
}
 800177e:	bd10      	pop	{r4, pc}

08001780 <HAL_PCD_EP_Open>:
  * @param  ep_mps: endpoint max packet size
  * @param  ep_type: endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001780:	b538      	push	{r3, r4, r5, lr}
 8001782:	4604      	mov	r4, r0
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep = NULL;
  
  if ((ep_addr & 0x80U) == 0x80U)
 8001784:	b248      	sxtb	r0, r1
 8001786:	2800      	cmp	r0, #0
 8001788:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 800178c:	bfb5      	itete	lt
 800178e:	eb04 1145 	addlt.w	r1, r4, r5, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8001792:	eb04 1141 	addge.w	r1, r4, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8001796:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8001798:	f501 710a 	addge.w	r1, r1, #552	; 0x228
  }
  ep->num   = ep_addr & 0x7FU;
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 800179c:	0fc0      	lsrs	r0, r0, #31
  ep->num   = ep_addr & 0x7FU;
 800179e:	700d      	strb	r5, [r1, #0]
  ep->is_in = (0x80U & ep_addr) != 0U;
 80017a0:	7048      	strb	r0, [r1, #1]
  ep->maxpacket = ep_mps;
  ep->type = ep_type;
 80017a2:	70cb      	strb	r3, [r1, #3]
    
  __HAL_LOCK(hpcd);
 80017a4:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
  ep->maxpacket = ep_mps;
 80017a8:	610a      	str	r2, [r1, #16]
  __HAL_LOCK(hpcd);
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d009      	beq.n	80017c2 <HAL_PCD_EP_Open+0x42>
 80017ae:	2301      	movs	r3, #1
  USB_ActivateEndpoint(hpcd->Instance , ep);
 80017b0:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80017b2:	f884 3428 	strb.w	r3, [r4, #1064]	; 0x428
  USB_ActivateEndpoint(hpcd->Instance , ep);
 80017b6:	f000 fe8d 	bl	80024d4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80017ba:	2000      	movs	r0, #0
 80017bc:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return ret;
 80017c0:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 80017c2:	2002      	movs	r0, #2
}
 80017c4:	bd38      	pop	{r3, r4, r5, pc}

080017c6 <HAL_PCD_EP_Close>:
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
  PCD_EPTypeDef *ep = NULL;
  
  if ((ep_addr & 0x80U) == 0x80U)
 80017c6:	b24b      	sxtb	r3, r1
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	f001 027f 	and.w	r2, r1, #127	; 0x7f
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80017ce:	bfb5      	itete	lt
 80017d0:	eb00 1142 	addlt.w	r1, r0, r2, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 80017d4:	eb00 1141 	addge.w	r1, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80017d8:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 80017da:	f501 710a 	addge.w	r1, r1, #552	; 0x228
  }
  ep->num   = ep_addr & 0x7FU;
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 80017de:	0fdb      	lsrs	r3, r3, #31
{  
 80017e0:	b510      	push	{r4, lr}
  ep->num   = ep_addr & 0x7FU;
 80017e2:	700a      	strb	r2, [r1, #0]
  ep->is_in = (0x80U & ep_addr) != 0U;
 80017e4:	704b      	strb	r3, [r1, #1]
  
  __HAL_LOCK(hpcd);
 80017e6:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
{  
 80017ea:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d009      	beq.n	8001804 <HAL_PCD_EP_Close+0x3e>
 80017f0:	2301      	movs	r3, #1
 80017f2:	f880 3428 	strb.w	r3, [r0, #1064]	; 0x428
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 80017f6:	6800      	ldr	r0, [r0, #0]
 80017f8:	f000 ffde 	bl	80027b8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80017fc:	2000      	movs	r0, #0
 80017fe:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
 8001802:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8001804:	2002      	movs	r0, #2
}
 8001806:	bd10      	pop	{r4, pc}

08001808 <HAL_PCD_EP_Receive>:
  * @param  pBuf: pointer to the reception buffer
  * @param  len: amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001808:	b570      	push	{r4, r5, r6, lr}
  ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
  ep->xfer_len = len;
  ep->xfer_count = 0U;
 800180a:	2600      	movs	r6, #0
 800180c:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8001810:	014d      	lsls	r5, r1, #5
  ep->xfer_buff = pBuf;  
 8001812:	1944      	adds	r4, r0, r5
  ep->is_in = 0U;
  ep->num = ep_addr & 0x7FU;
 8001814:	f884 1228 	strb.w	r1, [r4, #552]	; 0x228
  ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8001818:	f505 710a 	add.w	r1, r5, #552	; 0x228
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 800181c:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;  
 800181e:	f8c4 223c 	str.w	r2, [r4, #572]	; 0x23c
  ep->xfer_len = len;
 8001822:	f8c4 3240 	str.w	r3, [r4, #576]	; 0x240
  ep->xfer_count = 0U;
 8001826:	f8c4 6244 	str.w	r6, [r4, #580]	; 0x244
  ep->is_in = 0U;
 800182a:	f884 6229 	strb.w	r6, [r4, #553]	; 0x229
    USB_EPStartXfer(hpcd->Instance , ep);
 800182e:	6800      	ldr	r0, [r0, #0]
 8001830:	f001 f926 	bl	8002a80 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 8001834:	4630      	mov	r0, r6
 8001836:	bd70      	pop	{r4, r5, r6, pc}

08001838 <HAL_PCD_EP_Transmit>:
  * @param  pBuf: pointer to the transmission buffer
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001838:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800183c:	b570      	push	{r4, r5, r6, lr}
 800183e:	014d      	lsls	r5, r1, #5
  PCD_EPTypeDef *ep = NULL;
  
  ep = &hpcd->IN_ep[ep_addr & 0x7FU];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8001840:	1944      	adds	r4, r0, r5
  ep->xfer_len = len;
 8001842:	6423      	str	r3, [r4, #64]	; 0x40
  ep->xfer_count = 0U;
 8001844:	2600      	movs	r6, #0
  ep->is_in = 1U;
 8001846:	2301      	movs	r3, #1
  ep->num = ep_addr & 0x7FU;
 8001848:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
  ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 800184c:	f105 0128 	add.w	r1, r5, #40	; 0x28
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 8001850:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;  
 8001852:	63e2      	str	r2, [r4, #60]	; 0x3c
  ep->xfer_count = 0U;
 8001854:	6466      	str	r6, [r4, #68]	; 0x44
  ep->is_in = 1U;
 8001856:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    USB_EPStartXfer(hpcd->Instance , ep);
 800185a:	6800      	ldr	r0, [r0, #0]
 800185c:	f001 f910 	bl	8002a80 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 8001860:	4630      	mov	r0, r6
 8001862:	bd70      	pop	{r4, r5, r6, pc}

08001864 <HAL_PCD_IRQHandler>:
{ 
 8001864:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8001868:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 800186a:	6800      	ldr	r0, [r0, #0]
 800186c:	f001 f8f0 	bl	8002a50 <USB_ReadInterrupts>
 8001870:	0400      	lsls	r0, r0, #16
 8001872:	f100 8098 	bmi.w	80019a6 <HAL_PCD_IRQHandler+0x142>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
 8001876:	6820      	ldr	r0, [r4, #0]
 8001878:	f001 f8ea 	bl	8002a50 <USB_ReadInterrupts>
 800187c:	0541      	lsls	r1, r0, #21
 800187e:	d50f      	bpl.n	80018a0 <HAL_PCD_IRQHandler+0x3c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001880:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 8001882:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001884:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001888:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800188c:	041b      	lsls	r3, r3, #16
 800188e:	0c1b      	lsrs	r3, r3, #16
 8001890:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8001894:	f002 f9a5 	bl	8003be2 <HAL_PCD_ResetCallback>
    HAL_PCD_SetAddress(hpcd, 0U);
 8001898:	2100      	movs	r1, #0
 800189a:	4620      	mov	r0, r4
 800189c:	f7ff ff5c 	bl	8001758 <HAL_PCD_SetAddress>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVR))
 80018a0:	6820      	ldr	r0, [r4, #0]
 80018a2:	f001 f8d5 	bl	8002a50 <USB_ReadInterrupts>
 80018a6:	0447      	lsls	r7, r0, #17
 80018a8:	d508      	bpl.n	80018bc <HAL_PCD_IRQHandler+0x58>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);    
 80018aa:	6822      	ldr	r2, [r4, #0]
 80018ac:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80018b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80018b4:	041b      	lsls	r3, r3, #16
 80018b6:	0c1b      	lsrs	r3, r3, #16
 80018b8:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 80018bc:	6820      	ldr	r0, [r4, #0]
 80018be:	f001 f8c7 	bl	8002a50 <USB_ReadInterrupts>
 80018c2:	0486      	lsls	r6, r0, #18
 80018c4:	d508      	bpl.n	80018d8 <HAL_PCD_IRQHandler+0x74>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 80018c6:	6822      	ldr	r2, [r4, #0]
 80018c8:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80018cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80018d0:	041b      	lsls	r3, r3, #16
 80018d2:	0c1b      	lsrs	r3, r3, #16
 80018d4:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
 80018d8:	6820      	ldr	r0, [r4, #0]
 80018da:	f001 f8b9 	bl	8002a50 <USB_ReadInterrupts>
 80018de:	04c5      	lsls	r5, r0, #19
 80018e0:	d51c      	bpl.n	800191c <HAL_PCD_IRQHandler+0xb8>
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 80018e2:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 80018e4:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 80018e6:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80018ea:	f023 0304 	bic.w	r3, r3, #4
 80018ee:	041b      	lsls	r3, r3, #16
 80018f0:	0c1b      	lsrs	r3, r3, #16
 80018f2:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_FSUSP);
 80018f6:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 80018fa:	f023 0308 	bic.w	r3, r3, #8
 80018fe:	041b      	lsls	r3, r3, #16
 8001900:	0c1b      	lsrs	r3, r3, #16
 8001902:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8001906:	f002 f989 	bl	8003c1c <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
 800190a:	6822      	ldr	r2, [r4, #0]
 800190c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001910:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001914:	041b      	lsls	r3, r3, #16
 8001916:	0c1b      	lsrs	r3, r3, #16
 8001918:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
 800191c:	6820      	ldr	r0, [r4, #0]
 800191e:	f001 f897 	bl	8002a50 <USB_ReadInterrupts>
 8001922:	0500      	lsls	r0, r0, #20
 8001924:	d51d      	bpl.n	8001962 <HAL_PCD_IRQHandler+0xfe>
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8001926:	6820      	ldr	r0, [r4, #0]
 8001928:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 800192c:	b29b      	uxth	r3, r3
 800192e:	f043 0308 	orr.w	r3, r3, #8
 8001932:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);  
 8001936:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 800193a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800193e:	041b      	lsls	r3, r3, #16
 8001940:	0c1b      	lsrs	r3, r3, #16
 8001942:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8001946:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 800194a:	b29b      	uxth	r3, r3
 800194c:	f043 0304 	orr.w	r3, r3, #4
 8001950:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0U)
 8001954:	f001 f87c 	bl	8002a50 <USB_ReadInterrupts>
 8001958:	04c1      	lsls	r1, r0, #19
 800195a:	d402      	bmi.n	8001962 <HAL_PCD_IRQHandler+0xfe>
      HAL_PCD_SuspendCallback(hpcd);
 800195c:	4620      	mov	r0, r4
 800195e:	f002 f94d 	bl	8003bfc <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
 8001962:	6820      	ldr	r0, [r4, #0]
 8001964:	f001 f874 	bl	8002a50 <USB_ReadInterrupts>
 8001968:	0582      	lsls	r2, r0, #22
 800196a:	d50b      	bpl.n	8001984 <HAL_PCD_IRQHandler+0x120>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 800196c:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 800196e:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 8001970:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001974:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001978:	041b      	lsls	r3, r3, #16
 800197a:	0c1b      	lsrs	r3, r3, #16
 800197c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8001980:	f002 f92b 	bl	8003bda <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ESOF))
 8001984:	6820      	ldr	r0, [r4, #0]
 8001986:	f001 f863 	bl	8002a50 <USB_ReadInterrupts>
 800198a:	05c3      	lsls	r3, r0, #23
 800198c:	d508      	bpl.n	80019a0 <HAL_PCD_IRQHandler+0x13c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF); 
 800198e:	6822      	ldr	r2, [r4, #0]
 8001990:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8001994:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001998:	041b      	lsls	r3, r3, #16
 800199a:	0c1b      	lsrs	r3, r3, #16
 800199c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 80019a0:	b002      	add	sp, #8
 80019a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
  PCD_EPTypeDef *ep = NULL;
  uint16_t count = 0;
  uint8_t epindex = 0;
  __IO uint16_t wIstr = 0;  
 80019a6:	2300      	movs	r3, #0
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80019a8:	4fc8      	ldr	r7, [pc, #800]	; (8001ccc <HAL_PCD_IRQHandler+0x468>)
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80019aa:	f8df 8324 	ldr.w	r8, [pc, #804]	; 8001cd0 <HAL_PCD_IRQHandler+0x46c>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80019ae:	f8df 9324 	ldr.w	r9, [pc, #804]	; 8001cd4 <HAL_PCD_IRQHandler+0x470>
  __IO uint16_t wIstr = 0;  
 80019b2:	f8ad 3004 	strh.w	r3, [sp, #4]
  __IO uint16_t wEPVal = 0;
 80019b6:	f8ad 3006 	strh.w	r3, [sp, #6]
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 80019ba:	6820      	ldr	r0, [r4, #0]
 80019bc:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 80019c0:	b29b      	uxth	r3, r3
 80019c2:	f8ad 3004 	strh.w	r3, [sp, #4]
 80019c6:	041b      	lsls	r3, r3, #16
 80019c8:	f57f af55 	bpl.w	8001876 <HAL_PCD_IRQHandler+0x12>
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80019cc:	f8bd 5004 	ldrh.w	r5, [sp, #4]
    if (epindex == 0)
 80019d0:	f015 050f 	ands.w	r5, r5, #15
 80019d4:	f040 80ab 	bne.w	8001b2e <HAL_PCD_IRQHandler+0x2ca>
      if ((wIstr & USB_ISTR_DIR) == 0)
 80019d8:	f8bd 1004 	ldrh.w	r1, [sp, #4]
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80019dc:	8803      	ldrh	r3, [r0, #0]
      if ((wIstr & USB_ISTR_DIR) == 0)
 80019de:	f011 0110 	ands.w	r1, r1, #16
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80019e2:	b29b      	uxth	r3, r3
      if ((wIstr & USB_ISTR_DIR) == 0)
 80019e4:	d126      	bne.n	8001a34 <HAL_PCD_IRQHandler+0x1d0>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80019e6:	403b      	ands	r3, r7
 80019e8:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80019ea:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80019ee:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 80019f2:	b29b      	uxth	r3, r3
 80019f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80019f8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80019fc:	f8d0 3404 	ldr.w	r3, [r0, #1028]	; 0x404
        ep->xfer_buff += ep->xfer_count;
 8001a00:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001a02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a06:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8001a08:	4413      	add	r3, r2
 8001a0a:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001a0c:	4620      	mov	r0, r4
 8001a0e:	f002 f8dd 	bl	8003bcc <HAL_PCD_DataInStageCallback>
        if((hpcd->USB_Address > 0U)&& ( ep->xfer_len == 0U))
 8001a12:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d0cf      	beq.n	80019ba <HAL_PCD_IRQHandler+0x156>
 8001a1a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001a1c:	2a00      	cmp	r2, #0
 8001a1e:	d1cc      	bne.n	80019ba <HAL_PCD_IRQHandler+0x156>
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 8001a20:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001a24:	6821      	ldr	r1, [r4, #0]
 8001a26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a2a:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001a2e:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 8001a32:	e7c2      	b.n	80019ba <HAL_PCD_IRQHandler+0x156>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001a34:	f8ad 3006 	strh.w	r3, [sp, #6]
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001a38:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001a3c:	051a      	lsls	r2, r3, #20
 8001a3e:	d51f      	bpl.n	8001a80 <HAL_PCD_IRQHandler+0x21c>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001a40:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001a44:	f894 2228 	ldrb.w	r2, [r4, #552]	; 0x228
 8001a48:	b29b      	uxth	r3, r3
 8001a4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001a4e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001a52:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 8001a56:	f8b4 222c 	ldrh.w	r2, [r4, #556]	; 0x22c
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001a5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a5e:	f8c4 3244 	str.w	r3, [r4, #580]	; 0x244
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 8001a62:	f204 412c 	addw	r1, r4, #1068	; 0x42c
 8001a66:	f001 f90b 	bl	8002c80 <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 8001a6a:	6822      	ldr	r2, [r4, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8001a6c:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 8001a6e:	8813      	ldrh	r3, [r2, #0]
 8001a70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a74:	051b      	lsls	r3, r3, #20
 8001a76:	0d1b      	lsrs	r3, r3, #20
 8001a78:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8001a7a:	f002 f899 	bl	8003bb0 <HAL_PCD_SetupStageCallback>
 8001a7e:	e79c      	b.n	80019ba <HAL_PCD_IRQHandler+0x156>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001a80:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001a84:	041b      	lsls	r3, r3, #16
 8001a86:	d598      	bpl.n	80019ba <HAL_PCD_IRQHandler+0x156>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001a88:	8803      	ldrh	r3, [r0, #0]
 8001a8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a8e:	051b      	lsls	r3, r3, #20
 8001a90:	0d1b      	lsrs	r3, r3, #20
 8001a92:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001a94:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001a98:	f894 2228 	ldrb.w	r2, [r4, #552]	; 0x228
 8001a9c:	b29b      	uxth	r3, r3
 8001a9e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001aa2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001aa6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001aaa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001aae:	f8c4 3244 	str.w	r3, [r4, #580]	; 0x244
          if (ep->xfer_count != 0U)
 8001ab2:	b163      	cbz	r3, 8001ace <HAL_PCD_IRQHandler+0x26a>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8001ab4:	f8b4 222c 	ldrh.w	r2, [r4, #556]	; 0x22c
 8001ab8:	f8d4 123c 	ldr.w	r1, [r4, #572]	; 0x23c
 8001abc:	f001 f8e0 	bl	8002c80 <USB_ReadPMA>
            ep->xfer_buff+=ep->xfer_count;
 8001ac0:	f8d4 323c 	ldr.w	r3, [r4, #572]	; 0x23c
 8001ac4:	f8d4 2244 	ldr.w	r2, [r4, #580]	; 0x244
 8001ac8:	4413      	add	r3, r2
 8001aca:	f8c4 323c 	str.w	r3, [r4, #572]	; 0x23c
           HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001ace:	2100      	movs	r1, #0
 8001ad0:	4620      	mov	r0, r4
 8001ad2:	f002 f873 	bl	8003bbc <HAL_PCD_DataOutStageCallback>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001ad6:	6822      	ldr	r2, [r4, #0]
 8001ad8:	f8d4 5238 	ldr.w	r5, [r4, #568]	; 0x238
 8001adc:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 8001ae0:	2d3e      	cmp	r5, #62	; 0x3e
 8001ae2:	b289      	uxth	r1, r1
 8001ae4:	f101 0106 	add.w	r1, r1, #6
 8001ae8:	f502 6080 	add.w	r0, r2, #1024	; 0x400
 8001aec:	d917      	bls.n	8001b1e <HAL_PCD_IRQHandler+0x2ba>
 8001aee:	f3c5 134f 	ubfx	r3, r5, #5, #16
 8001af2:	06ee      	lsls	r6, r5, #27
 8001af4:	bf04      	itt	eq
 8001af6:	f103 33ff 	addeq.w	r3, r3, #4294967295
 8001afa:	b29b      	uxtheq	r3, r3
 8001afc:	ea49 2383 	orr.w	r3, r9, r3, lsl #10
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	f840 3011 	str.w	r3, [r0, r1, lsl #1]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001b06:	8813      	ldrh	r3, [r2, #0]
 8001b08:	b29b      	uxth	r3, r3
 8001b0a:	ea03 0308 	and.w	r3, r3, r8
 8001b0e:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001b12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b1a:	8013      	strh	r3, [r2, #0]
 8001b1c:	e74d      	b.n	80019ba <HAL_PCD_IRQHandler+0x156>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001b1e:	f3c5 034f 	ubfx	r3, r5, #1, #16
 8001b22:	07ed      	lsls	r5, r5, #31
 8001b24:	bf44      	itt	mi
 8001b26:	3301      	addmi	r3, #1
 8001b28:	b29b      	uxthmi	r3, r3
 8001b2a:	029b      	lsls	r3, r3, #10
 8001b2c:	e7e8      	b.n	8001b00 <HAL_PCD_IRQHandler+0x29c>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001b2e:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 8001b32:	b29b      	uxth	r3, r3
 8001b34:	f8ad 3006 	strh.w	r3, [sp, #6]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001b38:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001b3c:	0419      	lsls	r1, r3, #16
 8001b3e:	d53f      	bpl.n	8001bc0 <HAL_PCD_IRQHandler+0x35c>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001b40:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8001b44:	ea4f 1a45 	mov.w	sl, r5, lsl #5
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001b48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b4c:	051b      	lsls	r3, r3, #20
 8001b4e:	0d1b      	lsrs	r3, r3, #20
 8001b50:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8001b54:	eb04 010a 	add.w	r1, r4, sl
 8001b58:	f891 3232 	ldrb.w	r3, [r1, #562]	; 0x232
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d174      	bne.n	8001c4a <HAL_PCD_IRQHandler+0x3e6>
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001b60:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001b64:	f891 2228 	ldrb.w	r2, [r1, #552]	; 0x228
 8001b68:	b29b      	uxth	r3, r3
 8001b6a:	3306      	adds	r3, #6
 8001b6c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001b70:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001b74:	f8d3 6400 	ldr.w	r6, [r3, #1024]	; 0x400
 8001b78:	f3c6 0609 	ubfx	r6, r6, #0, #10
          if (count != 0U)
 8001b7c:	b136      	cbz	r6, 8001b8c <HAL_PCD_IRQHandler+0x328>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001b7e:	f8b1 222c 	ldrh.w	r2, [r1, #556]	; 0x22c
 8001b82:	4633      	mov	r3, r6
 8001b84:	f8d1 123c 	ldr.w	r1, [r1, #572]	; 0x23c
 8001b88:	f001 f87a 	bl	8002c80 <USB_ReadPMA>
 8001b8c:	eb04 010a 	add.w	r1, r4, sl
        ep->xfer_count+=count;
 8001b90:	f8d1 3244 	ldr.w	r3, [r1, #580]	; 0x244
        ep->xfer_buff+=count;
 8001b94:	f8d1 223c 	ldr.w	r2, [r1, #572]	; 0x23c
        ep->xfer_count+=count;
 8001b98:	4433      	add	r3, r6
 8001b9a:	f8c1 3244 	str.w	r3, [r1, #580]	; 0x244
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001b9e:	f8d1 3240 	ldr.w	r3, [r1, #576]	; 0x240
        ep->xfer_buff+=count;
 8001ba2:	4432      	add	r2, r6
 8001ba4:	f8c1 223c 	str.w	r2, [r1, #572]	; 0x23c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001ba8:	b123      	cbz	r3, 8001bb4 <HAL_PCD_IRQHandler+0x350>
 8001baa:	f8d1 0238 	ldr.w	r0, [r1, #568]	; 0x238
 8001bae:	4286      	cmp	r6, r0
 8001bb0:	f080 8086 	bcs.w	8001cc0 <HAL_PCD_IRQHandler+0x45c>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001bb4:	44a2      	add	sl, r4
 8001bb6:	f89a 1228 	ldrb.w	r1, [sl, #552]	; 0x228
 8001bba:	4620      	mov	r0, r4
 8001bbc:	f001 fffe 	bl	8003bbc <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001bc0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001bc4:	061a      	lsls	r2, r3, #24
 8001bc6:	f57f aef8 	bpl.w	80019ba <HAL_PCD_IRQHandler+0x156>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001bca:	6820      	ldr	r0, [r4, #0]
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0U)
 8001bcc:	016e      	lsls	r6, r5, #5
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001bce:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8001bd2:	19a1      	adds	r1, r4, r6
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001bd4:	b29b      	uxth	r3, r3
 8001bd6:	403b      	ands	r3, r7
 8001bd8:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8001bdc:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 8001be0:	3502      	adds	r5, #2
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d178      	bne.n	8001cd8 <HAL_PCD_IRQHandler+0x474>
        {
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001be6:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001bea:	f891 2028 	ldrb.w	r2, [r1, #40]	; 0x28
 8001bee:	b29b      	uxth	r3, r3
 8001bf0:	3302      	adds	r3, #2
 8001bf2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001bf6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001bfa:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8001bfe:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 8001c02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001c06:	606b      	str	r3, [r5, #4]
          if (ep->xfer_count != 0U)
 8001c08:	b11b      	cbz	r3, 8001c12 <HAL_PCD_IRQHandler+0x3ae>
          {
            USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8001c0a:	8d8a      	ldrh	r2, [r1, #44]	; 0x2c
 8001c0c:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8001c0e:	f000 ff25 	bl	8002a5c <USB_WritePMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001c12:	6822      	ldr	r2, [r4, #0]
 8001c14:	4426      	add	r6, r4
 8001c16:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8001c1a:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 8001c1e:	b29b      	uxth	r3, r3
 8001c20:	3302      	adds	r3, #2
 8001c22:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8001c26:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8001c2a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        ep->xfer_buff+=ep->xfer_count;
 8001c2e:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001c30:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001c34:	6472      	str	r2, [r6, #68]	; 0x44
        ep->xfer_buff+=ep->xfer_count;
 8001c36:	441a      	add	r2, r3
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8001c38:	6c33      	ldr	r3, [r6, #64]	; 0x40
        ep->xfer_buff+=ep->xfer_count;
 8001c3a:	63f2      	str	r2, [r6, #60]	; 0x3c
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001c3c:	4620      	mov	r0, r4
        if (ep->xfer_len == 0U)
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	f040 8085 	bne.w	8001d4e <HAL_PCD_IRQHandler+0x4ea>
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001c44:	f001 ffc2 	bl	8003bcc <HAL_PCD_DataInStageCallback>
 8001c48:	e6b7      	b.n	80019ba <HAL_PCD_IRQHandler+0x156>
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 8001c4a:	f891 3228 	ldrb.w	r3, [r1, #552]	; 0x228
 8001c4e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001c52:	00db      	lsls	r3, r3, #3
 8001c54:	f412 4f80 	tst.w	r2, #16384	; 0x4000
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001c58:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001c5c:	b292      	uxth	r2, r2
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 8001c5e:	d021      	beq.n	8001ca4 <HAL_PCD_IRQHandler+0x440>
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001c60:	3202      	adds	r2, #2
 8001c62:	4413      	add	r3, r2
 8001c64:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001c68:	f8d3 6400 	ldr.w	r6, [r3, #1024]	; 0x400
 8001c6c:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0U)
 8001c70:	b136      	cbz	r6, 8001c80 <HAL_PCD_IRQHandler+0x41c>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001c72:	4633      	mov	r3, r6
 8001c74:	f8b1 222e 	ldrh.w	r2, [r1, #558]	; 0x22e
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001c78:	f8d1 123c 	ldr.w	r1, [r1, #572]	; 0x23c
 8001c7c:	f001 f800 	bl	8002c80 <USB_ReadPMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
 8001c80:	eb04 030a 	add.w	r3, r4, sl
 8001c84:	f893 1228 	ldrb.w	r1, [r3, #552]	; 0x228
 8001c88:	6822      	ldr	r2, [r4, #0]
 8001c8a:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8001c8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c92:	051b      	lsls	r3, r3, #20
 8001c94:	0d1b      	lsrs	r3, r3, #20
 8001c96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c9a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001c9e:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8001ca2:	e773      	b.n	8001b8c <HAL_PCD_IRQHandler+0x328>
            count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001ca4:	3206      	adds	r2, #6
 8001ca6:	4413      	add	r3, r2
 8001ca8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001cac:	f8d3 6400 	ldr.w	r6, [r3, #1024]	; 0x400
 8001cb0:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0U)
 8001cb4:	2e00      	cmp	r6, #0
 8001cb6:	d0e3      	beq.n	8001c80 <HAL_PCD_IRQHandler+0x41c>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001cb8:	4633      	mov	r3, r6
 8001cba:	f8b1 2230 	ldrh.w	r2, [r1, #560]	; 0x230
 8001cbe:	e7db      	b.n	8001c78 <HAL_PCD_IRQHandler+0x414>
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001cc0:	f891 1228 	ldrb.w	r1, [r1, #552]	; 0x228
 8001cc4:	4620      	mov	r0, r4
 8001cc6:	f7ff fd9f 	bl	8001808 <HAL_PCD_EP_Receive>
 8001cca:	e779      	b.n	8001bc0 <HAL_PCD_IRQHandler+0x35c>
 8001ccc:	ffff8f0f 	.word	0xffff8f0f
 8001cd0:	ffffbf8f 	.word	0xffffbf8f
 8001cd4:	ffff8000 	.word	0xffff8000
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 8001cd8:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8001cdc:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001ce0:	00db      	lsls	r3, r3, #3
 8001ce2:	f012 0f40 	tst.w	r2, #64	; 0x40
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001ce6:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001cea:	b292      	uxth	r2, r2
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 8001cec:	d020      	beq.n	8001d30 <HAL_PCD_IRQHandler+0x4cc>
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001cee:	3202      	adds	r2, #2
 8001cf0:	4413      	add	r3, r2
 8001cf2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001cf6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8001cfa:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 8001cfe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d02:	606b      	str	r3, [r5, #4]
            if (ep->xfer_count != 0U)
 8001d04:	b11b      	cbz	r3, 8001d0e <HAL_PCD_IRQHandler+0x4aa>
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 8001d06:	8dca      	ldrh	r2, [r1, #46]	; 0x2e
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 8001d08:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8001d0a:	f000 fea7 	bl	8002a5c <USB_WritePMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
 8001d0e:	19a3      	adds	r3, r4, r6
 8001d10:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 8001d14:	6822      	ldr	r2, [r4, #0]
 8001d16:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8001d1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d1e:	051b      	lsls	r3, r3, #20
 8001d20:	0d1b      	lsrs	r3, r3, #20
 8001d22:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001d26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d2a:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8001d2e:	e770      	b.n	8001c12 <HAL_PCD_IRQHandler+0x3ae>
            ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001d30:	3206      	adds	r2, #6
 8001d32:	4413      	add	r3, r2
 8001d34:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001d38:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8001d3c:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 8001d40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001d44:	606b      	str	r3, [r5, #4]
            if (ep->xfer_count != 0U)
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d0e1      	beq.n	8001d0e <HAL_PCD_IRQHandler+0x4aa>
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 8001d4a:	8e0a      	ldrh	r2, [r1, #48]	; 0x30
 8001d4c:	e7dc      	b.n	8001d08 <HAL_PCD_IRQHandler+0x4a4>
        }
        else
        {
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8001d4e:	f7ff fd73 	bl	8001838 <HAL_PCD_EP_Transmit>
 8001d52:	e632      	b.n	80019ba <HAL_PCD_IRQHandler+0x156>

08001d54 <HAL_PCD_EP_SetStall>:
  ep->is_stall = 1U;
 8001d54:	2201      	movs	r2, #1
{
 8001d56:	b538      	push	{r3, r4, r5, lr}
  if ((0x80U & ep_addr) == 0x80U)
 8001d58:	b24b      	sxtb	r3, r1
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	f001 057f 	and.w	r5, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8001d60:	bfb5      	itete	lt
 8001d62:	eb00 1145 	addlt.w	r1, r0, r5, lsl #5
    ep = &hpcd->OUT_ep[ep_addr];
 8001d66:	eb00 1141 	addge.w	r1, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8001d6a:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 8001d6c:	f501 710a 	addge.w	r1, r1, #552	; 0x228
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8001d70:	0fdb      	lsrs	r3, r3, #31
  ep->num   = ep_addr & 0x7FU;
 8001d72:	b2ed      	uxtb	r5, r5
  ep->is_stall = 1U;
 8001d74:	708a      	strb	r2, [r1, #2]
  ep->num   = ep_addr & 0x7FU;
 8001d76:	700d      	strb	r5, [r1, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8001d78:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd);
 8001d7a:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
{
 8001d7e:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d00e      	beq.n	8001da2 <HAL_PCD_EP_SetStall+0x4e>
 8001d84:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428
  USB_EPSetStall(hpcd->Instance , ep);
 8001d88:	6800      	ldr	r0, [r0, #0]
 8001d8a:	f000 fde3 	bl	8002954 <USB_EPSetStall>
  if((ep_addr & 0x7FU) == 0U)
 8001d8e:	b925      	cbnz	r5, 8001d9a <HAL_PCD_EP_SetStall+0x46>
    USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001d90:	f204 412c 	addw	r1, r4, #1068	; 0x42c
 8001d94:	6820      	ldr	r0, [r4, #0]
 8001d96:	f000 fe5f 	bl	8002a58 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd); 
 8001d9a:	2000      	movs	r0, #0
 8001d9c:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
 8001da0:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8001da2:	2002      	movs	r0, #2
}
 8001da4:	bd38      	pop	{r3, r4, r5, pc}

08001da6 <HAL_PCD_EP_ClrStall>:
{
 8001da6:	b538      	push	{r3, r4, r5, lr}
  ep->is_stall = 0U;
 8001da8:	2400      	movs	r4, #0
  if ((0x80U & ep_addr) == 0x80U)
 8001daa:	b24b      	sxtb	r3, r1
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	f001 027f 	and.w	r2, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8001db2:	bfb5      	itete	lt
 8001db4:	eb00 1142 	addlt.w	r1, r0, r2, lsl #5
    ep = &hpcd->OUT_ep[ep_addr];
 8001db8:	eb00 1141 	addge.w	r1, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8001dbc:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 8001dbe:	f501 710a 	addge.w	r1, r1, #552	; 0x228
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8001dc2:	0fdb      	lsrs	r3, r3, #31
  ep->is_stall = 0U;
 8001dc4:	708c      	strb	r4, [r1, #2]
  ep->num   = ep_addr & 0x7FU;
 8001dc6:	700a      	strb	r2, [r1, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8001dc8:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd); 
 8001dca:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
{
 8001dce:	4605      	mov	r5, r0
  __HAL_LOCK(hpcd); 
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d009      	beq.n	8001de8 <HAL_PCD_EP_ClrStall+0x42>
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	f880 3428 	strb.w	r3, [r0, #1064]	; 0x428
  USB_EPClearStall(hpcd->Instance , ep);
 8001dda:	6800      	ldr	r0, [r0, #0]
 8001ddc:	f000 fdec 	bl	80029b8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 8001de0:	f885 4428 	strb.w	r4, [r5, #1064]	; 0x428
  return HAL_OK;
 8001de4:	4620      	mov	r0, r4
 8001de6:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd); 
 8001de8:	2002      	movs	r0, #2
}
 8001dea:	bd38      	pop	{r3, r4, r5, pc}

08001dec <HAL_PCDEx_PMAConfig>:

{
  PCD_EPTypeDef *ep = NULL;
  
  /* initialize ep structure*/
  if ((ep_addr & 0x80U) == 0x80U)
 8001dec:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8001df0:	bf1b      	ittet	ne
 8001df2:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 8001df6:	eb00 1041 	addne.w	r0, r0, r1, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001dfa:	eb00 1041 	addeq.w	r0, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8001dfe:	3028      	addne	r0, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 8001e00:	bf08      	it	eq
 8001e02:	f500 700a 	addeq.w	r0, r0, #552	; 0x228
  }
  
  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8001e06:	b91a      	cbnz	r2, 8001e10 <HAL_PCDEx_PMAConfig+0x24>
  {
    /*Single Buffer*/
    ep->doublebuffer = 0U;
 8001e08:	7282      	strb	r2, [r0, #10]
    /*Configure te PMA*/
    ep->pmaadress = (uint16_t)pmaadress;
 8001e0a:	8083      	strh	r3, [r0, #4]
    ep->pmaaddr0 =  pmaadress & 0x0000FFFFU;
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
  }
  
  return HAL_OK; 
}
 8001e0c:	2000      	movs	r0, #0
 8001e0e:	4770      	bx	lr
    ep->doublebuffer = 1U;
 8001e10:	2201      	movs	r2, #1
    ep->pmaaddr0 =  pmaadress & 0x0000FFFFU;
 8001e12:	80c3      	strh	r3, [r0, #6]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
 8001e14:	0c1b      	lsrs	r3, r3, #16
    ep->doublebuffer = 1U;
 8001e16:	7282      	strb	r2, [r0, #10]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
 8001e18:	8103      	strh	r3, [r0, #8]
 8001e1a:	e7f7      	b.n	8001e0c <HAL_PCDEx_PMAConfig+0x20>

08001e1c <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e1c:	6803      	ldr	r3, [r0, #0]
{
 8001e1e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e22:	07db      	lsls	r3, r3, #31
{
 8001e24:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e26:	d410      	bmi.n	8001e4a <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e28:	682b      	ldr	r3, [r5, #0]
 8001e2a:	079f      	lsls	r7, r3, #30
 8001e2c:	d45e      	bmi.n	8001eec <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e2e:	682b      	ldr	r3, [r5, #0]
 8001e30:	0719      	lsls	r1, r3, #28
 8001e32:	f100 8095 	bmi.w	8001f60 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e36:	682b      	ldr	r3, [r5, #0]
 8001e38:	075a      	lsls	r2, r3, #29
 8001e3a:	f100 80bf 	bmi.w	8001fbc <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e3e:	69ea      	ldr	r2, [r5, #28]
 8001e40:	2a00      	cmp	r2, #0
 8001e42:	f040 812d 	bne.w	80020a0 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8001e46:	2000      	movs	r0, #0
 8001e48:	e014      	b.n	8001e74 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001e4a:	4c90      	ldr	r4, [pc, #576]	; (800208c <HAL_RCC_OscConfig+0x270>)
 8001e4c:	6863      	ldr	r3, [r4, #4]
 8001e4e:	f003 030c 	and.w	r3, r3, #12
 8001e52:	2b04      	cmp	r3, #4
 8001e54:	d007      	beq.n	8001e66 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e56:	6863      	ldr	r3, [r4, #4]
 8001e58:	f003 030c 	and.w	r3, r3, #12
 8001e5c:	2b08      	cmp	r3, #8
 8001e5e:	d10c      	bne.n	8001e7a <HAL_RCC_OscConfig+0x5e>
 8001e60:	6863      	ldr	r3, [r4, #4]
 8001e62:	03de      	lsls	r6, r3, #15
 8001e64:	d509      	bpl.n	8001e7a <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e66:	6823      	ldr	r3, [r4, #0]
 8001e68:	039c      	lsls	r4, r3, #14
 8001e6a:	d5dd      	bpl.n	8001e28 <HAL_RCC_OscConfig+0xc>
 8001e6c:	686b      	ldr	r3, [r5, #4]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d1da      	bne.n	8001e28 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8001e72:	2001      	movs	r0, #1
}
 8001e74:	b002      	add	sp, #8
 8001e76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e7a:	686b      	ldr	r3, [r5, #4]
 8001e7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e80:	d110      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x88>
 8001e82:	6823      	ldr	r3, [r4, #0]
 8001e84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e88:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001e8a:	f7fe f98d 	bl	80001a8 <HAL_GetTick>
 8001e8e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e90:	6823      	ldr	r3, [r4, #0]
 8001e92:	0398      	lsls	r0, r3, #14
 8001e94:	d4c8      	bmi.n	8001e28 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e96:	f7fe f987 	bl	80001a8 <HAL_GetTick>
 8001e9a:	1b80      	subs	r0, r0, r6
 8001e9c:	2864      	cmp	r0, #100	; 0x64
 8001e9e:	d9f7      	bls.n	8001e90 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8001ea0:	2003      	movs	r0, #3
 8001ea2:	e7e7      	b.n	8001e74 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ea4:	b99b      	cbnz	r3, 8001ece <HAL_RCC_OscConfig+0xb2>
 8001ea6:	6823      	ldr	r3, [r4, #0]
 8001ea8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eac:	6023      	str	r3, [r4, #0]
 8001eae:	6823      	ldr	r3, [r4, #0]
 8001eb0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eb4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001eb6:	f7fe f977 	bl	80001a8 <HAL_GetTick>
 8001eba:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ebc:	6823      	ldr	r3, [r4, #0]
 8001ebe:	0399      	lsls	r1, r3, #14
 8001ec0:	d5b2      	bpl.n	8001e28 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ec2:	f7fe f971 	bl	80001a8 <HAL_GetTick>
 8001ec6:	1b80      	subs	r0, r0, r6
 8001ec8:	2864      	cmp	r0, #100	; 0x64
 8001eca:	d9f7      	bls.n	8001ebc <HAL_RCC_OscConfig+0xa0>
 8001ecc:	e7e8      	b.n	8001ea0 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ece:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ed2:	6823      	ldr	r3, [r4, #0]
 8001ed4:	d103      	bne.n	8001ede <HAL_RCC_OscConfig+0xc2>
 8001ed6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001eda:	6023      	str	r3, [r4, #0]
 8001edc:	e7d1      	b.n	8001e82 <HAL_RCC_OscConfig+0x66>
 8001ede:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ee2:	6023      	str	r3, [r4, #0]
 8001ee4:	6823      	ldr	r3, [r4, #0]
 8001ee6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eea:	e7cd      	b.n	8001e88 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001eec:	4c67      	ldr	r4, [pc, #412]	; (800208c <HAL_RCC_OscConfig+0x270>)
 8001eee:	6863      	ldr	r3, [r4, #4]
 8001ef0:	f013 0f0c 	tst.w	r3, #12
 8001ef4:	d007      	beq.n	8001f06 <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ef6:	6863      	ldr	r3, [r4, #4]
 8001ef8:	f003 030c 	and.w	r3, r3, #12
 8001efc:	2b08      	cmp	r3, #8
 8001efe:	d110      	bne.n	8001f22 <HAL_RCC_OscConfig+0x106>
 8001f00:	6863      	ldr	r3, [r4, #4]
 8001f02:	03da      	lsls	r2, r3, #15
 8001f04:	d40d      	bmi.n	8001f22 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f06:	6823      	ldr	r3, [r4, #0]
 8001f08:	079b      	lsls	r3, r3, #30
 8001f0a:	d502      	bpl.n	8001f12 <HAL_RCC_OscConfig+0xf6>
 8001f0c:	692b      	ldr	r3, [r5, #16]
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d1af      	bne.n	8001e72 <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f12:	6823      	ldr	r3, [r4, #0]
 8001f14:	696a      	ldr	r2, [r5, #20]
 8001f16:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001f1a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001f1e:	6023      	str	r3, [r4, #0]
 8001f20:	e785      	b.n	8001e2e <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f22:	692a      	ldr	r2, [r5, #16]
 8001f24:	4b5a      	ldr	r3, [pc, #360]	; (8002090 <HAL_RCC_OscConfig+0x274>)
 8001f26:	b16a      	cbz	r2, 8001f44 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8001f28:	2201      	movs	r2, #1
 8001f2a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001f2c:	f7fe f93c 	bl	80001a8 <HAL_GetTick>
 8001f30:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f32:	6823      	ldr	r3, [r4, #0]
 8001f34:	079f      	lsls	r7, r3, #30
 8001f36:	d4ec      	bmi.n	8001f12 <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f38:	f7fe f936 	bl	80001a8 <HAL_GetTick>
 8001f3c:	1b80      	subs	r0, r0, r6
 8001f3e:	2802      	cmp	r0, #2
 8001f40:	d9f7      	bls.n	8001f32 <HAL_RCC_OscConfig+0x116>
 8001f42:	e7ad      	b.n	8001ea0 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8001f44:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001f46:	f7fe f92f 	bl	80001a8 <HAL_GetTick>
 8001f4a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f4c:	6823      	ldr	r3, [r4, #0]
 8001f4e:	0798      	lsls	r0, r3, #30
 8001f50:	f57f af6d 	bpl.w	8001e2e <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f54:	f7fe f928 	bl	80001a8 <HAL_GetTick>
 8001f58:	1b80      	subs	r0, r0, r6
 8001f5a:	2802      	cmp	r0, #2
 8001f5c:	d9f6      	bls.n	8001f4c <HAL_RCC_OscConfig+0x130>
 8001f5e:	e79f      	b.n	8001ea0 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f60:	69aa      	ldr	r2, [r5, #24]
 8001f62:	4c4a      	ldr	r4, [pc, #296]	; (800208c <HAL_RCC_OscConfig+0x270>)
 8001f64:	4b4b      	ldr	r3, [pc, #300]	; (8002094 <HAL_RCC_OscConfig+0x278>)
 8001f66:	b1da      	cbz	r2, 8001fa0 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8001f68:	2201      	movs	r2, #1
 8001f6a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001f6c:	f7fe f91c 	bl	80001a8 <HAL_GetTick>
 8001f70:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001f74:	079b      	lsls	r3, r3, #30
 8001f76:	d50d      	bpl.n	8001f94 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001f78:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001f7c:	4b46      	ldr	r3, [pc, #280]	; (8002098 <HAL_RCC_OscConfig+0x27c>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	fbb3 f3f2 	udiv	r3, r3, r2
 8001f84:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8001f86:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8001f88:	9b01      	ldr	r3, [sp, #4]
 8001f8a:	1e5a      	subs	r2, r3, #1
 8001f8c:	9201      	str	r2, [sp, #4]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d1f9      	bne.n	8001f86 <HAL_RCC_OscConfig+0x16a>
 8001f92:	e750      	b.n	8001e36 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f94:	f7fe f908 	bl	80001a8 <HAL_GetTick>
 8001f98:	1b80      	subs	r0, r0, r6
 8001f9a:	2802      	cmp	r0, #2
 8001f9c:	d9e9      	bls.n	8001f72 <HAL_RCC_OscConfig+0x156>
 8001f9e:	e77f      	b.n	8001ea0 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8001fa0:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001fa2:	f7fe f901 	bl	80001a8 <HAL_GetTick>
 8001fa6:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fa8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001faa:	079f      	lsls	r7, r3, #30
 8001fac:	f57f af43 	bpl.w	8001e36 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fb0:	f7fe f8fa 	bl	80001a8 <HAL_GetTick>
 8001fb4:	1b80      	subs	r0, r0, r6
 8001fb6:	2802      	cmp	r0, #2
 8001fb8:	d9f6      	bls.n	8001fa8 <HAL_RCC_OscConfig+0x18c>
 8001fba:	e771      	b.n	8001ea0 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fbc:	4c33      	ldr	r4, [pc, #204]	; (800208c <HAL_RCC_OscConfig+0x270>)
 8001fbe:	69e3      	ldr	r3, [r4, #28]
 8001fc0:	00d8      	lsls	r0, r3, #3
 8001fc2:	d424      	bmi.n	800200e <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8001fc4:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fc6:	69e3      	ldr	r3, [r4, #28]
 8001fc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fcc:	61e3      	str	r3, [r4, #28]
 8001fce:	69e3      	ldr	r3, [r4, #28]
 8001fd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fd4:	9300      	str	r3, [sp, #0]
 8001fd6:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fd8:	4e30      	ldr	r6, [pc, #192]	; (800209c <HAL_RCC_OscConfig+0x280>)
 8001fda:	6833      	ldr	r3, [r6, #0]
 8001fdc:	05d9      	lsls	r1, r3, #23
 8001fde:	d518      	bpl.n	8002012 <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fe0:	68eb      	ldr	r3, [r5, #12]
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d126      	bne.n	8002034 <HAL_RCC_OscConfig+0x218>
 8001fe6:	6a23      	ldr	r3, [r4, #32]
 8001fe8:	f043 0301 	orr.w	r3, r3, #1
 8001fec:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001fee:	f7fe f8db 	bl	80001a8 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ff2:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001ff6:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ff8:	6a23      	ldr	r3, [r4, #32]
 8001ffa:	079b      	lsls	r3, r3, #30
 8001ffc:	d53f      	bpl.n	800207e <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8001ffe:	2f00      	cmp	r7, #0
 8002000:	f43f af1d 	beq.w	8001e3e <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002004:	69e3      	ldr	r3, [r4, #28]
 8002006:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800200a:	61e3      	str	r3, [r4, #28]
 800200c:	e717      	b.n	8001e3e <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 800200e:	2700      	movs	r7, #0
 8002010:	e7e2      	b.n	8001fd8 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002012:	6833      	ldr	r3, [r6, #0]
 8002014:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002018:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800201a:	f7fe f8c5 	bl	80001a8 <HAL_GetTick>
 800201e:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002020:	6833      	ldr	r3, [r6, #0]
 8002022:	05da      	lsls	r2, r3, #23
 8002024:	d4dc      	bmi.n	8001fe0 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002026:	f7fe f8bf 	bl	80001a8 <HAL_GetTick>
 800202a:	eba0 0008 	sub.w	r0, r0, r8
 800202e:	2864      	cmp	r0, #100	; 0x64
 8002030:	d9f6      	bls.n	8002020 <HAL_RCC_OscConfig+0x204>
 8002032:	e735      	b.n	8001ea0 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002034:	b9ab      	cbnz	r3, 8002062 <HAL_RCC_OscConfig+0x246>
 8002036:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002038:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800203c:	f023 0301 	bic.w	r3, r3, #1
 8002040:	6223      	str	r3, [r4, #32]
 8002042:	6a23      	ldr	r3, [r4, #32]
 8002044:	f023 0304 	bic.w	r3, r3, #4
 8002048:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800204a:	f7fe f8ad 	bl	80001a8 <HAL_GetTick>
 800204e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002050:	6a23      	ldr	r3, [r4, #32]
 8002052:	0798      	lsls	r0, r3, #30
 8002054:	d5d3      	bpl.n	8001ffe <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002056:	f7fe f8a7 	bl	80001a8 <HAL_GetTick>
 800205a:	1b80      	subs	r0, r0, r6
 800205c:	4540      	cmp	r0, r8
 800205e:	d9f7      	bls.n	8002050 <HAL_RCC_OscConfig+0x234>
 8002060:	e71e      	b.n	8001ea0 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002062:	2b05      	cmp	r3, #5
 8002064:	6a23      	ldr	r3, [r4, #32]
 8002066:	d103      	bne.n	8002070 <HAL_RCC_OscConfig+0x254>
 8002068:	f043 0304 	orr.w	r3, r3, #4
 800206c:	6223      	str	r3, [r4, #32]
 800206e:	e7ba      	b.n	8001fe6 <HAL_RCC_OscConfig+0x1ca>
 8002070:	f023 0301 	bic.w	r3, r3, #1
 8002074:	6223      	str	r3, [r4, #32]
 8002076:	6a23      	ldr	r3, [r4, #32]
 8002078:	f023 0304 	bic.w	r3, r3, #4
 800207c:	e7b6      	b.n	8001fec <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800207e:	f7fe f893 	bl	80001a8 <HAL_GetTick>
 8002082:	eba0 0008 	sub.w	r0, r0, r8
 8002086:	42b0      	cmp	r0, r6
 8002088:	d9b6      	bls.n	8001ff8 <HAL_RCC_OscConfig+0x1dc>
 800208a:	e709      	b.n	8001ea0 <HAL_RCC_OscConfig+0x84>
 800208c:	40021000 	.word	0x40021000
 8002090:	42420000 	.word	0x42420000
 8002094:	42420480 	.word	0x42420480
 8002098:	200000c0 	.word	0x200000c0
 800209c:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020a0:	4c22      	ldr	r4, [pc, #136]	; (800212c <HAL_RCC_OscConfig+0x310>)
 80020a2:	6863      	ldr	r3, [r4, #4]
 80020a4:	f003 030c 	and.w	r3, r3, #12
 80020a8:	2b08      	cmp	r3, #8
 80020aa:	f43f aee2 	beq.w	8001e72 <HAL_RCC_OscConfig+0x56>
 80020ae:	2300      	movs	r3, #0
 80020b0:	4e1f      	ldr	r6, [pc, #124]	; (8002130 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020b2:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80020b4:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020b6:	d12b      	bne.n	8002110 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 80020b8:	f7fe f876 	bl	80001a8 <HAL_GetTick>
 80020bc:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020be:	6823      	ldr	r3, [r4, #0]
 80020c0:	0199      	lsls	r1, r3, #6
 80020c2:	d41f      	bmi.n	8002104 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80020c4:	6a2b      	ldr	r3, [r5, #32]
 80020c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020ca:	d105      	bne.n	80020d8 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80020cc:	6862      	ldr	r2, [r4, #4]
 80020ce:	68a9      	ldr	r1, [r5, #8]
 80020d0:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80020d4:	430a      	orrs	r2, r1
 80020d6:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020d8:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80020da:	6862      	ldr	r2, [r4, #4]
 80020dc:	430b      	orrs	r3, r1
 80020de:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80020e2:	4313      	orrs	r3, r2
 80020e4:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 80020e6:	2301      	movs	r3, #1
 80020e8:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80020ea:	f7fe f85d 	bl	80001a8 <HAL_GetTick>
 80020ee:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020f0:	6823      	ldr	r3, [r4, #0]
 80020f2:	019a      	lsls	r2, r3, #6
 80020f4:	f53f aea7 	bmi.w	8001e46 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020f8:	f7fe f856 	bl	80001a8 <HAL_GetTick>
 80020fc:	1b40      	subs	r0, r0, r5
 80020fe:	2802      	cmp	r0, #2
 8002100:	d9f6      	bls.n	80020f0 <HAL_RCC_OscConfig+0x2d4>
 8002102:	e6cd      	b.n	8001ea0 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002104:	f7fe f850 	bl	80001a8 <HAL_GetTick>
 8002108:	1bc0      	subs	r0, r0, r7
 800210a:	2802      	cmp	r0, #2
 800210c:	d9d7      	bls.n	80020be <HAL_RCC_OscConfig+0x2a2>
 800210e:	e6c7      	b.n	8001ea0 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8002110:	f7fe f84a 	bl	80001a8 <HAL_GetTick>
 8002114:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002116:	6823      	ldr	r3, [r4, #0]
 8002118:	019b      	lsls	r3, r3, #6
 800211a:	f57f ae94 	bpl.w	8001e46 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800211e:	f7fe f843 	bl	80001a8 <HAL_GetTick>
 8002122:	1b40      	subs	r0, r0, r5
 8002124:	2802      	cmp	r0, #2
 8002126:	d9f6      	bls.n	8002116 <HAL_RCC_OscConfig+0x2fa>
 8002128:	e6ba      	b.n	8001ea0 <HAL_RCC_OscConfig+0x84>
 800212a:	bf00      	nop
 800212c:	40021000 	.word	0x40021000
 8002130:	42420060 	.word	0x42420060

08002134 <HAL_RCC_MCOConfig>:
{
 8002134:	b530      	push	{r4, r5, lr}
 8002136:	b087      	sub	sp, #28
 8002138:	460d      	mov	r5, r1
  GPIO_InitTypeDef gpio = {0U};
 800213a:	2210      	movs	r2, #16
 800213c:	2100      	movs	r1, #0
 800213e:	a802      	add	r0, sp, #8
 8002140:	f001 fecc 	bl	8003edc <memset>
  gpio.Mode      = GPIO_MODE_AF_PP;
 8002144:	2302      	movs	r3, #2
 8002146:	9303      	str	r3, [sp, #12]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 8002148:	2303      	movs	r3, #3
 800214a:	9305      	str	r3, [sp, #20]
  gpio.Pin       = MCO1_PIN;
 800214c:	f44f 7380 	mov.w	r3, #256	; 0x100
  MCO1_CLK_ENABLE();
 8002150:	4c0a      	ldr	r4, [pc, #40]	; (800217c <HAL_RCC_MCOConfig+0x48>)
  gpio.Pin       = MCO1_PIN;
 8002152:	9302      	str	r3, [sp, #8]
  MCO1_CLK_ENABLE();
 8002154:	69a3      	ldr	r3, [r4, #24]
  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 8002156:	a902      	add	r1, sp, #8
  MCO1_CLK_ENABLE();
 8002158:	f043 0304 	orr.w	r3, r3, #4
 800215c:	61a3      	str	r3, [r4, #24]
 800215e:	69a3      	ldr	r3, [r4, #24]
  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 8002160:	4807      	ldr	r0, [pc, #28]	; (8002180 <HAL_RCC_MCOConfig+0x4c>)
  MCO1_CLK_ENABLE();
 8002162:	f003 0304 	and.w	r3, r3, #4
 8002166:	9301      	str	r3, [sp, #4]
 8002168:	9b01      	ldr	r3, [sp, #4]
  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 800216a:	f7fe f8f5 	bl	8000358 <HAL_GPIO_Init>
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 800216e:	6861      	ldr	r1, [r4, #4]
 8002170:	f021 61e0 	bic.w	r1, r1, #117440512	; 0x7000000
 8002174:	4329      	orrs	r1, r5
 8002176:	6061      	str	r1, [r4, #4]
}
 8002178:	b007      	add	sp, #28
 800217a:	bd30      	pop	{r4, r5, pc}
 800217c:	40021000 	.word	0x40021000
 8002180:	40010800 	.word	0x40010800

08002184 <HAL_RCC_GetSysClockFreq>:
{
 8002184:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002186:	4b1a      	ldr	r3, [pc, #104]	; (80021f0 <HAL_RCC_GetSysClockFreq+0x6c>)
{
 8002188:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800218a:	ac02      	add	r4, sp, #8
 800218c:	f103 0510 	add.w	r5, r3, #16
 8002190:	4622      	mov	r2, r4
 8002192:	6818      	ldr	r0, [r3, #0]
 8002194:	6859      	ldr	r1, [r3, #4]
 8002196:	3308      	adds	r3, #8
 8002198:	c203      	stmia	r2!, {r0, r1}
 800219a:	42ab      	cmp	r3, r5
 800219c:	4614      	mov	r4, r2
 800219e:	d1f7      	bne.n	8002190 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80021a0:	2301      	movs	r3, #1
 80021a2:	f88d 3004 	strb.w	r3, [sp, #4]
 80021a6:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 80021a8:	4912      	ldr	r1, [pc, #72]	; (80021f4 <HAL_RCC_GetSysClockFreq+0x70>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80021aa:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 80021ae:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80021b0:	f003 020c 	and.w	r2, r3, #12
 80021b4:	2a08      	cmp	r2, #8
 80021b6:	d118      	bne.n	80021ea <HAL_RCC_GetSysClockFreq+0x66>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80021b8:	f3c3 4283 	ubfx	r2, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80021bc:	03db      	lsls	r3, r3, #15
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80021be:	bf48      	it	mi
 80021c0:	684b      	ldrmi	r3, [r1, #4]
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80021c2:	a806      	add	r0, sp, #24
 80021c4:	4402      	add	r2, r0
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80021c6:	bf48      	it	mi
 80021c8:	f3c3 4340 	ubfxmi	r3, r3, #17, #1
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80021cc:	f812 0c10 	ldrb.w	r0, [r2, #-16]
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80021d0:	bf41      	itttt	mi
 80021d2:	aa06      	addmi	r2, sp, #24
 80021d4:	189b      	addmi	r3, r3, r2
 80021d6:	f813 2c14 	ldrbmi.w	r2, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 80021da:	4b07      	ldrmi	r3, [pc, #28]	; (80021f8 <HAL_RCC_GetSysClockFreq+0x74>)
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80021dc:	bf54      	ite	pl
 80021de:	4b07      	ldrpl	r3, [pc, #28]	; (80021fc <HAL_RCC_GetSysClockFreq+0x78>)
        pllclk = (uint32_t)((HSE_VALUE / prediv) * pllmul);
 80021e0:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80021e4:	4358      	muls	r0, r3
}
 80021e6:	b007      	add	sp, #28
 80021e8:	bd30      	pop	{r4, r5, pc}
      sysclockfreq = HSE_VALUE;
 80021ea:	4803      	ldr	r0, [pc, #12]	; (80021f8 <HAL_RCC_GetSysClockFreq+0x74>)
  return sysclockfreq;
 80021ec:	e7fb      	b.n	80021e6 <HAL_RCC_GetSysClockFreq+0x62>
 80021ee:	bf00      	nop
 80021f0:	08003f04 	.word	0x08003f04
 80021f4:	40021000 	.word	0x40021000
 80021f8:	007a1200 	.word	0x007a1200
 80021fc:	003d0900 	.word	0x003d0900

08002200 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002200:	4a4d      	ldr	r2, [pc, #308]	; (8002338 <HAL_RCC_ClockConfig+0x138>)
{
 8002202:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002206:	6813      	ldr	r3, [r2, #0]
{
 8002208:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 800220a:	f003 0307 	and.w	r3, r3, #7
 800220e:	428b      	cmp	r3, r1
{
 8002210:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8002212:	d328      	bcc.n	8002266 <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002214:	682a      	ldr	r2, [r5, #0]
 8002216:	0791      	lsls	r1, r2, #30
 8002218:	d432      	bmi.n	8002280 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800221a:	07d2      	lsls	r2, r2, #31
 800221c:	d438      	bmi.n	8002290 <HAL_RCC_ClockConfig+0x90>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800221e:	4a46      	ldr	r2, [pc, #280]	; (8002338 <HAL_RCC_ClockConfig+0x138>)
 8002220:	6813      	ldr	r3, [r2, #0]
 8002222:	f003 0307 	and.w	r3, r3, #7
 8002226:	429e      	cmp	r6, r3
 8002228:	d373      	bcc.n	8002312 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800222a:	682a      	ldr	r2, [r5, #0]
 800222c:	4c43      	ldr	r4, [pc, #268]	; (800233c <HAL_RCC_ClockConfig+0x13c>)
 800222e:	f012 0f04 	tst.w	r2, #4
 8002232:	d179      	bne.n	8002328 <HAL_RCC_ClockConfig+0x128>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002234:	0713      	lsls	r3, r2, #28
 8002236:	d506      	bpl.n	8002246 <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002238:	6863      	ldr	r3, [r4, #4]
 800223a:	692a      	ldr	r2, [r5, #16]
 800223c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002240:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002244:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002246:	f7ff ff9d 	bl	8002184 <HAL_RCC_GetSysClockFreq>
 800224a:	6863      	ldr	r3, [r4, #4]
 800224c:	4a3c      	ldr	r2, [pc, #240]	; (8002340 <HAL_RCC_ClockConfig+0x140>)
 800224e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002252:	5cd3      	ldrb	r3, [r2, r3]
 8002254:	40d8      	lsrs	r0, r3
 8002256:	4b3b      	ldr	r3, [pc, #236]	; (8002344 <HAL_RCC_ClockConfig+0x144>)
 8002258:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800225a:	2000      	movs	r0, #0
 800225c:	f7fd ff76 	bl	800014c <HAL_InitTick>
  return HAL_OK;
 8002260:	2000      	movs	r0, #0
}
 8002262:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002266:	6813      	ldr	r3, [r2, #0]
 8002268:	f023 0307 	bic.w	r3, r3, #7
 800226c:	430b      	orrs	r3, r1
 800226e:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002270:	6813      	ldr	r3, [r2, #0]
 8002272:	f003 0307 	and.w	r3, r3, #7
 8002276:	4299      	cmp	r1, r3
 8002278:	d0cc      	beq.n	8002214 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 800227a:	2001      	movs	r0, #1
 800227c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002280:	492e      	ldr	r1, [pc, #184]	; (800233c <HAL_RCC_ClockConfig+0x13c>)
 8002282:	68a8      	ldr	r0, [r5, #8]
 8002284:	684b      	ldr	r3, [r1, #4]
 8002286:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800228a:	4303      	orrs	r3, r0
 800228c:	604b      	str	r3, [r1, #4]
 800228e:	e7c4      	b.n	800221a <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002290:	686a      	ldr	r2, [r5, #4]
 8002292:	4c2a      	ldr	r4, [pc, #168]	; (800233c <HAL_RCC_ClockConfig+0x13c>)
 8002294:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002296:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002298:	d11c      	bne.n	80022d4 <HAL_RCC_ClockConfig+0xd4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800229a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800229e:	d0ec      	beq.n	800227a <HAL_RCC_ClockConfig+0x7a>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022a0:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022a2:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022a6:	f023 0303 	bic.w	r3, r3, #3
 80022aa:	4313      	orrs	r3, r2
 80022ac:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 80022ae:	f7fd ff7b 	bl	80001a8 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022b2:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 80022b4:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d114      	bne.n	80022e4 <HAL_RCC_ClockConfig+0xe4>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80022ba:	6863      	ldr	r3, [r4, #4]
 80022bc:	f003 030c 	and.w	r3, r3, #12
 80022c0:	2b04      	cmp	r3, #4
 80022c2:	d0ac      	beq.n	800221e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022c4:	f7fd ff70 	bl	80001a8 <HAL_GetTick>
 80022c8:	1bc0      	subs	r0, r0, r7
 80022ca:	4540      	cmp	r0, r8
 80022cc:	d9f5      	bls.n	80022ba <HAL_RCC_ClockConfig+0xba>
          return HAL_TIMEOUT;
 80022ce:	2003      	movs	r0, #3
 80022d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022d4:	2a02      	cmp	r2, #2
 80022d6:	d102      	bne.n	80022de <HAL_RCC_ClockConfig+0xde>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022d8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80022dc:	e7df      	b.n	800229e <HAL_RCC_ClockConfig+0x9e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022de:	f013 0f02 	tst.w	r3, #2
 80022e2:	e7dc      	b.n	800229e <HAL_RCC_ClockConfig+0x9e>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d10f      	bne.n	8002308 <HAL_RCC_ClockConfig+0x108>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022e8:	6863      	ldr	r3, [r4, #4]
 80022ea:	f003 030c 	and.w	r3, r3, #12
 80022ee:	2b08      	cmp	r3, #8
 80022f0:	d095      	beq.n	800221e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022f2:	f7fd ff59 	bl	80001a8 <HAL_GetTick>
 80022f6:	1bc0      	subs	r0, r0, r7
 80022f8:	4540      	cmp	r0, r8
 80022fa:	d9f5      	bls.n	80022e8 <HAL_RCC_ClockConfig+0xe8>
 80022fc:	e7e7      	b.n	80022ce <HAL_RCC_ClockConfig+0xce>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022fe:	f7fd ff53 	bl	80001a8 <HAL_GetTick>
 8002302:	1bc0      	subs	r0, r0, r7
 8002304:	4540      	cmp	r0, r8
 8002306:	d8e2      	bhi.n	80022ce <HAL_RCC_ClockConfig+0xce>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002308:	6863      	ldr	r3, [r4, #4]
 800230a:	f013 0f0c 	tst.w	r3, #12
 800230e:	d1f6      	bne.n	80022fe <HAL_RCC_ClockConfig+0xfe>
 8002310:	e785      	b.n	800221e <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002312:	6813      	ldr	r3, [r2, #0]
 8002314:	f023 0307 	bic.w	r3, r3, #7
 8002318:	4333      	orrs	r3, r6
 800231a:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800231c:	6813      	ldr	r3, [r2, #0]
 800231e:	f003 0307 	and.w	r3, r3, #7
 8002322:	429e      	cmp	r6, r3
 8002324:	d1a9      	bne.n	800227a <HAL_RCC_ClockConfig+0x7a>
 8002326:	e780      	b.n	800222a <HAL_RCC_ClockConfig+0x2a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002328:	6863      	ldr	r3, [r4, #4]
 800232a:	68e9      	ldr	r1, [r5, #12]
 800232c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002330:	430b      	orrs	r3, r1
 8002332:	6063      	str	r3, [r4, #4]
 8002334:	e77e      	b.n	8002234 <HAL_RCC_ClockConfig+0x34>
 8002336:	bf00      	nop
 8002338:	40022000 	.word	0x40022000
 800233c:	40021000 	.word	0x40021000
 8002340:	08003f21 	.word	0x08003f21
 8002344:	200000c0 	.word	0x200000c0

08002348 <HAL_RCC_GetHCLKFreq>:
}
 8002348:	4b01      	ldr	r3, [pc, #4]	; (8002350 <HAL_RCC_GetHCLKFreq+0x8>)
 800234a:	6818      	ldr	r0, [r3, #0]
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	200000c0 	.word	0x200000c0

08002354 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002354:	4b04      	ldr	r3, [pc, #16]	; (8002368 <HAL_RCC_GetPCLK1Freq+0x14>)
 8002356:	4a05      	ldr	r2, [pc, #20]	; (800236c <HAL_RCC_GetPCLK1Freq+0x18>)
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800235e:	5cd3      	ldrb	r3, [r2, r3]
 8002360:	4a03      	ldr	r2, [pc, #12]	; (8002370 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002362:	6810      	ldr	r0, [r2, #0]
}    
 8002364:	40d8      	lsrs	r0, r3
 8002366:	4770      	bx	lr
 8002368:	40021000 	.word	0x40021000
 800236c:	08003f31 	.word	0x08003f31
 8002370:	200000c0 	.word	0x200000c0

08002374 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002374:	6803      	ldr	r3, [r0, #0]
{
 8002376:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800237a:	07d9      	lsls	r1, r3, #31
{
 800237c:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800237e:	d520      	bpl.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002380:	4c35      	ldr	r4, [pc, #212]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8002382:	69e3      	ldr	r3, [r4, #28]
 8002384:	00da      	lsls	r2, r3, #3
 8002386:	d432      	bmi.n	80023ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8002388:	2701      	movs	r7, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 800238a:	69e3      	ldr	r3, [r4, #28]
 800238c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002390:	61e3      	str	r3, [r4, #28]
 8002392:	69e3      	ldr	r3, [r4, #28]
 8002394:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002398:	9301      	str	r3, [sp, #4]
 800239a:	9b01      	ldr	r3, [sp, #4]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800239c:	4e2f      	ldr	r6, [pc, #188]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800239e:	6833      	ldr	r3, [r6, #0]
 80023a0:	05db      	lsls	r3, r3, #23
 80023a2:	d526      	bpl.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80023a4:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80023a6:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80023aa:	d136      	bne.n	800241a <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80023ac:	6a23      	ldr	r3, [r4, #32]
 80023ae:	686a      	ldr	r2, [r5, #4]
 80023b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023b4:	4313      	orrs	r3, r2
 80023b6:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80023b8:	b11f      	cbz	r7, 80023c2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023ba:	69e3      	ldr	r3, [r4, #28]
 80023bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023c0:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80023c2:	6828      	ldr	r0, [r5, #0]
 80023c4:	0783      	lsls	r3, r0, #30
 80023c6:	d506      	bpl.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80023c8:	4a23      	ldr	r2, [pc, #140]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80023ca:	68a9      	ldr	r1, [r5, #8]
 80023cc:	6853      	ldr	r3, [r2, #4]
 80023ce:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80023d2:	430b      	orrs	r3, r1
 80023d4:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80023d6:	f010 0010 	ands.w	r0, r0, #16
 80023da:	d01b      	beq.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80023dc:	4a1e      	ldr	r2, [pc, #120]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80023de:	68e9      	ldr	r1, [r5, #12]
 80023e0:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80023e2:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80023e4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80023e8:	430b      	orrs	r3, r1
 80023ea:	6053      	str	r3, [r2, #4]
 80023ec:	e012      	b.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 80023ee:	2700      	movs	r7, #0
 80023f0:	e7d4      	b.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023f2:	6833      	ldr	r3, [r6, #0]
 80023f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023f8:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80023fa:	f7fd fed5 	bl	80001a8 <HAL_GetTick>
 80023fe:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002400:	6833      	ldr	r3, [r6, #0]
 8002402:	05d8      	lsls	r0, r3, #23
 8002404:	d4ce      	bmi.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002406:	f7fd fecf 	bl	80001a8 <HAL_GetTick>
 800240a:	eba0 0008 	sub.w	r0, r0, r8
 800240e:	2864      	cmp	r0, #100	; 0x64
 8002410:	d9f6      	bls.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8002412:	2003      	movs	r0, #3
}
 8002414:	b002      	add	sp, #8
 8002416:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800241a:	686a      	ldr	r2, [r5, #4]
 800241c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002420:	4293      	cmp	r3, r2
 8002422:	d0c3      	beq.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8002424:	2001      	movs	r0, #1
 8002426:	4a0e      	ldr	r2, [pc, #56]	; (8002460 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002428:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 800242a:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800242c:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800242e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002432:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8002434:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002436:	07d9      	lsls	r1, r3, #31
 8002438:	d5b8      	bpl.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 800243a:	f7fd feb5 	bl	80001a8 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800243e:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8002442:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002444:	6a23      	ldr	r3, [r4, #32]
 8002446:	079a      	lsls	r2, r3, #30
 8002448:	d4b0      	bmi.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0x38>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800244a:	f7fd fead 	bl	80001a8 <HAL_GetTick>
 800244e:	1b80      	subs	r0, r0, r6
 8002450:	4540      	cmp	r0, r8
 8002452:	d9f7      	bls.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8002454:	e7dd      	b.n	8002412 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8002456:	bf00      	nop
 8002458:	40021000 	.word	0x40021000
 800245c:	40007000 	.word	0x40007000
 8002460:	42420440 	.word	0x42420440

08002464 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002464:	b084      	sub	sp, #16
 8002466:	a801      	add	r0, sp, #4
 8002468:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 800246c:	b004      	add	sp, #16
 800246e:	2000      	movs	r0, #0
 8002470:	4770      	bx	lr

08002472 <USB_EnableGlobalInt>:
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
     | USB_CNTR_SOFM | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 8002472:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8002476:	b29b      	uxth	r3, r3
 8002478:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 800247c:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  
  return HAL_OK;
}
 8002480:	2000      	movs	r0, #0
 8002482:	4770      	bx	lr

08002484 <USB_DisableGlobalInt>:
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
    | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8002484:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8002488:	f423 5374 	bic.w	r3, r3, #15616	; 0x3d00
 800248c:	045b      	lsls	r3, r3, #17
 800248e:	0c5b      	lsrs	r3, r3, #17
 8002490:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  
  return HAL_OK;
}
 8002494:	2000      	movs	r0, #0
 8002496:	4770      	bx	lr

08002498 <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8002498:	2000      	movs	r0, #0
 800249a:	4770      	bx	lr

0800249c <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800249c:	b084      	sub	sp, #16
 800249e:	b510      	push	{r4, lr}
 80024a0:	ac03      	add	r4, sp, #12
 80024a2:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  
  /* Enable USB Device Interrupt mask */
  USB_EnableGlobalInt(USBx);
    
  return HAL_OK;
}
 80024a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBx->CNTR = 0;
 80024aa:	2200      	movs	r2, #0
  USBx->CNTR = USB_CNTR_FRES;
 80024ac:	2301      	movs	r3, #1
 80024ae:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  USBx->CNTR = 0;
 80024b2:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
  USBx->ISTR = 0;
 80024b6:	f8a0 2044 	strh.w	r2, [r0, #68]	; 0x44
  USBx->BTABLE = BTABLE_ADDRESS;
 80024ba:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
  USBx->CNTR |= winterruptmask;
 80024be:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
}
 80024c2:	b004      	add	sp, #16
  USBx->CNTR |= winterruptmask;
 80024c4:	b29b      	uxth	r3, r3
 80024c6:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 80024ca:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
}
 80024ce:	4610      	mov	r0, r2
 80024d0:	4770      	bx	lr
	...

080024d4 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80024d4:	b570      	push	{r4, r5, r6, lr}
  /* initialize Endpoint */
  switch (ep->type)
 80024d6:	78cb      	ldrb	r3, [r1, #3]
 80024d8:	780a      	ldrb	r2, [r1, #0]
 80024da:	2b03      	cmp	r3, #3
 80024dc:	d80f      	bhi.n	80024fe <USB_ActivateEndpoint+0x2a>
 80024de:	e8df f003 	tbb	[pc, r3]
 80024e2:	6402      	.short	0x6402
 80024e4:	5950      	.short	0x5950
  {
  case EP_TYPE_CTRL:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_CONTROL);
 80024e6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80024ea:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80024ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024f2:	041b      	lsls	r3, r3, #16
 80024f4:	0c1b      	lsrs	r3, r3, #16
 80024f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    break;
  case EP_TYPE_INTR:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_INTERRUPT);
    break;
  case EP_TYPE_ISOC:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_ISOCHRONOUS);
 80024fa:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    break;
  default:
      break;
  } 
  
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80024fe:	f640 730f 	movw	r3, #3855	; 0xf0f
 8002502:	780c      	ldrb	r4, [r1, #0]
 8002504:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8002508:	f444 4500 	orr.w	r5, r4, #32768	; 0x8000
 800250c:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8002510:	401a      	ands	r2, r3
 8002512:	432a      	orrs	r2, r5
 8002514:	f820 2024 	strh.w	r2, [r0, r4, lsl #2]
  
  if (ep->doublebuffer == 0) 
 8002518:	7a8a      	ldrb	r2, [r1, #10]
 800251a:	780d      	ldrb	r5, [r1, #0]
 800251c:	2a00      	cmp	r2, #0
 800251e:	f040 8097 	bne.w	8002650 <USB_ActivateEndpoint+0x17c>
  {
    if (ep->is_in)
 8002522:	784c      	ldrb	r4, [r1, #1]
 8002524:	888a      	ldrh	r2, [r1, #4]
 8002526:	2c00      	cmp	r4, #0
 8002528:	d04a      	beq.n	80025c0 <USB_ActivateEndpoint+0xec>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800252a:	f8b0 4050 	ldrh.w	r4, [r0, #80]	; 0x50
 800252e:	0852      	lsrs	r2, r2, #1
 8002530:	b2a4      	uxth	r4, r4
 8002532:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8002536:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 800253a:	0052      	lsls	r2, r2, #1
 800253c:	f8c4 2400 	str.w	r2, [r4, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002540:	780c      	ldrb	r4, [r1, #0]
 8002542:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8002546:	0652      	lsls	r2, r2, #25
 8002548:	d508      	bpl.n	800255c <USB_ActivateEndpoint+0x88>
 800254a:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 800254e:	4013      	ands	r3, r2
 8002550:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002554:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002558:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      /* Configure NAK status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK); 
 800255c:	780a      	ldrb	r2, [r1, #0]
 800255e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002562:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002566:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800256a:	041b      	lsls	r3, r3, #16
 800256c:	0c1b      	lsrs	r3, r3, #16
 800256e:	f083 0320 	eor.w	r3, r3, #32
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002572:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002576:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800257a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }
  
  return HAL_OK;
}
 800257e:	2000      	movs	r0, #0
 8002580:	bd70      	pop	{r4, r5, r6, pc}
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_BULK);
 8002582:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002586:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800258a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800258e:	041b      	lsls	r3, r3, #16
 8002590:	0c1b      	lsrs	r3, r3, #16
 8002592:	e7b2      	b.n	80024fa <USB_ActivateEndpoint+0x26>
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_INTERRUPT);
 8002594:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002598:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800259c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025a0:	041b      	lsls	r3, r3, #16
 80025a2:	0c1b      	lsrs	r3, r3, #16
 80025a4:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80025a8:	e7a7      	b.n	80024fa <USB_ActivateEndpoint+0x26>
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_ISOCHRONOUS);
 80025aa:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80025ae:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80025b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025b6:	041b      	lsls	r3, r3, #16
 80025b8:	0c1b      	lsrs	r3, r3, #16
 80025ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025be:	e79c      	b.n	80024fa <USB_ActivateEndpoint+0x26>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80025c0:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80025c4:	0852      	lsrs	r2, r2, #1
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	3304      	adds	r3, #4
 80025ca:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80025ce:	0052      	lsls	r2, r2, #1
 80025d0:	f500 6480 	add.w	r4, r0, #1024	; 0x400
 80025d4:	f844 2013 	str.w	r2, [r4, r3, lsl #1]
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80025d8:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 80025dc:	690d      	ldr	r5, [r1, #16]
 80025de:	b292      	uxth	r2, r2
 80025e0:	780b      	ldrb	r3, [r1, #0]
 80025e2:	3206      	adds	r2, #6
 80025e4:	2d3e      	cmp	r5, #62	; 0x3e
 80025e6:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80025ea:	d929      	bls.n	8002640 <USB_ActivateEndpoint+0x16c>
 80025ec:	f3c5 164f 	ubfx	r6, r5, #5, #16
 80025f0:	06eb      	lsls	r3, r5, #27
 80025f2:	bf04      	itt	eq
 80025f4:	f106 33ff 	addeq.w	r3, r6, #4294967295
 80025f8:	b29e      	uxtheq	r6, r3
 80025fa:	4b6e      	ldr	r3, [pc, #440]	; (80027b4 <USB_ActivateEndpoint+0x2e0>)
 80025fc:	ea43 2386 	orr.w	r3, r3, r6, lsl #10
 8002600:	b29b      	uxth	r3, r3
 8002602:	f844 3012 	str.w	r3, [r4, r2, lsl #1]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002606:	780a      	ldrb	r2, [r1, #0]
 8002608:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800260c:	045e      	lsls	r6, r3, #17
 800260e:	d50b      	bpl.n	8002628 <USB_ActivateEndpoint+0x154>
 8002610:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002614:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002618:	051b      	lsls	r3, r3, #20
 800261a:	0d1b      	lsrs	r3, r3, #20
 800261c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002620:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002624:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002628:	780a      	ldrb	r2, [r1, #0]
 800262a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800262e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002636:	041b      	lsls	r3, r3, #16
 8002638:	0c1b      	lsrs	r3, r3, #16
 800263a:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 800263e:	e798      	b.n	8002572 <USB_ActivateEndpoint+0x9e>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002640:	f3c5 034f 	ubfx	r3, r5, #1, #16
 8002644:	07ed      	lsls	r5, r5, #31
 8002646:	bf44      	itt	mi
 8002648:	3301      	addmi	r3, #1
 800264a:	b29b      	uxthmi	r3, r3
 800264c:	029b      	lsls	r3, r3, #10
 800264e:	e7d7      	b.n	8002600 <USB_ActivateEndpoint+0x12c>
    PCD_SET_EP_DBUF(USBx, ep->num);
 8002650:	f830 2025 	ldrh.w	r2, [r0, r5, lsl #2]
 8002654:	f422 72f8 	bic.w	r2, r2, #496	; 0x1f0
 8002658:	0512      	lsls	r2, r2, #20
 800265a:	0d12      	lsrs	r2, r2, #20
 800265c:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 8002660:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002664:	f820 2025 	strh.w	r2, [r0, r5, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num,ep->pmaaddr0, ep->pmaaddr1);
 8002668:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 800266c:	780c      	ldrb	r4, [r1, #0]
 800266e:	b292      	uxth	r2, r2
 8002670:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8002674:	88cc      	ldrh	r4, [r1, #6]
 8002676:	f500 6580 	add.w	r5, r0, #1024	; 0x400
 800267a:	0864      	lsrs	r4, r4, #1
 800267c:	0064      	lsls	r4, r4, #1
 800267e:	f845 4012 	str.w	r4, [r5, r2, lsl #1]
 8002682:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002686:	780c      	ldrb	r4, [r1, #0]
 8002688:	b292      	uxth	r2, r2
 800268a:	3204      	adds	r2, #4
 800268c:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8002690:	890c      	ldrh	r4, [r1, #8]
 8002692:	0864      	lsrs	r4, r4, #1
 8002694:	0064      	lsls	r4, r4, #1
 8002696:	f845 4012 	str.w	r4, [r5, r2, lsl #1]
    if (ep->is_in==0)
 800269a:	784a      	ldrb	r2, [r1, #1]
 800269c:	780c      	ldrb	r4, [r1, #0]
 800269e:	2a00      	cmp	r2, #0
 80026a0:	d147      	bne.n	8002732 <USB_ActivateEndpoint+0x25e>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80026a2:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 80026a6:	0455      	lsls	r5, r2, #17
 80026a8:	d508      	bpl.n	80026bc <USB_ActivateEndpoint+0x1e8>
 80026aa:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 80026ae:	4013      	ands	r3, r2
 80026b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026b8:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80026bc:	780a      	ldrb	r2, [r1, #0]
 80026be:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80026c2:	065c      	lsls	r4, r3, #25
 80026c4:	d50b      	bpl.n	80026de <USB_ActivateEndpoint+0x20a>
 80026c6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80026ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80026ce:	051b      	lsls	r3, r3, #20
 80026d0:	0d1b      	lsrs	r3, r3, #20
 80026d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026d6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80026da:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 80026de:	780a      	ldrb	r2, [r1, #0]
 80026e0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80026e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80026e8:	051b      	lsls	r3, r3, #20
 80026ea:	0d1b      	lsrs	r3, r3, #20
 80026ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026f0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80026f4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80026f8:	f248 0280 	movw	r2, #32896	; 0x8080
 80026fc:	780c      	ldrb	r4, [r1, #0]
 80026fe:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8002702:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002706:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800270a:	041b      	lsls	r3, r3, #16
 800270c:	0c1b      	lsrs	r3, r3, #16
 800270e:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002712:	4313      	orrs	r3, r2
 8002714:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002718:	7809      	ldrb	r1, [r1, #0]
 800271a:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 800271e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002722:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002726:	041b      	lsls	r3, r3, #16
 8002728:	0c1b      	lsrs	r3, r3, #16
 800272a:	4313      	orrs	r3, r2
 800272c:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
 8002730:	e725      	b.n	800257e <USB_ActivateEndpoint+0xaa>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002732:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8002736:	0452      	lsls	r2, r2, #17
 8002738:	d508      	bpl.n	800274c <USB_ActivateEndpoint+0x278>
 800273a:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 800273e:	4013      	ands	r3, r2
 8002740:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002744:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002748:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800274c:	780a      	ldrb	r2, [r1, #0]
 800274e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002752:	065b      	lsls	r3, r3, #25
 8002754:	d50b      	bpl.n	800276e <USB_ActivateEndpoint+0x29a>
 8002756:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800275a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800275e:	051b      	lsls	r3, r3, #20
 8002760:	0d1b      	lsrs	r3, r3, #20
 8002762:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002766:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800276a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 800276e:	780a      	ldrb	r2, [r1, #0]
 8002770:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002774:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002778:	051b      	lsls	r3, r3, #20
 800277a:	0d1b      	lsrs	r3, r3, #20
 800277c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002780:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002784:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002788:	f248 0280 	movw	r2, #32896	; 0x8080
 800278c:	780c      	ldrb	r4, [r1, #0]
 800278e:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8002792:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002796:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800279a:	041b      	lsls	r3, r3, #16
 800279c:	0c1b      	lsrs	r3, r3, #16
 800279e:	4313      	orrs	r3, r2
 80027a0:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80027a4:	7809      	ldrb	r1, [r1, #0]
 80027a6:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 80027aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80027ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027b2:	e7b8      	b.n	8002726 <USB_ActivateEndpoint+0x252>
 80027b4:	ffff8000 	.word	0xffff8000

080027b8 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80027b8:	b510      	push	{r4, lr}
  if (ep->doublebuffer == 0) 
 80027ba:	7a8c      	ldrb	r4, [r1, #10]
 80027bc:	784a      	ldrb	r2, [r1, #1]
 80027be:	780b      	ldrb	r3, [r1, #0]
 80027c0:	bbcc      	cbnz	r4, 8002836 <USB_DeactivateEndpoint+0x7e>
  {
    if (ep->is_in)
 80027c2:	b302      	cbz	r2, 8002806 <USB_DeactivateEndpoint+0x4e>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80027c4:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80027c8:	0652      	lsls	r2, r2, #25
 80027ca:	d50b      	bpl.n	80027e4 <USB_DeactivateEndpoint+0x2c>
 80027cc:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80027d0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80027d4:	0512      	lsls	r2, r2, #20
 80027d6:	0d12      	lsrs	r2, r2, #20
 80027d8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80027dc:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80027e0:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS); 
 80027e4:	780a      	ldrb	r2, [r1, #0]
 80027e6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80027ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80027ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80027f2:	041b      	lsls	r3, r3, #16
 80027f4:	0c1b      	lsrs	r3, r3, #16
 80027f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027fe:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }
  
  return HAL_OK;
}
 8002802:	2000      	movs	r0, #0
 8002804:	bd10      	pop	{r4, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002806:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800280a:	0454      	lsls	r4, r2, #17
 800280c:	d50b      	bpl.n	8002826 <USB_DeactivateEndpoint+0x6e>
 800280e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002812:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002816:	0512      	lsls	r2, r2, #20
 8002818:	0d12      	lsrs	r2, r2, #20
 800281a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 800281e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002822:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002826:	780a      	ldrb	r2, [r1, #0]
 8002828:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800282c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002830:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002834:	e7dd      	b.n	80027f2 <USB_DeactivateEndpoint+0x3a>
    if (ep->is_in==0)
 8002836:	2a00      	cmp	r2, #0
 8002838:	d148      	bne.n	80028cc <USB_DeactivateEndpoint+0x114>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800283a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800283e:	0452      	lsls	r2, r2, #17
 8002840:	d50b      	bpl.n	800285a <USB_DeactivateEndpoint+0xa2>
 8002842:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002846:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800284a:	0512      	lsls	r2, r2, #20
 800284c:	0d12      	lsrs	r2, r2, #20
 800284e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002852:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002856:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800285a:	780a      	ldrb	r2, [r1, #0]
 800285c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002860:	065c      	lsls	r4, r3, #25
 8002862:	d50b      	bpl.n	800287c <USB_DeactivateEndpoint+0xc4>
 8002864:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002868:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800286c:	051b      	lsls	r3, r3, #20
 800286e:	0d1b      	lsrs	r3, r3, #20
 8002870:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002874:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002878:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 800287c:	780a      	ldrb	r2, [r1, #0]
 800287e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002882:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002886:	051b      	lsls	r3, r3, #20
 8002888:	0d1b      	lsrs	r3, r3, #20
 800288a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800288e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002892:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002896:	f248 0280 	movw	r2, #32896	; 0x8080
 800289a:	780c      	ldrb	r4, [r1, #0]
 800289c:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 80028a0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80028a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028a8:	041b      	lsls	r3, r3, #16
 80028aa:	0c1b      	lsrs	r3, r3, #16
 80028ac:	4313      	orrs	r3, r2
 80028ae:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80028b2:	7809      	ldrb	r1, [r1, #0]
 80028b4:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 80028b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80028c0:	041b      	lsls	r3, r3, #16
 80028c2:	0c1b      	lsrs	r3, r3, #16
 80028c4:	4313      	orrs	r3, r2
 80028c6:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
 80028ca:	e79a      	b.n	8002802 <USB_DeactivateEndpoint+0x4a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80028cc:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80028d0:	0452      	lsls	r2, r2, #17
 80028d2:	d50b      	bpl.n	80028ec <USB_DeactivateEndpoint+0x134>
 80028d4:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80028d8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80028dc:	0512      	lsls	r2, r2, #20
 80028de:	0d12      	lsrs	r2, r2, #20
 80028e0:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80028e4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80028e8:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80028ec:	780a      	ldrb	r2, [r1, #0]
 80028ee:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80028f2:	065b      	lsls	r3, r3, #25
 80028f4:	d50b      	bpl.n	800290e <USB_DeactivateEndpoint+0x156>
 80028f6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80028fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028fe:	051b      	lsls	r3, r3, #20
 8002900:	0d1b      	lsrs	r3, r3, #20
 8002902:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002906:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800290a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 800290e:	780a      	ldrb	r2, [r1, #0]
 8002910:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002914:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002918:	051b      	lsls	r3, r3, #20
 800291a:	0d1b      	lsrs	r3, r3, #20
 800291c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002920:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002924:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002928:	f248 0280 	movw	r2, #32896	; 0x8080
 800292c:	780c      	ldrb	r4, [r1, #0]
 800292e:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8002932:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002936:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800293a:	041b      	lsls	r3, r3, #16
 800293c:	0c1b      	lsrs	r3, r3, #16
 800293e:	4313      	orrs	r3, r2
 8002940:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002944:	7809      	ldrb	r1, [r1, #0]
 8002946:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 800294a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800294e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002952:	e7b5      	b.n	80028c0 <USB_DeactivateEndpoint+0x108>

08002954 <USB_EPSetStall>:
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx , USB_EPTypeDef *ep)
{
  if (ep->num == 0)
 8002954:	780a      	ldrb	r2, [r1, #0]
 8002956:	b98a      	cbnz	r2, 800297c <USB_EPSetStall+0x28>
  {
    /* This macro sets STALL status for RX & TX*/ 
    PCD_SET_EP_TXRX_STATUS(USBx, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL); 
 8002958:	8803      	ldrh	r3, [r0, #0]
 800295a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800295e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002962:	041b      	lsls	r3, r3, #16
 8002964:	0c1b      	lsrs	r3, r3, #16
 8002966:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800296a:	f083 0310 	eor.w	r3, r3, #16
 800296e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002972:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002976:	8003      	strh	r3, [r0, #0]
    {
      PCD_SET_EP_RX_STATUS(USBx, ep->num , USB_EP_RX_STALL);
    }
  }
  return HAL_OK;
}
 8002978:	2000      	movs	r0, #0
 800297a:	4770      	bx	lr
    if (ep->is_in)
 800297c:	784b      	ldrb	r3, [r1, #1]
 800297e:	b183      	cbz	r3, 80029a2 <USB_EPSetStall+0x4e>
      PCD_SET_EP_TX_STATUS(USBx, ep->num , USB_EP_TX_STALL); 
 8002980:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002984:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002988:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800298c:	041b      	lsls	r3, r3, #16
 800298e:	0c1b      	lsrs	r3, r3, #16
 8002990:	f083 0310 	eor.w	r3, r3, #16
      PCD_SET_EP_RX_STATUS(USBx, ep->num , USB_EP_RX_STALL);
 8002994:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002998:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800299c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 80029a0:	e7ea      	b.n	8002978 <USB_EPSetStall+0x24>
 80029a2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80029a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80029aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029ae:	041b      	lsls	r3, r3, #16
 80029b0:	0c1b      	lsrs	r3, r3, #16
 80029b2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80029b6:	e7ed      	b.n	8002994 <USB_EPSetStall+0x40>

080029b8 <USB_EPClearStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in)
 80029b8:	784b      	ldrb	r3, [r1, #1]
 80029ba:	780a      	ldrb	r2, [r1, #0]
 80029bc:	b313      	cbz	r3, 8002a04 <USB_EPClearStall+0x4c>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80029be:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80029c2:	065b      	lsls	r3, r3, #25
 80029c4:	d50b      	bpl.n	80029de <USB_EPClearStall+0x26>
 80029c6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80029ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80029ce:	051b      	lsls	r3, r3, #20
 80029d0:	0d1b      	lsrs	r3, r3, #20
 80029d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029d6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80029da:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80029de:	780a      	ldrb	r2, [r1, #0]
 80029e0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80029e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029ec:	041b      	lsls	r3, r3, #16
 80029ee:	0c1b      	lsrs	r3, r3, #16
 80029f0:	f083 0330 	eor.w	r3, r3, #48	; 0x30
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80029f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029fc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }
  return HAL_OK;
}
 8002a00:	2000      	movs	r0, #0
 8002a02:	4770      	bx	lr
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002a04:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002a08:	045b      	lsls	r3, r3, #17
 8002a0a:	d50b      	bpl.n	8002a24 <USB_EPClearStall+0x6c>
 8002a0c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002a10:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a14:	051b      	lsls	r3, r3, #20
 8002a16:	0d1b      	lsrs	r3, r3, #20
 8002a18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a20:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002a24:	780a      	ldrb	r2, [r1, #0]
 8002a26:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002a2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a32:	041b      	lsls	r3, r3, #16
 8002a34:	0c1b      	lsrs	r3, r3, #16
 8002a36:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002a3a:	e7db      	b.n	80029f4 <USB_EPClearStall+0x3c>

08002a3c <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_TypeDef *USBx, uint8_t address)
{
  if(address == 0) 
 8002a3c:	b911      	cbnz	r1, 8002a44 <USB_SetDevAddress+0x8>
  {
   /* set device address and enable function */
   USBx->DADDR = USB_DADDR_EF;
 8002a3e:	2380      	movs	r3, #128	; 0x80
 8002a40:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }
  
  return HAL_OK;
}
 8002a44:	2000      	movs	r0, #0
 8002a46:	4770      	bx	lr

08002a48 <USB_DevConnect>:
 8002a48:	2000      	movs	r0, #0
 8002a4a:	4770      	bx	lr

08002a4c <USB_DevDisconnect>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8002a4c:	2000      	movs	r0, #0
 8002a4e:	4770      	bx	lr

08002a50 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts (USB_TypeDef *USBx)
{
  uint32_t tmpreg = 0;
  
  tmpreg = USBx->ISTR;
 8002a50:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 8002a54:	b280      	uxth	r0, r0
 8002a56:	4770      	bx	lr

08002a58 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8002a58:	2000      	movs	r0, #0
 8002a5a:	4770      	bx	lr

08002a5c <USB_WritePMA>:
  * @param  wPMABufAddr : address into PMA.
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8002a5c:	b510      	push	{r4, lr}
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
  uint32_t index = 0, temp1 = 0, temp2 = 0;
  uint16_t *pdwVal = NULL;
  
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
  for (index = nbytes; index != 0; index--)
 8002a5e:	2400      	movs	r4, #0
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
 8002a60:	3301      	adds	r3, #1
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8002a62:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
 8002a66:	105b      	asrs	r3, r3, #1
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8002a68:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (index = nbytes; index != 0; index--)
 8002a6c:	42a3      	cmp	r3, r4
 8002a6e:	d100      	bne.n	8002a72 <USB_WritePMA+0x16>
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
    *pdwVal++ = temp2;
    pdwVal++;
    pbUsrBuf++;
  }
}
 8002a70:	bd10      	pop	{r4, pc}
 8002a72:	f831 0b02 	ldrh.w	r0, [r1], #2
    *pdwVal++ = temp2;
 8002a76:	f822 0024 	strh.w	r0, [r2, r4, lsl #2]
 8002a7a:	3401      	adds	r4, #1
 8002a7c:	e7f6      	b.n	8002a6c <USB_WritePMA+0x10>
	...

08002a80 <USB_EPStartXfer>:
{
 8002a80:	b570      	push	{r4, r5, r6, lr}
 8002a82:	460e      	mov	r6, r1
  uint32_t len = ep->xfer_len;
 8002a84:	698a      	ldr	r2, [r1, #24]
  if (ep->is_in == 1)
 8002a86:	7849      	ldrb	r1, [r1, #1]
{
 8002a88:	4605      	mov	r5, r0
  if (ep->is_in == 1)
 8002a8a:	2901      	cmp	r1, #1
 8002a8c:	6933      	ldr	r3, [r6, #16]
 8002a8e:	7ab0      	ldrb	r0, [r6, #10]
 8002a90:	d166      	bne.n	8002b60 <USB_EPStartXfer+0xe0>
    if (ep->xfer_len > ep->maxpacket)
 8002a92:	429a      	cmp	r2, r3
 8002a94:	461c      	mov	r4, r3
      ep->xfer_len =0;
 8002a96:	bf9b      	ittet	ls
 8002a98:	2300      	movls	r3, #0
 8002a9a:	4614      	movls	r4, r2
      ep->xfer_len-=len; 
 8002a9c:	1ad2      	subhi	r2, r2, r3
      ep->xfer_len =0;
 8002a9e:	61b3      	strls	r3, [r6, #24]
      ep->xfer_len-=len; 
 8002aa0:	bf88      	it	hi
 8002aa2:	61b2      	strhi	r2, [r6, #24]
 8002aa4:	b2a3      	uxth	r3, r4
    if (ep->doublebuffer == 0) 
 8002aa6:	bb10      	cbnz	r0, 8002aee <USB_EPStartXfer+0x6e>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, len);
 8002aa8:	88b2      	ldrh	r2, [r6, #4]
 8002aaa:	6971      	ldr	r1, [r6, #20]
 8002aac:	4628      	mov	r0, r5
 8002aae:	f7ff ffd5 	bl	8002a5c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8002ab2:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8002ab6:	7832      	ldrb	r2, [r6, #0]
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	3302      	adds	r3, #2
 8002abc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8002ac0:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8002ac4:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8002ac8:	7832      	ldrb	r2, [r6, #0]
 8002aca:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8002ace:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ad2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ad6:	041b      	lsls	r3, r3, #16
 8002ad8:	0c1b      	lsrs	r3, r3, #16
 8002ada:	f083 0330 	eor.w	r3, r3, #48	; 0x30
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002ade:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ae2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ae6:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
}
 8002aea:	2000      	movs	r0, #0
 8002aec:	bd70      	pop	{r4, r5, r6, pc}
      if (PCD_GET_ENDPOINT(USBx, ep->num)& USB_EP_DTOG_TX)
 8002aee:	7832      	ldrb	r2, [r6, #0]
 8002af0:	f835 1022 	ldrh.w	r1, [r5, r2, lsl #2]
 8002af4:	00d2      	lsls	r2, r2, #3
 8002af6:	f011 0f40 	tst.w	r1, #64	; 0x40
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002afa:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8002afe:	b289      	uxth	r1, r1
      if (PCD_GET_ENDPOINT(USBx, ep->num)& USB_EP_DTOG_TX)
 8002b00:	d01a      	beq.n	8002b38 <USB_EPStartXfer+0xb8>
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8002b02:	3102      	adds	r1, #2
 8002b04:	440a      	add	r2, r1
 8002b06:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 8002b0a:	f8c2 4400 	str.w	r4, [r2, #1024]	; 0x400
        pmabuffer = ep->pmaaddr1;
 8002b0e:	8932      	ldrh	r2, [r6, #8]
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, len);
 8002b10:	6971      	ldr	r1, [r6, #20]
 8002b12:	4628      	mov	r0, r5
 8002b14:	f7ff ffa2 	bl	8002a5c <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8002b18:	7873      	ldrb	r3, [r6, #1]
 8002b1a:	7832      	ldrb	r2, [r6, #0]
 8002b1c:	b99b      	cbnz	r3, 8002b46 <USB_EPStartXfer+0xc6>
 8002b1e:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8002b22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b26:	051b      	lsls	r3, r3, #20
 8002b28:	0d1b      	lsrs	r3, r3, #20
 8002b2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b2e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002b32:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 8002b36:	e7c7      	b.n	8002ac8 <USB_EPStartXfer+0x48>
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8002b38:	440a      	add	r2, r1
 8002b3a:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 8002b3e:	f8c2 4404 	str.w	r4, [r2, #1028]	; 0x404
        pmabuffer = ep->pmaaddr0;
 8002b42:	88f2      	ldrh	r2, [r6, #6]
 8002b44:	e7e4      	b.n	8002b10 <USB_EPStartXfer+0x90>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d1be      	bne.n	8002ac8 <USB_EPStartXfer+0x48>
 8002b4a:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8002b4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b52:	051b      	lsls	r3, r3, #20
 8002b54:	0d1b      	lsrs	r3, r3, #20
 8002b56:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b5e:	e7e8      	b.n	8002b32 <USB_EPStartXfer+0xb2>
    if (ep->xfer_len > ep->maxpacket)
 8002b60:	429a      	cmp	r2, r3
      ep->xfer_len =0;
 8002b62:	bf93      	iteet	ls
 8002b64:	2300      	movls	r3, #0
      ep->xfer_len-=len; 
 8002b66:	1ad2      	subhi	r2, r2, r3
 8002b68:	61b2      	strhi	r2, [r6, #24]
      ep->xfer_len =0;
 8002b6a:	61b3      	strls	r3, [r6, #24]
 8002b6c:	bf98      	it	ls
 8002b6e:	4613      	movls	r3, r2
 8002b70:	7832      	ldrb	r2, [r6, #0]
    if (ep->doublebuffer == 0) 
 8002b72:	bb70      	cbnz	r0, 8002bd2 <USB_EPStartXfer+0x152>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8002b74:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8002b78:	2b3e      	cmp	r3, #62	; 0x3e
 8002b7a:	b289      	uxth	r1, r1
 8002b7c:	f101 0106 	add.w	r1, r1, #6
 8002b80:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8002b84:	f505 6080 	add.w	r0, r5, #1024	; 0x400
 8002b88:	d918      	bls.n	8002bbc <USB_EPStartXfer+0x13c>
 8002b8a:	f3c3 124f 	ubfx	r2, r3, #5, #16
 8002b8e:	06db      	lsls	r3, r3, #27
 8002b90:	bf04      	itt	eq
 8002b92:	f102 33ff 	addeq.w	r3, r2, #4294967295
 8002b96:	b29a      	uxtheq	r2, r3
 8002b98:	4b38      	ldr	r3, [pc, #224]	; (8002c7c <USB_EPStartXfer+0x1fc>)
 8002b9a:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 8002b9e:	b29b      	uxth	r3, r3
 8002ba0:	f840 3011 	str.w	r3, [r0, r1, lsl #1]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002ba4:	7832      	ldrb	r2, [r6, #0]
 8002ba6:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8002baa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002bae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bb2:	041b      	lsls	r3, r3, #16
 8002bb4:	0c1b      	lsrs	r3, r3, #16
 8002bb6:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002bba:	e790      	b.n	8002ade <USB_EPStartXfer+0x5e>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8002bbc:	f3c3 024f 	ubfx	r2, r3, #1, #16
 8002bc0:	07dc      	lsls	r4, r3, #31
 8002bc2:	bf44      	itt	mi
 8002bc4:	3201      	addmi	r2, #1
 8002bc6:	b292      	uxthmi	r2, r2
 8002bc8:	0292      	lsls	r2, r2, #10
 8002bca:	b292      	uxth	r2, r2
 8002bcc:	f840 2011 	str.w	r2, [r0, r1, lsl #1]
 8002bd0:	e7e8      	b.n	8002ba4 <USB_EPStartXfer+0x124>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8002bd2:	b9b9      	cbnz	r1, 8002c04 <USB_EPStartXfer+0x184>
 8002bd4:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8002bd8:	2b3e      	cmp	r3, #62	; 0x3e
 8002bda:	b289      	uxth	r1, r1
 8002bdc:	f101 0102 	add.w	r1, r1, #2
 8002be0:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8002be4:	f505 6480 	add.w	r4, r5, #1024	; 0x400
 8002be8:	d928      	bls.n	8002c3c <USB_EPStartXfer+0x1bc>
 8002bea:	f3c3 104f 	ubfx	r0, r3, #5, #16
 8002bee:	06da      	lsls	r2, r3, #27
 8002bf0:	bf04      	itt	eq
 8002bf2:	f100 32ff 	addeq.w	r2, r0, #4294967295
 8002bf6:	b290      	uxtheq	r0, r2
 8002bf8:	4a20      	ldr	r2, [pc, #128]	; (8002c7c <USB_EPStartXfer+0x1fc>)
 8002bfa:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 8002bfe:	b292      	uxth	r2, r2
 8002c00:	f844 2011 	str.w	r2, [r4, r1, lsl #1]
 8002c04:	7872      	ldrb	r2, [r6, #1]
 8002c06:	7831      	ldrb	r1, [r6, #0]
 8002c08:	bb5a      	cbnz	r2, 8002c62 <USB_EPStartXfer+0x1e2>
 8002c0a:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8002c0e:	2b3e      	cmp	r3, #62	; 0x3e
 8002c10:	b292      	uxth	r2, r2
 8002c12:	f102 0206 	add.w	r2, r2, #6
 8002c16:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8002c1a:	f505 6080 	add.w	r0, r5, #1024	; 0x400
 8002c1e:	d915      	bls.n	8002c4c <USB_EPStartXfer+0x1cc>
 8002c20:	f3c3 114f 	ubfx	r1, r3, #5, #16
 8002c24:	06dc      	lsls	r4, r3, #27
 8002c26:	bf04      	itt	eq
 8002c28:	f101 33ff 	addeq.w	r3, r1, #4294967295
 8002c2c:	b299      	uxtheq	r1, r3
 8002c2e:	4b13      	ldr	r3, [pc, #76]	; (8002c7c <USB_EPStartXfer+0x1fc>)
 8002c30:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8002c34:	b29b      	uxth	r3, r3
 8002c36:	f840 3012 	str.w	r3, [r0, r2, lsl #1]
 8002c3a:	e7b3      	b.n	8002ba4 <USB_EPStartXfer+0x124>
 8002c3c:	f3c3 024f 	ubfx	r2, r3, #1, #16
 8002c40:	07d8      	lsls	r0, r3, #31
 8002c42:	bf44      	itt	mi
 8002c44:	3201      	addmi	r2, #1
 8002c46:	b292      	uxthmi	r2, r2
 8002c48:	0292      	lsls	r2, r2, #10
 8002c4a:	e7d8      	b.n	8002bfe <USB_EPStartXfer+0x17e>
 8002c4c:	f3c3 014f 	ubfx	r1, r3, #1, #16
 8002c50:	07db      	lsls	r3, r3, #31
 8002c52:	bf44      	itt	mi
 8002c54:	3101      	addmi	r1, #1
 8002c56:	b289      	uxthmi	r1, r1
 8002c58:	0289      	lsls	r1, r1, #10
 8002c5a:	b289      	uxth	r1, r1
 8002c5c:	f840 1012 	str.w	r1, [r0, r2, lsl #1]
 8002c60:	e7a0      	b.n	8002ba4 <USB_EPStartXfer+0x124>
 8002c62:	2a01      	cmp	r2, #1
 8002c64:	d19e      	bne.n	8002ba4 <USB_EPStartXfer+0x124>
 8002c66:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8002c6a:	b292      	uxth	r2, r2
 8002c6c:	3202      	adds	r2, #2
 8002c6e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8002c72:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 8002c76:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
 8002c7a:	e793      	b.n	8002ba4 <USB_EPStartXfer+0x124>
 8002c7c:	ffff8000 	.word	0xffff8000

08002c80 <USB_ReadPMA>:
  * @param  wPMABufAddr : address into PMA.
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8002c80:	b510      	push	{r4, lr}
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
  uint32_t index = 0;
  uint32_t *pdwVal = NULL;
  
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
  for (index = nbytes; index != 0; index--)
 8002c82:	2400      	movs	r4, #0
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
 8002c84:	3301      	adds	r3, #1
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8002c86:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
 8002c8a:	105b      	asrs	r3, r3, #1
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8002c8c:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (index = nbytes; index != 0; index--)
 8002c90:	42a3      	cmp	r3, r4
 8002c92:	d100      	bne.n	8002c96 <USB_ReadPMA+0x16>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
    pbUsrBuf++;
  }
}
 8002c94:	bd10      	pop	{r4, pc}
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8002c96:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8002c9a:	f821 0014 	strh.w	r0, [r1, r4, lsl #1]
 8002c9e:	3401      	adds	r4, #1
 8002ca0:	e7f6      	b.n	8002c90 <USB_ReadPMA+0x10>
	...

08002ca4 <USBD_HID_GetCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_HID_CfgDesc);
 8002ca4:	2322      	movs	r3, #34	; 0x22
 8002ca6:	8003      	strh	r3, [r0, #0]
  return USBD_HID_CfgDesc;
}
 8002ca8:	4800      	ldr	r0, [pc, #0]	; (8002cac <USBD_HID_GetCfgDesc+0x8>)
 8002caa:	4770      	bx	lr
 8002cac:	20000084 	.word	0x20000084

08002cb0 <USBD_HID_DataIn>:
                              uint8_t epnum)
{
  
  /* Ensure that the FIFO is empty before a new transfer, this condition could 
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8002cb0:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
 8002cb4:	2000      	movs	r0, #0
 8002cb6:	7318      	strb	r0, [r3, #12]
  return USBD_OK;
}
 8002cb8:	4770      	bx	lr
	...

08002cbc <USBD_HID_GetDeviceQualifierDesc>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc (uint16_t *length)
{
  *length = sizeof (USBD_HID_DeviceQualifierDesc);
 8002cbc:	230a      	movs	r3, #10
 8002cbe:	8003      	strh	r3, [r0, #0]
  return USBD_HID_DeviceQualifierDesc;
}
 8002cc0:	4800      	ldr	r0, [pc, #0]	; (8002cc4 <USBD_HID_GetDeviceQualifierDesc+0x8>)
 8002cc2:	4770      	bx	lr
 8002cc4:	200000b4 	.word	0x200000b4

08002cc8 <USBD_HID_Setup>:
{
 8002cc8:	b538      	push	{r3, r4, r5, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002cca:	780c      	ldrb	r4, [r1, #0]
{
 8002ccc:	4605      	mov	r5, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002cce:	f014 0460 	ands.w	r4, r4, #96	; 0x60
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef*) pdev->pClassData;
 8002cd2:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8002cd6:	d023      	beq.n	8002d20 <USBD_HID_Setup+0x58>
 8002cd8:	2c20      	cmp	r4, #32
 8002cda:	d10c      	bne.n	8002cf6 <USBD_HID_Setup+0x2e>
    switch (req->bRequest)
 8002cdc:	784a      	ldrb	r2, [r1, #1]
 8002cde:	3a02      	subs	r2, #2
 8002ce0:	2a09      	cmp	r2, #9
 8002ce2:	d817      	bhi.n	8002d14 <USBD_HID_Setup+0x4c>
 8002ce4:	e8df f002 	tbb	[pc, r2]
 8002ce8:	16160913 	.word	0x16160913
 8002cec:	16161616 	.word	0x16161616
 8002cf0:	050f      	.short	0x050f
      hhid->Protocol = (uint8_t)(req->wValue);
 8002cf2:	788a      	ldrb	r2, [r1, #2]
 8002cf4:	601a      	str	r2, [r3, #0]
  return USBD_OK;
 8002cf6:	2400      	movs	r4, #0
 8002cf8:	e010      	b.n	8002d1c <USBD_HID_Setup+0x54>
      USBD_CtlSendData (pdev, 
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	4619      	mov	r1, r3
      USBD_CtlSendData (pdev, 
 8002cfe:	4628      	mov	r0, r5
 8002d00:	f000 fb46 	bl	8003390 <USBD_CtlSendData>
 8002d04:	e7f7      	b.n	8002cf6 <USBD_HID_Setup+0x2e>
      hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8002d06:	884a      	ldrh	r2, [r1, #2]
 8002d08:	0a12      	lsrs	r2, r2, #8
 8002d0a:	605a      	str	r2, [r3, #4]
 8002d0c:	e7f3      	b.n	8002cf6 <USBD_HID_Setup+0x2e>
      USBD_CtlSendData (pdev, 
 8002d0e:	2201      	movs	r2, #1
 8002d10:	1d19      	adds	r1, r3, #4
 8002d12:	e7f4      	b.n	8002cfe <USBD_HID_Setup+0x36>
      USBD_CtlError (pdev, req);
 8002d14:	4628      	mov	r0, r5
 8002d16:	f000 fb14 	bl	8003342 <USBD_CtlError>
      return USBD_FAIL; 
 8002d1a:	2402      	movs	r4, #2
}
 8002d1c:	4620      	mov	r0, r4
 8002d1e:	bd38      	pop	{r3, r4, r5, pc}
    switch (req->bRequest)
 8002d20:	784a      	ldrb	r2, [r1, #1]
 8002d22:	2a0a      	cmp	r2, #10
 8002d24:	d018      	beq.n	8002d58 <USBD_HID_Setup+0x90>
 8002d26:	2a0b      	cmp	r2, #11
 8002d28:	d01c      	beq.n	8002d64 <USBD_HID_Setup+0x9c>
 8002d2a:	2a06      	cmp	r2, #6
 8002d2c:	d1f6      	bne.n	8002d1c <USBD_HID_Setup+0x54>
      if( req->wValue >> 8 == HID_REPORT_DESC)
 8002d2e:	884b      	ldrh	r3, [r1, #2]
 8002d30:	0a1b      	lsrs	r3, r3, #8
 8002d32:	2b22      	cmp	r3, #34	; 0x22
 8002d34:	d105      	bne.n	8002d42 <USBD_HID_Setup+0x7a>
        len = MIN(HID_MOUSE_REPORT_DESC_SIZE , req->wLength);
 8002d36:	88ca      	ldrh	r2, [r1, #6]
        pbuf = HID_MOUSE_ReportDesc;
 8002d38:	490c      	ldr	r1, [pc, #48]	; (8002d6c <USBD_HID_Setup+0xa4>)
        len = MIN(HID_MOUSE_REPORT_DESC_SIZE , req->wLength);
 8002d3a:	2a4a      	cmp	r2, #74	; 0x4a
 8002d3c:	bf28      	it	cs
 8002d3e:	224a      	movcs	r2, #74	; 0x4a
 8002d40:	e7dd      	b.n	8002cfe <USBD_HID_Setup+0x36>
      else if( req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 8002d42:	2b21      	cmp	r3, #33	; 0x21
 8002d44:	d105      	bne.n	8002d52 <USBD_HID_Setup+0x8a>
        len = MIN(USB_HID_DESC_SIZ , req->wLength);
 8002d46:	88ca      	ldrh	r2, [r1, #6]
        pbuf = USBD_HID_Desc;   
 8002d48:	4909      	ldr	r1, [pc, #36]	; (8002d70 <USBD_HID_Setup+0xa8>)
        len = MIN(USB_HID_DESC_SIZ , req->wLength);
 8002d4a:	2a09      	cmp	r2, #9
 8002d4c:	bf28      	it	cs
 8002d4e:	2209      	movcs	r2, #9
 8002d50:	e7d5      	b.n	8002cfe <USBD_HID_Setup+0x36>
  uint8_t  *pbuf = NULL;
 8002d52:	4621      	mov	r1, r4
  uint16_t len = 0;
 8002d54:	4622      	mov	r2, r4
 8002d56:	e7d2      	b.n	8002cfe <USBD_HID_Setup+0x36>
      USBD_CtlSendData (pdev,
 8002d58:	2201      	movs	r2, #1
 8002d5a:	f103 0108 	add.w	r1, r3, #8
 8002d5e:	f000 fb17 	bl	8003390 <USBD_CtlSendData>
      break;
 8002d62:	e7db      	b.n	8002d1c <USBD_HID_Setup+0x54>
      hhid->AltSetting = (uint8_t)(req->wValue);
 8002d64:	788a      	ldrb	r2, [r1, #2]
 8002d66:	609a      	str	r2, [r3, #8]
      break;
 8002d68:	e7d8      	b.n	8002d1c <USBD_HID_Setup+0x54>
 8002d6a:	bf00      	nop
 8002d6c:	20000000 	.word	0x20000000
 8002d70:	200000a8 	.word	0x200000a8

08002d74 <USBD_HID_DeInit>:
{
 8002d74:	b510      	push	{r4, lr}
 8002d76:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev,
 8002d78:	2181      	movs	r1, #129	; 0x81
 8002d7a:	f000 ffa9 	bl	8003cd0 <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 8002d7e:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 8002d82:	b120      	cbz	r0, 8002d8e <USBD_HID_DeInit+0x1a>
    USBD_free(pdev->pClassData);
 8002d84:	f001 f80c 	bl	8003da0 <USBD_static_free>
    pdev->pClassData = NULL;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
}
 8002d8e:	2000      	movs	r0, #0
 8002d90:	bd10      	pop	{r4, pc}

08002d92 <USBD_HID_Init>:
{
 8002d92:	b510      	push	{r4, lr}
  USBD_LL_OpenEP(pdev,
 8002d94:	2304      	movs	r3, #4
 8002d96:	2203      	movs	r2, #3
 8002d98:	2181      	movs	r1, #129	; 0x81
{
 8002d9a:	4604      	mov	r4, r0
  USBD_LL_OpenEP(pdev,
 8002d9c:	f000 ff88 	bl	8003cb0 <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof (USBD_HID_HandleTypeDef));
 8002da0:	2010      	movs	r0, #16
 8002da2:	f000 fff9 	bl	8003d98 <USBD_static_malloc>
 8002da6:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
  if(pdev->pClassData == NULL)
 8002daa:	b118      	cbz	r0, 8002db4 <USBD_HID_Init+0x22>
    ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8002dac:	2300      	movs	r3, #0
 8002dae:	7303      	strb	r3, [r0, #12]
  uint8_t ret = 0;
 8002db0:	4618      	mov	r0, r3
 8002db2:	bd10      	pop	{r4, pc}
    ret = 1; 
 8002db4:	2001      	movs	r0, #1
}
 8002db6:	bd10      	pop	{r4, pc}

08002db8 <USBD_HID_SendReport>:
{
 8002db8:	b510      	push	{r4, lr}
 8002dba:	4613      	mov	r3, r2
  if (pdev->dev_state == USBD_STATE_CONFIGURED )
 8002dbc:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002dc0:	2a03      	cmp	r2, #3
 8002dc2:	d109      	bne.n	8002dd8 <USBD_HID_SendReport+0x20>
  USBD_HID_HandleTypeDef     *hhid = (USBD_HID_HandleTypeDef*)pdev->pClassData;
 8002dc4:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
    if(hhid->state == HID_IDLE)
 8002dc8:	7b22      	ldrb	r2, [r4, #12]
 8002dca:	b92a      	cbnz	r2, 8002dd8 <USBD_HID_SendReport+0x20>
      hhid->state = HID_BUSY;
 8002dcc:	2201      	movs	r2, #1
 8002dce:	7322      	strb	r2, [r4, #12]
      USBD_LL_Transmit (pdev, 
 8002dd0:	460a      	mov	r2, r1
 8002dd2:	2181      	movs	r1, #129	; 0x81
 8002dd4:	f000 ffc4 	bl	8003d60 <USBD_LL_Transmit>
}
 8002dd8:	2000      	movs	r0, #0
 8002dda:	bd10      	pop	{r4, pc}

08002ddc <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8002ddc:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8002dde:	b180      	cbz	r0, 8002e02 <USBD_Init+0x26>
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8002de0:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002de4:	b113      	cbz	r3, 8002dec <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8002de6:	2300      	movs	r3, #0
 8002de8:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8002dec:	b109      	cbz	r1, 8002df2 <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8002dee:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8002df2:	2301      	movs	r3, #1
  pdev->id = id;
 8002df4:	7002      	strb	r2, [r0, #0]
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8002df6:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8002dfa:	f000 ff13 	bl	8003c24 <USBD_LL_Init>
  
  return USBD_OK; 
 8002dfe:	2000      	movs	r0, #0
 8002e00:	bd08      	pop	{r3, pc}
    return USBD_FAIL; 
 8002e02:	2002      	movs	r0, #2
}
 8002e04:	bd08      	pop	{r3, pc}

08002e06 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 8002e06:	b119      	cbz	r1, 8002e10 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8002e08:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    status = USBD_OK;
 8002e0c:	2000      	movs	r0, #0
 8002e0e:	4770      	bx	lr
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 8002e10:	2002      	movs	r0, #2
  }
  
  return status;
}
 8002e12:	4770      	bx	lr

08002e14 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8002e14:	b508      	push	{r3, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 8002e16:	f000 ff3d 	bl	8003c94 <USBD_LL_Start>
  
  return USBD_OK;  
}
 8002e1a:	2000      	movs	r0, #0
 8002e1c:	bd08      	pop	{r3, pc}

08002e1e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8002e1e:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 8002e20:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002e24:	b90b      	cbnz	r3, 8002e2a <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8002e26:	2002      	movs	r0, #2
 8002e28:	bd08      	pop	{r3, pc}
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4798      	blx	r3
 8002e2e:	2800      	cmp	r0, #0
 8002e30:	d1f9      	bne.n	8002e26 <USBD_SetClassConfig+0x8>
    {
      ret = USBD_OK;
    }
  }
  return ret; 
}
 8002e32:	bd08      	pop	{r3, pc}

08002e34 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8002e34:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 8002e36:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	4798      	blx	r3
  return USBD_OK;
}
 8002e3e:	2000      	movs	r0, #0
 8002e40:	bd08      	pop	{r3, pc}

08002e42 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8002e42:	b538      	push	{r3, r4, r5, lr}

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8002e44:	f500 7502 	add.w	r5, r0, #520	; 0x208
{
 8002e48:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8002e4a:	4628      	mov	r0, r5
 8002e4c:	f000 fa65 	bl	800331a <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 8002e50:	2301      	movs	r3, #1
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
 8002e52:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
  pdev->ep0_state = USBD_EP0_SETUP;
 8002e56:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 8002e5a:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 8002e5e:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  switch (pdev->request.bmRequest & 0x1F) 
 8002e62:	f001 031f 	and.w	r3, r1, #31
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d00e      	beq.n	8002e88 <USBD_LL_SetupStage+0x46>
 8002e6a:	d307      	bcc.n	8002e7c <USBD_LL_SetupStage+0x3a>
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d010      	beq.n	8002e92 <USBD_LL_SetupStage+0x50>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
    break;
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 8002e70:	f001 0180 	and.w	r1, r1, #128	; 0x80
 8002e74:	4620      	mov	r0, r4
 8002e76:	f000 ff39 	bl	8003cec <USBD_LL_StallEP>
    break;
 8002e7a:	e003      	b.n	8002e84 <USBD_LL_SetupStage+0x42>
    USBD_StdDevReq (pdev, &pdev->request);
 8002e7c:	4629      	mov	r1, r5
 8002e7e:	4620      	mov	r0, r4
 8002e80:	f000 f8d6 	bl	8003030 <USBD_StdDevReq>
  }  
  return USBD_OK;  
}
 8002e84:	2000      	movs	r0, #0
 8002e86:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 8002e88:	4629      	mov	r1, r5
 8002e8a:	4620      	mov	r0, r4
 8002e8c:	f000 f9ca 	bl	8003224 <USBD_StdItfReq>
    break;
 8002e90:	e7f8      	b.n	8002e84 <USBD_LL_SetupStage+0x42>
    USBD_StdEPReq(pdev, &pdev->request);   
 8002e92:	4629      	mov	r1, r5
 8002e94:	4620      	mov	r0, r4
 8002e96:	f000 f9dd 	bl	8003254 <USBD_StdEPReq>
    break;
 8002e9a:	e7f3      	b.n	8002e84 <USBD_LL_SetupStage+0x42>

08002e9c <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 8002e9c:	b538      	push	{r3, r4, r5, lr}
 8002e9e:	4604      	mov	r4, r0
 8002ea0:	4615      	mov	r5, r2
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 8002ea2:	bb11      	cbnz	r1, 8002eea <USBD_LL_DataOutStage+0x4e>
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8002ea4:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 8002ea8:	2b03      	cmp	r3, #3
 8002eaa:	d10f      	bne.n	8002ecc <USBD_LL_DataOutStage+0x30>
    {
      if(pep->rem_length > pep->maxpacket)
 8002eac:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 8002eb0:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d90b      	bls.n	8002ed0 <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -=  pep->maxpacket;
 8002eb8:	1a9b      	subs	r3, r3, r2
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	bf28      	it	cs
 8002ebe:	461a      	movcs	r2, r3
        pep->rem_length -=  pep->maxpacket;
 8002ec0:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
        USBD_CtlContinueRx (pdev, 
 8002ec4:	b292      	uxth	r2, r2
 8002ec6:	4629      	mov	r1, r5
 8002ec8:	f000 fa77 	bl	80033ba <USBD_CtlContinueRx>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
  }  
  return USBD_OK;
}
 8002ecc:	2000      	movs	r0, #0
 8002ece:	bd38      	pop	{r3, r4, r5, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8002ed0:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002ed4:	691b      	ldr	r3, [r3, #16]
 8002ed6:	b123      	cbz	r3, 8002ee2 <USBD_LL_DataOutStage+0x46>
 8002ed8:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002edc:	2a03      	cmp	r2, #3
 8002ede:	d100      	bne.n	8002ee2 <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev); 
 8002ee0:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8002ee2:	4620      	mov	r0, r4
 8002ee4:	f000 fa71 	bl	80033ca <USBD_CtlSendStatus>
 8002ee8:	e7f0      	b.n	8002ecc <USBD_LL_DataOutStage+0x30>
  else if((pdev->pClass->DataOut != NULL)&&
 8002eea:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002eee:	699b      	ldr	r3, [r3, #24]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d0eb      	beq.n	8002ecc <USBD_LL_DataOutStage+0x30>
 8002ef4:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002ef8:	2a03      	cmp	r2, #3
 8002efa:	d1e7      	bne.n	8002ecc <USBD_LL_DataOutStage+0x30>
    pdev->pClass->DataOut(pdev, epnum); 
 8002efc:	4798      	blx	r3
 8002efe:	e7e5      	b.n	8002ecc <USBD_LL_DataOutStage+0x30>

08002f00 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 8002f00:	b570      	push	{r4, r5, r6, lr}
 8002f02:	4613      	mov	r3, r2
 8002f04:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 8002f06:	460e      	mov	r6, r1
 8002f08:	2900      	cmp	r1, #0
 8002f0a:	d13d      	bne.n	8002f88 <USBD_LL_DataInStage+0x88>
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8002f0c:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 8002f10:	2a02      	cmp	r2, #2
 8002f12:	d10f      	bne.n	8002f34 <USBD_LL_DataInStage+0x34>
    {
      if(pep->rem_length > pep->maxpacket)
 8002f14:	69c5      	ldr	r5, [r0, #28]
 8002f16:	6a02      	ldr	r2, [r0, #32]
 8002f18:	4295      	cmp	r5, r2
 8002f1a:	d914      	bls.n	8002f46 <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -=  pep->maxpacket;
 8002f1c:	1aaa      	subs	r2, r5, r2
 8002f1e:	61c2      	str	r2, [r0, #28]
        
        USBD_CtlContinueSendData (pdev, 
 8002f20:	4619      	mov	r1, r3
 8002f22:	b292      	uxth	r2, r2
 8002f24:	f000 fa41 	bl	80033aa <USBD_CtlContinueSendData>
                                  pdata, 
                                  pep->rem_length);
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8002f28:	4633      	mov	r3, r6
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
          pdev->ep0_data_len = 0;
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	4620      	mov	r0, r4
 8002f30:	f000 ff24 	bl	8003d7c <USBD_LL_PrepareReceive>
          }          
          USBD_CtlReceiveStatus(pdev);
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 8002f34:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d102      	bne.n	8002f42 <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
  }  
  return USBD_OK;
}
 8002f42:	2000      	movs	r0, #0
 8002f44:	bd70      	pop	{r4, r5, r6, pc}
        if((pep->total_length % pep->maxpacket == 0) &&
 8002f46:	6983      	ldr	r3, [r0, #24]
 8002f48:	fbb3 f5f2 	udiv	r5, r3, r2
 8002f4c:	fb02 3515 	mls	r5, r2, r5, r3
 8002f50:	b965      	cbnz	r5, 8002f6c <USBD_LL_DataInStage+0x6c>
 8002f52:	429a      	cmp	r2, r3
 8002f54:	d80a      	bhi.n	8002f6c <USBD_LL_DataInStage+0x6c>
           (pep->total_length >= pep->maxpacket) &&
 8002f56:	f8d0 21f8 	ldr.w	r2, [r0, #504]	; 0x1f8
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d206      	bcs.n	8002f6c <USBD_LL_DataInStage+0x6c>
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8002f5e:	462a      	mov	r2, r5
 8002f60:	f000 fa23 	bl	80033aa <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 8002f64:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
        USBD_LL_PrepareReceive (pdev,
 8002f68:	462b      	mov	r3, r5
 8002f6a:	e7de      	b.n	8002f2a <USBD_LL_DataInStage+0x2a>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8002f6c:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	b12b      	cbz	r3, 8002f80 <USBD_LL_DataInStage+0x80>
 8002f74:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
 8002f78:	2a03      	cmp	r2, #3
 8002f7a:	d101      	bne.n	8002f80 <USBD_LL_DataInStage+0x80>
            pdev->pClass->EP0_TxSent(pdev); 
 8002f7c:	4620      	mov	r0, r4
 8002f7e:	4798      	blx	r3
          USBD_CtlReceiveStatus(pdev);
 8002f80:	4620      	mov	r0, r4
 8002f82:	f000 fa2d 	bl	80033e0 <USBD_CtlReceiveStatus>
 8002f86:	e7d5      	b.n	8002f34 <USBD_LL_DataInStage+0x34>
  else if((pdev->pClass->DataIn != NULL)&& 
 8002f88:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002f8c:	695b      	ldr	r3, [r3, #20]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d0d7      	beq.n	8002f42 <USBD_LL_DataInStage+0x42>
 8002f92:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002f96:	2a03      	cmp	r2, #3
 8002f98:	d1d3      	bne.n	8002f42 <USBD_LL_DataInStage+0x42>
    pdev->pClass->DataIn(pdev, epnum); 
 8002f9a:	4798      	blx	r3
 8002f9c:	e7d1      	b.n	8002f42 <USBD_LL_DataInStage+0x42>

08002f9e <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8002f9e:	2200      	movs	r2, #0
{
 8002fa0:	b538      	push	{r3, r4, r5, lr}
 8002fa2:	4604      	mov	r4, r0
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8002fa4:	2540      	movs	r5, #64	; 0x40
  USBD_LL_OpenEP(pdev,
 8002fa6:	4611      	mov	r1, r2
 8002fa8:	2340      	movs	r3, #64	; 0x40
 8002faa:	f000 fe81 	bl	8003cb0 <USBD_LL_OpenEP>
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8002fae:	462b      	mov	r3, r5
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8002fb0:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  USBD_LL_OpenEP(pdev,
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	2180      	movs	r1, #128	; 0x80
 8002fb8:	4620      	mov	r0, r4
 8002fba:	f000 fe79 	bl	8003cb0 <USBD_LL_OpenEP>
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 8002fc4:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8002fc8:	6225      	str	r5, [r4, #32]
  if (pdev->pClassData) 
 8002fca:	b12b      	cbz	r3, 8002fd8 <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8002fcc:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8002fd0:	7921      	ldrb	r1, [r4, #4]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	4620      	mov	r0, r4
 8002fd6:	4798      	blx	r3
 
  
  return USBD_OK;
}
 8002fd8:	2000      	movs	r0, #0
 8002fda:	bd38      	pop	{r3, r4, r5, pc}

08002fdc <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8002fdc:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 8002fde:	2000      	movs	r0, #0
 8002fe0:	4770      	bx	lr

08002fe2 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8002fe2:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002fe6:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8002fea:	2304      	movs	r3, #4
 8002fec:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 8002ff0:	2000      	movs	r0, #0
 8002ff2:	4770      	bx	lr

08002ff4 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;  
 8002ff4:	f890 31fd 	ldrb.w	r3, [r0, #509]	; 0x1fd
 8002ff8:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 8002ffc:	2000      	movs	r0, #0
 8002ffe:	4770      	bx	lr

08003000 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8003000:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8003002:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8003006:	2a03      	cmp	r2, #3
 8003008:	d104      	bne.n	8003014 <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 800300a:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800300e:	69db      	ldr	r3, [r3, #28]
 8003010:	b103      	cbz	r3, 8003014 <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 8003012:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 8003014:	2000      	movs	r0, #0
 8003016:	bd08      	pop	{r3, pc}

08003018 <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 8003018:	b510      	push	{r4, lr}
 800301a:	4604      	mov	r4, r0
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80);
 800301c:	2180      	movs	r1, #128	; 0x80
 800301e:	f000 fe65 	bl	8003cec <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 8003022:	4620      	mov	r0, r4
}
 8003024:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0);
 8003028:	2100      	movs	r1, #0
 800302a:	f000 be5f 	b.w	8003cec <USBD_LL_StallEP>
	...

08003030 <USBD_StdDevReq>:
{
 8003030:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bRequest) 
 8003032:	784b      	ldrb	r3, [r1, #1]
{
 8003034:	4604      	mov	r4, r0
 8003036:	460d      	mov	r5, r1
  switch (req->bRequest) 
 8003038:	2b09      	cmp	r3, #9
 800303a:	d879      	bhi.n	8003130 <USBD_StdDevReq+0x100>
 800303c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8003040:	00e500c9 	.word	0x00e500c9
 8003044:	00d90078 	.word	0x00d90078
 8003048:	006d0078 	.word	0x006d0078
 800304c:	0078000a 	.word	0x0078000a
 8003050:	008d00b9 	.word	0x008d00b9
  switch (req->wValue >> 8)
 8003054:	884b      	ldrh	r3, [r1, #2]
 8003056:	0a1a      	lsrs	r2, r3, #8
 8003058:	3a01      	subs	r2, #1
 800305a:	2a06      	cmp	r2, #6
 800305c:	d868      	bhi.n	8003130 <USBD_StdDevReq+0x100>
 800305e:	e8df f002 	tbb	[pc, r2]
 8003062:	1c04      	.short	0x1c04
 8003064:	49676729 	.word	0x49676729
 8003068:	52          	.byte	0x52
 8003069:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800306a:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 800306e:	681b      	ldr	r3, [r3, #0]
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 8003070:	f10d 0106 	add.w	r1, sp, #6
 8003074:	7c20      	ldrb	r0, [r4, #16]
 8003076:	4798      	blx	r3
  if((len != 0)&& (req->wLength != 0))
 8003078:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800307c:	2a00      	cmp	r2, #0
 800307e:	d067      	beq.n	8003150 <USBD_StdDevReq+0x120>
 8003080:	88eb      	ldrh	r3, [r5, #6]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d064      	beq.n	8003150 <USBD_StdDevReq+0x120>
    len = MIN(len , req->wLength);
 8003086:	429a      	cmp	r2, r3
 8003088:	bf28      	it	cs
 800308a:	461a      	movcs	r2, r3
    USBD_CtlSendData (pdev, 
 800308c:	4601      	mov	r1, r0
    len = MIN(len , req->wLength);
 800308e:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, 
 8003092:	4620      	mov	r0, r4
 8003094:	f000 f97c 	bl	8003390 <USBD_CtlSendData>
 8003098:	e05a      	b.n	8003150 <USBD_StdDevReq+0x120>
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 800309a:	7c02      	ldrb	r2, [r0, #16]
 800309c:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80030a0:	b932      	cbnz	r2, 80030b0 <USBD_StdDevReq+0x80>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 80030a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80030a4:	f10d 0006 	add.w	r0, sp, #6
 80030a8:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80030aa:	2302      	movs	r3, #2
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80030ac:	7043      	strb	r3, [r0, #1]
 80030ae:	e7e3      	b.n	8003078 <USBD_StdDevReq+0x48>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80030b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b2:	e7f7      	b.n	80030a4 <USBD_StdDevReq+0x74>
    switch ((uint8_t)(req->wValue))
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	2b05      	cmp	r3, #5
 80030b8:	d83a      	bhi.n	8003130 <USBD_StdDevReq+0x100>
 80030ba:	e8df f003 	tbb	[pc, r3]
 80030be:	0703      	.short	0x0703
 80030c0:	17130f0b 	.word	0x17130f0b
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 80030c4:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	e7d1      	b.n	8003070 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80030cc:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	e7cd      	b.n	8003070 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80030d4:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80030d8:	68db      	ldr	r3, [r3, #12]
 80030da:	e7c9      	b.n	8003070 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80030dc:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80030e0:	691b      	ldr	r3, [r3, #16]
 80030e2:	e7c5      	b.n	8003070 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80030e4:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80030e8:	695b      	ldr	r3, [r3, #20]
 80030ea:	e7c1      	b.n	8003070 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80030ec:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80030f0:	699b      	ldr	r3, [r3, #24]
 80030f2:	e7bd      	b.n	8003070 <USBD_StdDevReq+0x40>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 80030f4:	7c03      	ldrb	r3, [r0, #16]
 80030f6:	b9db      	cbnz	r3, 8003130 <USBD_StdDevReq+0x100>
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80030f8:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80030fc:	f10d 0006 	add.w	r0, sp, #6
 8003100:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003102:	4798      	blx	r3
 8003104:	e7b8      	b.n	8003078 <USBD_StdDevReq+0x48>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8003106:	7c03      	ldrb	r3, [r0, #16]
 8003108:	b993      	cbnz	r3, 8003130 <USBD_StdDevReq+0x100>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800310a:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800310e:	f10d 0006 	add.w	r0, sp, #6
 8003112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003114:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8003116:	2307      	movs	r3, #7
 8003118:	e7c8      	b.n	80030ac <USBD_StdDevReq+0x7c>
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 800311a:	888b      	ldrh	r3, [r1, #4]
 800311c:	b943      	cbnz	r3, 8003130 <USBD_StdDevReq+0x100>
 800311e:	88cb      	ldrh	r3, [r1, #6]
 8003120:	b933      	cbnz	r3, 8003130 <USBD_StdDevReq+0x100>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8003122:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8003126:	788d      	ldrb	r5, [r1, #2]
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8003128:	2b03      	cmp	r3, #3
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 800312a:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800312e:	d103      	bne.n	8003138 <USBD_StdDevReq+0x108>
    USBD_CtlError(pdev , req);
 8003130:	4620      	mov	r0, r4
 8003132:	f7ff ff71 	bl	8003018 <USBD_CtlError.constprop.0>
    break;
 8003136:	e00b      	b.n	8003150 <USBD_StdDevReq+0x120>
      pdev->dev_address = dev_addr;
 8003138:	f880 51fe 	strb.w	r5, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 800313c:	4629      	mov	r1, r5
 800313e:	f000 fe01 	bl	8003d44 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 8003142:	4620      	mov	r0, r4
 8003144:	f000 f941 	bl	80033ca <USBD_CtlSendStatus>
      if (dev_addr != 0) 
 8003148:	b12d      	cbz	r5, 8003156 <USBD_StdDevReq+0x126>
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 800314a:	2302      	movs	r3, #2
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 800314c:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
}
 8003150:	2000      	movs	r0, #0
 8003152:	b003      	add	sp, #12
 8003154:	bd30      	pop	{r4, r5, pc}
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8003156:	2301      	movs	r3, #1
 8003158:	e7f8      	b.n	800314c <USBD_StdDevReq+0x11c>
  cfgidx = (uint8_t)(req->wValue);                 
 800315a:	7889      	ldrb	r1, [r1, #2]
 800315c:	4d30      	ldr	r5, [pc, #192]	; (8003220 <USBD_StdDevReq+0x1f0>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 800315e:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);                 
 8003160:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8003162:	d8e5      	bhi.n	8003130 <USBD_StdDevReq+0x100>
    switch (pdev->dev_state) 
 8003164:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8003168:	2b02      	cmp	r3, #2
 800316a:	d00c      	beq.n	8003186 <USBD_StdDevReq+0x156>
 800316c:	2b03      	cmp	r3, #3
 800316e:	d1df      	bne.n	8003130 <USBD_StdDevReq+0x100>
      if (cfgidx == 0) 
 8003170:	b9b1      	cbnz	r1, 80031a0 <USBD_StdDevReq+0x170>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8003172:	2302      	movs	r3, #2
        pdev->dev_config = cfgidx;          
 8003174:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8003176:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        USBD_ClrClassConfig(pdev , cfgidx);
 800317a:	f7ff fe5b 	bl	8002e34 <USBD_ClrClassConfig>
      USBD_CtlSendStatus(pdev);
 800317e:	4620      	mov	r0, r4
 8003180:	f000 f923 	bl	80033ca <USBD_CtlSendStatus>
 8003184:	e7e4      	b.n	8003150 <USBD_StdDevReq+0x120>
      if (cfgidx) 
 8003186:	2900      	cmp	r1, #0
 8003188:	d0f9      	beq.n	800317e <USBD_StdDevReq+0x14e>
        pdev->dev_config = cfgidx;
 800318a:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800318c:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 800318e:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8003190:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 8003194:	4620      	mov	r0, r4
 8003196:	f7ff fe42 	bl	8002e1e <USBD_SetClassConfig>
 800319a:	2802      	cmp	r0, #2
 800319c:	d1ef      	bne.n	800317e <USBD_StdDevReq+0x14e>
 800319e:	e7c7      	b.n	8003130 <USBD_StdDevReq+0x100>
      else  if (cfgidx != pdev->dev_config) 
 80031a0:	6841      	ldr	r1, [r0, #4]
 80031a2:	2901      	cmp	r1, #1
 80031a4:	d0eb      	beq.n	800317e <USBD_StdDevReq+0x14e>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 80031a6:	b2c9      	uxtb	r1, r1
 80031a8:	f7ff fe44 	bl	8002e34 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80031ac:	7829      	ldrb	r1, [r5, #0]
 80031ae:	6061      	str	r1, [r4, #4]
 80031b0:	e7f0      	b.n	8003194 <USBD_StdDevReq+0x164>
  if (req->wLength != 1) 
 80031b2:	88ca      	ldrh	r2, [r1, #6]
 80031b4:	2a01      	cmp	r2, #1
 80031b6:	d1bb      	bne.n	8003130 <USBD_StdDevReq+0x100>
    switch (pdev->dev_state )  
 80031b8:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80031bc:	2b02      	cmp	r3, #2
 80031be:	d003      	beq.n	80031c8 <USBD_StdDevReq+0x198>
 80031c0:	2b03      	cmp	r3, #3
 80031c2:	d1b5      	bne.n	8003130 <USBD_StdDevReq+0x100>
      USBD_CtlSendData (pdev, 
 80031c4:	1d01      	adds	r1, r0, #4
 80031c6:	e764      	b.n	8003092 <USBD_StdDevReq+0x62>
      pdev->dev_default_config = 0;
 80031c8:	4601      	mov	r1, r0
 80031ca:	2300      	movs	r3, #0
 80031cc:	f841 3f08 	str.w	r3, [r1, #8]!
 80031d0:	e75f      	b.n	8003092 <USBD_StdDevReq+0x62>
  switch (pdev->dev_state) 
 80031d2:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80031d6:	3b02      	subs	r3, #2
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d8a9      	bhi.n	8003130 <USBD_StdDevReq+0x100>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 80031dc:	2301      	movs	r3, #1
 80031de:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup) 
 80031e0:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 80031e4:	b10b      	cbz	r3, 80031ea <USBD_StdDevReq+0x1ba>
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 80031e6:	2303      	movs	r3, #3
 80031e8:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, 
 80031ea:	2202      	movs	r2, #2
 80031ec:	f104 010c 	add.w	r1, r4, #12
 80031f0:	e74f      	b.n	8003092 <USBD_StdDevReq+0x62>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80031f2:	884b      	ldrh	r3, [r1, #2]
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d1ab      	bne.n	8003150 <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 80031f8:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 80031fc:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8003200:	4629      	mov	r1, r5
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	4620      	mov	r0, r4
 8003206:	4798      	blx	r3
 8003208:	e7b9      	b.n	800317e <USBD_StdDevReq+0x14e>
  switch (pdev->dev_state)
 800320a:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800320e:	3b02      	subs	r3, #2
 8003210:	2b01      	cmp	r3, #1
 8003212:	d88d      	bhi.n	8003130 <USBD_StdDevReq+0x100>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 8003214:	884b      	ldrh	r3, [r1, #2]
 8003216:	2b01      	cmp	r3, #1
 8003218:	d19a      	bne.n	8003150 <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 800321a:	2300      	movs	r3, #0
 800321c:	e7ec      	b.n	80031f8 <USBD_StdDevReq+0x1c8>
 800321e:	bf00      	nop
 8003220:	20000114 	.word	0x20000114

08003224 <USBD_StdItfReq>:
{
 8003224:	b538      	push	{r3, r4, r5, lr}
  switch (pdev->dev_state) 
 8003226:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
{
 800322a:	4604      	mov	r4, r0
  switch (pdev->dev_state) 
 800322c:	2b03      	cmp	r3, #3
{
 800322e:	460d      	mov	r5, r1
  switch (pdev->dev_state) 
 8003230:	d10d      	bne.n	800324e <USBD_StdItfReq+0x2a>
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 8003232:	790b      	ldrb	r3, [r1, #4]
 8003234:	2b01      	cmp	r3, #1
 8003236:	d80a      	bhi.n	800324e <USBD_StdItfReq+0x2a>
      pdev->pClass->Setup (pdev, req); 
 8003238:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	4798      	blx	r3
      if((req->wLength == 0)&& (ret == USBD_OK))
 8003240:	88eb      	ldrh	r3, [r5, #6]
 8003242:	b913      	cbnz	r3, 800324a <USBD_StdItfReq+0x26>
         USBD_CtlSendStatus(pdev);
 8003244:	4620      	mov	r0, r4
 8003246:	f000 f8c0 	bl	80033ca <USBD_CtlSendStatus>
}
 800324a:	2000      	movs	r0, #0
 800324c:	bd38      	pop	{r3, r4, r5, pc}
     USBD_CtlError(pdev , req);
 800324e:	f7ff fee3 	bl	8003018 <USBD_CtlError.constprop.0>
    break;
 8003252:	e7fa      	b.n	800324a <USBD_StdItfReq+0x26>

08003254 <USBD_StdEPReq>:
{
 8003254:	b570      	push	{r4, r5, r6, lr}
  if ((req->bmRequest & 0x60) == 0x20)
 8003256:	780a      	ldrb	r2, [r1, #0]
  ep_addr  = LOBYTE(req->wIndex);   
 8003258:	888e      	ldrh	r6, [r1, #4]
  if ((req->bmRequest & 0x60) == 0x20)
 800325a:	f002 0260 	and.w	r2, r2, #96	; 0x60
 800325e:	2a20      	cmp	r2, #32
{
 8003260:	4604      	mov	r4, r0
 8003262:	460d      	mov	r5, r1
  ep_addr  = LOBYTE(req->wIndex);   
 8003264:	b2f3      	uxtb	r3, r6
  if ((req->bmRequest & 0x60) == 0x20)
 8003266:	d105      	bne.n	8003274 <USBD_StdEPReq+0x20>
    pdev->pClass->Setup (pdev, req);
 8003268:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	4798      	blx	r3
}
 8003270:	2000      	movs	r0, #0
 8003272:	bd70      	pop	{r4, r5, r6, pc}
  switch (req->bRequest) 
 8003274:	784a      	ldrb	r2, [r1, #1]
 8003276:	2a01      	cmp	r2, #1
 8003278:	d01c      	beq.n	80032b4 <USBD_StdEPReq+0x60>
 800327a:	d32a      	bcc.n	80032d2 <USBD_StdEPReq+0x7e>
 800327c:	2a03      	cmp	r2, #3
 800327e:	d1f7      	bne.n	8003270 <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 8003280:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8003284:	2a02      	cmp	r2, #2
 8003286:	d040      	beq.n	800330a <USBD_StdEPReq+0xb6>
 8003288:	2a03      	cmp	r2, #3
 800328a:	d002      	beq.n	8003292 <USBD_StdEPReq+0x3e>
      USBD_CtlError(pdev , req);
 800328c:	f7ff fec4 	bl	8003018 <USBD_CtlError.constprop.0>
      break;
 8003290:	e7ee      	b.n	8003270 <USBD_StdEPReq+0x1c>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8003292:	884a      	ldrh	r2, [r1, #2]
 8003294:	b922      	cbnz	r2, 80032a0 <USBD_StdEPReq+0x4c>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 8003296:	065e      	lsls	r6, r3, #25
 8003298:	d002      	beq.n	80032a0 <USBD_StdEPReq+0x4c>
          USBD_LL_StallEP(pdev , ep_addr);
 800329a:	4619      	mov	r1, r3
 800329c:	f000 fd26 	bl	8003cec <USBD_LL_StallEP>
          pdev->pClass->Setup (pdev, req);
 80032a0:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80032a4:	4629      	mov	r1, r5
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	4620      	mov	r0, r4
 80032aa:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 80032ac:	4620      	mov	r0, r4
 80032ae:	f000 f88c 	bl	80033ca <USBD_CtlSendStatus>
 80032b2:	e7dd      	b.n	8003270 <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 80032b4:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80032b8:	2a02      	cmp	r2, #2
 80032ba:	d026      	beq.n	800330a <USBD_StdEPReq+0xb6>
 80032bc:	2a03      	cmp	r2, #3
 80032be:	d1e5      	bne.n	800328c <USBD_StdEPReq+0x38>
      if (req->wValue == USB_FEATURE_EP_HALT)
 80032c0:	884a      	ldrh	r2, [r1, #2]
 80032c2:	2a00      	cmp	r2, #0
 80032c4:	d1d4      	bne.n	8003270 <USBD_StdEPReq+0x1c>
        if ((ep_addr & 0x7F) != 0x00) 
 80032c6:	0659      	lsls	r1, r3, #25
 80032c8:	d0f0      	beq.n	80032ac <USBD_StdEPReq+0x58>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 80032ca:	4619      	mov	r1, r3
 80032cc:	f000 fd1c 	bl	8003d08 <USBD_LL_ClearStallEP>
 80032d0:	e7e6      	b.n	80032a0 <USBD_StdEPReq+0x4c>
    switch (pdev->dev_state) 
 80032d2:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80032d6:	2a02      	cmp	r2, #2
 80032d8:	d017      	beq.n	800330a <USBD_StdEPReq+0xb6>
 80032da:	2a03      	cmp	r2, #3
 80032dc:	d1d6      	bne.n	800328c <USBD_StdEPReq+0x38>
 80032de:	f003 057f 	and.w	r5, r3, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 80032e2:	f016 0f80 	tst.w	r6, #128	; 0x80
 80032e6:	eb00 1505 	add.w	r5, r0, r5, lsl #4
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 80032ea:	4619      	mov	r1, r3
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 80032ec:	bf14      	ite	ne
 80032ee:	3514      	addne	r5, #20
 80032f0:	f505 7582 	addeq.w	r5, r5, #260	; 0x104
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 80032f4:	f000 fd16 	bl	8003d24 <USBD_LL_IsStallEP>
 80032f8:	b168      	cbz	r0, 8003316 <USBD_StdEPReq+0xc2>
        pep->status = 0x0001;     
 80032fa:	2301      	movs	r3, #1
 80032fc:	602b      	str	r3, [r5, #0]
      USBD_CtlSendData (pdev,
 80032fe:	2202      	movs	r2, #2
 8003300:	4629      	mov	r1, r5
 8003302:	4620      	mov	r0, r4
 8003304:	f000 f844 	bl	8003390 <USBD_CtlSendData>
      break;
 8003308:	e7b2      	b.n	8003270 <USBD_StdEPReq+0x1c>
      if ((ep_addr & 0x7F) != 0x00) 
 800330a:	065a      	lsls	r2, r3, #25
 800330c:	d0b0      	beq.n	8003270 <USBD_StdEPReq+0x1c>
        USBD_LL_StallEP(pdev , ep_addr);
 800330e:	4619      	mov	r1, r3
 8003310:	f000 fcec 	bl	8003cec <USBD_LL_StallEP>
 8003314:	e7ac      	b.n	8003270 <USBD_StdEPReq+0x1c>
        pep->status = 0x0000;  
 8003316:	6028      	str	r0, [r5, #0]
 8003318:	e7f1      	b.n	80032fe <USBD_StdEPReq+0xaa>

0800331a <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 800331a:	780b      	ldrb	r3, [r1, #0]
 800331c:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800331e:	784b      	ldrb	r3, [r1, #1]
 8003320:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8003322:	78ca      	ldrb	r2, [r1, #3]
 8003324:	788b      	ldrb	r3, [r1, #2]
 8003326:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800332a:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800332c:	794a      	ldrb	r2, [r1, #5]
 800332e:	790b      	ldrb	r3, [r1, #4]
 8003330:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003334:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8003336:	79ca      	ldrb	r2, [r1, #7]
 8003338:	798b      	ldrb	r3, [r1, #6]
 800333a:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800333e:	80c3      	strh	r3, [r0, #6]
 8003340:	4770      	bx	lr

08003342 <USBD_CtlError>:
{
 8003342:	b510      	push	{r4, lr}
 8003344:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80);
 8003346:	2180      	movs	r1, #128	; 0x80
 8003348:	f000 fcd0 	bl	8003cec <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 800334c:	4620      	mov	r0, r4
}
 800334e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0);
 8003352:	2100      	movs	r1, #0
 8003354:	f000 bcca 	b.w	8003cec <USBD_LL_StallEP>

08003358 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8003358:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0;
  
  if (desc != NULL) 
 800335a:	b188      	cbz	r0, 8003380 <USBD_GetString+0x28>
 800335c:	4605      	mov	r5, r0
 800335e:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != '\0') 
 8003360:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003364:	b2db      	uxtb	r3, r3
 8003366:	2c00      	cmp	r4, #0
 8003368:	d1f9      	bne.n	800335e <USBD_GetString+0x6>
    *len =  USBD_GetLen(desc) * 2 + 2;    
 800336a:	005b      	lsls	r3, r3, #1
 800336c:	3302      	adds	r3, #2
 800336e:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *len;
 8003370:	700b      	strb	r3, [r1, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 8003372:	2303      	movs	r3, #3
 8003374:	704b      	strb	r3, [r1, #1]
 8003376:	2302      	movs	r3, #2
 8003378:	3801      	subs	r0, #1
    while (*desc != '\0') 
 800337a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800337e:	b905      	cbnz	r5, 8003382 <USBD_GetString+0x2a>
 8003380:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 8003382:	1c5a      	adds	r2, r3, #1
 8003384:	54cd      	strb	r5, [r1, r3]
 8003386:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0x00;
 8003388:	3302      	adds	r3, #2
 800338a:	b2db      	uxtb	r3, r3
 800338c:	548c      	strb	r4, [r1, r2]
 800338e:	e7f4      	b.n	800337a <USBD_GetString+0x22>

08003390 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8003390:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8003392:	2202      	movs	r2, #2
{
 8003394:	b510      	push	{r4, lr}
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8003396:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 800339a:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length   = len;
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 800339c:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length   = len;
 800339e:	61c3      	str	r3, [r0, #28]
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 80033a0:	2100      	movs	r1, #0
 80033a2:	f000 fcdd 	bl	8003d60 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 80033a6:	2000      	movs	r0, #0
 80033a8:	bd10      	pop	{r4, pc}

080033aa <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 80033aa:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 80033ac:	4613      	mov	r3, r2
 80033ae:	460a      	mov	r2, r1
 80033b0:	2100      	movs	r1, #0
 80033b2:	f000 fcd5 	bl	8003d60 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 80033b6:	2000      	movs	r0, #0
 80033b8:	bd08      	pop	{r3, pc}

080033ba <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 80033ba:	b508      	push	{r3, lr}

  USBD_LL_PrepareReceive (pdev,
 80033bc:	4613      	mov	r3, r2
 80033be:	460a      	mov	r2, r1
 80033c0:	2100      	movs	r1, #0
 80033c2:	f000 fcdb 	bl	8003d7c <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 80033c6:	2000      	movs	r0, #0
 80033c8:	bd08      	pop	{r3, pc}

080033ca <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 80033ca:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80033cc:	2304      	movs	r3, #4
 80033ce:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 80033d2:	2300      	movs	r3, #0
 80033d4:	461a      	mov	r2, r3
 80033d6:	4619      	mov	r1, r3
 80033d8:	f000 fcc2 	bl	8003d60 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 80033dc:	2000      	movs	r0, #0
 80033de:	bd08      	pop	{r3, pc}

080033e0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 80033e0:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 80033e2:	2305      	movs	r3, #5
 80033e4:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 80033e8:	2300      	movs	r3, #0
 80033ea:	461a      	mov	r2, r3
 80033ec:	4619      	mov	r1, r3
 80033ee:	f000 fcc5 	bl	8003d7c <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 80033f2:	2000      	movs	r0, #0
 80033f4:	bd08      	pop	{r3, pc}
	...

080033f8 <MX_GPIO_Init>:
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80033f8:	4b19      	ldr	r3, [pc, #100]	; (8003460 <MX_GPIO_Init+0x68>)
{
 80033fa:	b500      	push	{lr}
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80033fc:	699a      	ldr	r2, [r3, #24]
{
 80033fe:	b089      	sub	sp, #36	; 0x24
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003400:	f042 0210 	orr.w	r2, r2, #16
 8003404:	619a      	str	r2, [r3, #24]
 8003406:	699a      	ldr	r2, [r3, #24]

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003408:	a904      	add	r1, sp, #16
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800340a:	f002 0210 	and.w	r2, r2, #16
 800340e:	9200      	str	r2, [sp, #0]
 8003410:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003412:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003414:	4813      	ldr	r0, [pc, #76]	; (8003464 <MX_GPIO_Init+0x6c>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003416:	f042 0220 	orr.w	r2, r2, #32
 800341a:	619a      	str	r2, [r3, #24]
 800341c:	699a      	ldr	r2, [r3, #24]
 800341e:	f002 0220 	and.w	r2, r2, #32
 8003422:	9201      	str	r2, [sp, #4]
 8003424:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003426:	699a      	ldr	r2, [r3, #24]
 8003428:	f042 0208 	orr.w	r2, r2, #8
 800342c:	619a      	str	r2, [r3, #24]
 800342e:	699a      	ldr	r2, [r3, #24]
 8003430:	f002 0208 	and.w	r2, r2, #8
 8003434:	9202      	str	r2, [sp, #8]
 8003436:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003438:	699a      	ldr	r2, [r3, #24]
 800343a:	f042 0204 	orr.w	r2, r2, #4
 800343e:	619a      	str	r2, [r3, #24]
 8003440:	699b      	ldr	r3, [r3, #24]
 8003442:	f003 0304 	and.w	r3, r3, #4
 8003446:	9303      	str	r3, [sp, #12]
 8003448:	9b03      	ldr	r3, [sp, #12]
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800344a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800344e:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003450:	2302      	movs	r3, #2
 8003452:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003454:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003456:	f7fc ff7f 	bl	8000358 <HAL_GPIO_Init>

}
 800345a:	b009      	add	sp, #36	; 0x24
 800345c:	f85d fb04 	ldr.w	pc, [sp], #4
 8003460:	40021000 	.word	0x40021000
 8003464:	40010800 	.word	0x40010800

08003468 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003468:	b508      	push	{r3, lr}

  hi2c1.Instance = I2C1;
 800346a:	480d      	ldr	r0, [pc, #52]	; (80034a0 <MX_I2C1_Init+0x38>)
  hi2c1.Init.ClockSpeed = 100000;
 800346c:	4b0d      	ldr	r3, [pc, #52]	; (80034a4 <MX_I2C1_Init+0x3c>)
 800346e:	f8df e03c 	ldr.w	lr, [pc, #60]	; 80034ac <MX_I2C1_Init+0x44>
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003472:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c1.Init.ClockSpeed = 100000;
 8003476:	e880 4008 	stmia.w	r0, {r3, lr}
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800347a:	2300      	movs	r3, #0
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800347c:	6102      	str	r2, [r0, #16]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800347e:	6083      	str	r3, [r0, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8003480:	60c3      	str	r3, [r0, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003482:	6143      	str	r3, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8003484:	6183      	str	r3, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003486:	61c3      	str	r3, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003488:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800348a:	f7fd f941 	bl	8000710 <HAL_I2C_Init>
 800348e:	b128      	cbz	r0, 800349c <MX_I2C1_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

}
 8003490:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 8003494:	214d      	movs	r1, #77	; 0x4d
 8003496:	4804      	ldr	r0, [pc, #16]	; (80034a8 <MX_I2C1_Init+0x40>)
 8003498:	f000 b948 	b.w	800372c <_Error_Handler>
 800349c:	bd08      	pop	{r3, pc}
 800349e:	bf00      	nop
 80034a0:	20000130 	.word	0x20000130
 80034a4:	40005400 	.word	0x40005400
 80034a8:	08003f14 	.word	0x08003f14
 80034ac:	000186a0 	.word	0x000186a0

080034b0 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80034b0:	b508      	push	{r3, lr}

  hi2c2.Instance = I2C2;
 80034b2:	480d      	ldr	r0, [pc, #52]	; (80034e8 <MX_I2C2_Init+0x38>)
  hi2c2.Init.ClockSpeed = 100000;
 80034b4:	4b0d      	ldr	r3, [pc, #52]	; (80034ec <MX_I2C2_Init+0x3c>)
 80034b6:	f8df e03c 	ldr.w	lr, [pc, #60]	; 80034f4 <MX_I2C2_Init+0x44>
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c2.Init.OwnAddress1 = 0;
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80034ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c2.Init.ClockSpeed = 100000;
 80034be:	e880 4008 	stmia.w	r0, {r3, lr}
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80034c2:	2300      	movs	r3, #0
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80034c4:	6102      	str	r2, [r0, #16]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80034c6:	6083      	str	r3, [r0, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80034c8:	60c3      	str	r3, [r0, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80034ca:	6143      	str	r3, [r0, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80034cc:	6183      	str	r3, [r0, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80034ce:	61c3      	str	r3, [r0, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80034d0:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80034d2:	f7fd f91d 	bl	8000710 <HAL_I2C_Init>
 80034d6:	b128      	cbz	r0, 80034e4 <MX_I2C2_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

}
 80034d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _Error_Handler(__FILE__, __LINE__);
 80034dc:	2160      	movs	r1, #96	; 0x60
 80034de:	4804      	ldr	r0, [pc, #16]	; (80034f0 <MX_I2C2_Init+0x40>)
 80034e0:	f000 b924 	b.w	800372c <_Error_Handler>
 80034e4:	bd08      	pop	{r3, pc}
 80034e6:	bf00      	nop
 80034e8:	20000184 	.word	0x20000184
 80034ec:	40005800 	.word	0x40005800
 80034f0:	08003f14 	.word	0x08003f14
 80034f4:	000186a0 	.word	0x000186a0

080034f8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80034f8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(i2cHandle->Instance==I2C1)
 80034fa:	6803      	ldr	r3, [r0, #0]
 80034fc:	4a1d      	ldr	r2, [pc, #116]	; (8003574 <HAL_I2C_MspInit+0x7c>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d11e      	bne.n	8003540 <HAL_I2C_MspInit+0x48>
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003502:	23c0      	movs	r3, #192	; 0xc0
 8003504:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003506:	2312      	movs	r3, #18
 8003508:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800350a:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800350c:	a902      	add	r1, sp, #8
 800350e:	481a      	ldr	r0, [pc, #104]	; (8003578 <HAL_I2C_MspInit+0x80>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003510:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003512:	f7fc ff21 	bl	8000358 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003516:	4b19      	ldr	r3, [pc, #100]	; (800357c <HAL_I2C_MspInit+0x84>)

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003518:	201f      	movs	r0, #31
    __HAL_RCC_I2C1_CLK_ENABLE();
 800351a:	69da      	ldr	r2, [r3, #28]
 800351c:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8003520:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003522:	2200      	movs	r2, #0
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003524:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003526:	4611      	mov	r1, r2
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003528:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800352c:	9300      	str	r3, [sp, #0]
 800352e:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003530:	f7fc fe62 	bl	80001f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003534:	201f      	movs	r0, #31
 8003536:	f7fc fe93 	bl	8000260 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 800353a:	b007      	add	sp, #28
 800353c:	f85d fb04 	ldr.w	pc, [sp], #4
  else if(i2cHandle->Instance==I2C2)
 8003540:	4a0f      	ldr	r2, [pc, #60]	; (8003580 <HAL_I2C_MspInit+0x88>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d1f9      	bne.n	800353a <HAL_I2C_MspInit+0x42>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003546:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800354a:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800354c:	2312      	movs	r3, #18
 800354e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003550:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003552:	a902      	add	r1, sp, #8
 8003554:	4808      	ldr	r0, [pc, #32]	; (8003578 <HAL_I2C_MspInit+0x80>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003556:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003558:	f7fc fefe 	bl	8000358 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800355c:	4b07      	ldr	r3, [pc, #28]	; (800357c <HAL_I2C_MspInit+0x84>)
 800355e:	69da      	ldr	r2, [r3, #28]
 8003560:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003564:	61da      	str	r2, [r3, #28]
 8003566:	69db      	ldr	r3, [r3, #28]
 8003568:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800356c:	9301      	str	r3, [sp, #4]
 800356e:	9b01      	ldr	r3, [sp, #4]
}
 8003570:	e7e3      	b.n	800353a <HAL_I2C_MspInit+0x42>
 8003572:	bf00      	nop
 8003574:	40005400 	.word	0x40005400
 8003578:	40010c00 	.word	0x40010c00
 800357c:	40021000 	.word	0x40021000
 8003580:	40005800 	.word	0x40005800

08003584 <SystemClock_Config>:
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003584:	f44f 3380 	mov.w	r3, #65536	; 0x10000
{
 8003588:	b530      	push	{r4, r5, lr}
 800358a:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800358c:	2401      	movs	r4, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800358e:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8003590:	2200      	movs	r2, #0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003592:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003594:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8003596:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800359a:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800359c:	940a      	str	r4, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800359e:	920c      	str	r2, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80035a0:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80035a2:	9511      	str	r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80035a4:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80035a6:	f7fe fc39 	bl	8001e1c <HAL_RCC_OscConfig>
 80035aa:	b100      	cbz	r0, 80035ae <SystemClock_Config+0x2a>
 80035ac:	e7fe      	b.n	80035ac <SystemClock_Config+0x28>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80035ae:	230f      	movs	r3, #15
 80035b0:	9305      	str	r3, [sp, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80035b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80035b6:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80035b8:	9009      	str	r0, [sp, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80035ba:	4621      	mov	r1, r4
 80035bc:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80035be:	9506      	str	r5, [sp, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80035c0:	9308      	str	r3, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80035c2:	f7fe fe1d 	bl	8002200 <HAL_RCC_ClockConfig>
 80035c6:	b100      	cbz	r0, 80035ca <SystemClock_Config+0x46>
 80035c8:	e7fe      	b.n	80035c8 <SystemClock_Config+0x44>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80035ca:	2310      	movs	r3, #16
 80035cc:	9301      	str	r3, [sp, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80035ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80035d2:	a801      	add	r0, sp, #4
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80035d4:	9304      	str	r3, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80035d6:	f7fe fecd 	bl	8002374 <HAL_RCCEx_PeriphCLKConfig>
 80035da:	4604      	mov	r4, r0
 80035dc:	b100      	cbz	r0, 80035e0 <SystemClock_Config+0x5c>
 80035de:	e7fe      	b.n	80035de <SystemClock_Config+0x5a>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_1);
 80035e0:	4602      	mov	r2, r0
 80035e2:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 80035e6:	f7fe fda5 	bl	8002134 <HAL_RCC_MCOConfig>

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80035ea:	f7fe fead 	bl	8002348 <HAL_RCC_GetHCLKFreq>
 80035ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80035f2:	fbb0 f0f3 	udiv	r0, r0, r3
 80035f6:	f7fc fe3f 	bl	8000278 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80035fa:	2004      	movs	r0, #4
 80035fc:	f7fc fe52 	bl	80002a4 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003600:	4622      	mov	r2, r4
 8003602:	4621      	mov	r1, r4
 8003604:	f04f 30ff 	mov.w	r0, #4294967295
 8003608:	f7fc fdf6 	bl	80001f8 <HAL_NVIC_SetPriority>
}
 800360c:	b015      	add	sp, #84	; 0x54
 800360e:	bd30      	pop	{r4, r5, pc}

08003610 <main>:
{
 8003610:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
		  mouseHID.buttons = 0;
 8003614:	2300      	movs	r3, #0
		  mouseHID.x = 10;
 8003616:	220a      	movs	r2, #10
		  mouseHID.buttons = 0;
 8003618:	f88d 300c 	strb.w	r3, [sp, #12]
		  mouseHID.x = 10;
 800361c:	f88d 200d 	strb.w	r2, [sp, #13]
		  mouseHID.y = 0;
 8003620:	f88d 300e 	strb.w	r3, [sp, #14]
		  mouseHID.wheel = 0;
 8003624:	f88d 300f 	strb.w	r3, [sp, #15]
  HAL_Init();
 8003628:	f7fc fda4 	bl	8000174 <HAL_Init>
  SystemClock_Config();
 800362c:	f7ff ffaa 	bl	8003584 <SystemClock_Config>
  MX_GPIO_Init();
 8003630:	f7ff fee2 	bl	80033f8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8003634:	f7ff ff18 	bl	8003468 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 8003638:	f000 fa86 	bl	8003b48 <MX_USB_DEVICE_Init>
  MX_I2C2_Init();
 800363c:	f7ff ff38 	bl	80034b0 <MX_I2C2_Init>
	  result = SD_MPU6050_Init(&hi2c1,&mpu1,SD_MPU6050_Device_0,SD_MPU6050_Accelerometer_2G,SD_MPU6050_Gyroscope_250s );
 8003640:	4c33      	ldr	r4, [pc, #204]	; (8003710 <main+0x100>)
	  result2 = SD_MPU6050_Init(&hi2c2,&mpu2,SD_MPU6050_Device_0,SD_MPU6050_Accelerometer_2G,SD_MPU6050_Gyroscope_250s );
 8003642:	4d34      	ldr	r5, [pc, #208]	; (8003714 <main+0x104>)
 8003644:	4e34      	ldr	r6, [pc, #208]	; (8003718 <main+0x108>)
	  result = SD_MPU6050_Init(&hi2c1,&mpu1,SD_MPU6050_Device_0,SD_MPU6050_Accelerometer_2G,SD_MPU6050_Gyroscope_250s );
 8003646:	2700      	movs	r7, #0
 8003648:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 8003728 <main+0x118>
 800364c:	463b      	mov	r3, r7
 800364e:	463a      	mov	r2, r7
 8003650:	4641      	mov	r1, r8
 8003652:	9700      	str	r7, [sp, #0]
 8003654:	4620      	mov	r0, r4
 8003656:	f000 f927 	bl	80038a8 <SD_MPU6050_Init>
	  result2 = SD_MPU6050_Init(&hi2c2,&mpu2,SD_MPU6050_Device_0,SD_MPU6050_Accelerometer_2G,SD_MPU6050_Gyroscope_250s );
 800365a:	463b      	mov	r3, r7
 800365c:	463a      	mov	r2, r7
 800365e:	4629      	mov	r1, r5
 8003660:	9700      	str	r7, [sp, #0]
 8003662:	4630      	mov	r0, r6
 8003664:	f000 f920 	bl	80038a8 <SD_MPU6050_Init>
	  HAL_Delay(25);
 8003668:	2019      	movs	r0, #25
 800366a:	f7fc fda3 	bl	80001b4 <HAL_Delay>
	  SD_MPU6050_ReadGyroscope(&hi2c1, &mpu1);
 800366e:	4641      	mov	r1, r8
 8003670:	4620      	mov	r0, r4
 8003672:	f000 f9a5 	bl	80039c0 <SD_MPU6050_ReadGyroscope>
	  int16_t g_x = mpu1.Gyroscope_X;
 8003676:	f9b8 2012 	ldrsh.w	r2, [r8, #18]
	  int16_t g_y = mpu1.Gyroscope_Y;
 800367a:	f9b8 3014 	ldrsh.w	r3, [r8, #20]
	  if((g_x - aux) > 300 && -(g_x - aux) < -300){
 800367e:	f5b2 7f96 	cmp.w	r2, #300	; 0x12c
 8003682:	dd35      	ble.n	80036f0 <main+0xe0>
		  mouseHID.y = (g_x)/100;
 8003684:	2164      	movs	r1, #100	; 0x64
	  		  mouseHID.y = (g_x)/150;
 8003686:	fb92 f2f1 	sdiv	r2, r2, r1
 800368a:	f88d 200e 	strb.w	r2, [sp, #14]
	  if((g_y - auy) > 300 && -(g_y - auy) < -300){
 800368e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8003692:	dd35      	ble.n	8003700 <main+0xf0>
		  mouseHID.x = (g_y)/100;
 8003694:	2264      	movs	r2, #100	; 0x64
			  mouseHID.x = (g_y)/150;
 8003696:	fb93 f3f2 	sdiv	r3, r3, r2
	  SD_MPU6050_ReadAccelerometer(&hi2c2, &mpu2);
 800369a:	491e      	ldr	r1, [pc, #120]	; (8003714 <main+0x104>)
 800369c:	4630      	mov	r0, r6
			  mouseHID.x = 0;
 800369e:	f88d 300d 	strb.w	r3, [sp, #13]
	  SD_MPU6050_ReadAccelerometer(&hi2c2, &mpu2);
 80036a2:	f000 f954 	bl	800394e <SD_MPU6050_ReadAccelerometer>
	  int16_t a_x = mpu2.Accelerometer_X;
 80036a6:	f9b5 700c 	ldrsh.w	r7, [r5, #12]
	  if(a_x < -4500){
 80036aa:	4b1c      	ldr	r3, [pc, #112]	; (800371c <main+0x10c>)
 80036ac:	429f      	cmp	r7, r3
 80036ae:	da0c      	bge.n	80036ca <main+0xba>
	  	  mouseHID.buttons = 1;
 80036b0:	2301      	movs	r3, #1
 80036b2:	f88d 300c 	strb.w	r3, [sp, #12]
	  	  mouseHID.x = 0;
 80036b6:	2300      	movs	r3, #0
	  	  USBD_HID_SendReport(&hUsbDeviceFS, &mouseHID, sizeof(struct mouseHID_t));
 80036b8:	2204      	movs	r2, #4
 80036ba:	a903      	add	r1, sp, #12
 80036bc:	4818      	ldr	r0, [pc, #96]	; (8003720 <main+0x110>)
	  	  mouseHID.x = 0;
 80036be:	f88d 300d 	strb.w	r3, [sp, #13]
	  	  mouseHID.y = 0;
 80036c2:	f88d 300e 	strb.w	r3, [sp, #14]
	  	  USBD_HID_SendReport(&hUsbDeviceFS, &mouseHID, sizeof(struct mouseHID_t));
 80036c6:	f7ff fb77 	bl	8002db8 <USBD_HID_SendReport>
	  HAL_Delay(25);
 80036ca:	2019      	movs	r0, #25
 80036cc:	f7fc fd72 	bl	80001b4 <HAL_Delay>
	  if(a_x > -4500)
 80036d0:	4b14      	ldr	r3, [pc, #80]	; (8003724 <main+0x114>)
	  USBD_HID_SendReport(&hUsbDeviceFS, &mouseHID, sizeof(struct mouseHID_t));
 80036d2:	2204      	movs	r2, #4
	  if(a_x > -4500)
 80036d4:	429f      	cmp	r7, r3
		  mouseHID.buttons = 0;
 80036d6:	bfa8      	it	ge
 80036d8:	2300      	movge	r3, #0
	  USBD_HID_SendReport(&hUsbDeviceFS, &mouseHID, sizeof(struct mouseHID_t));
 80036da:	a903      	add	r1, sp, #12
 80036dc:	4810      	ldr	r0, [pc, #64]	; (8003720 <main+0x110>)
		  mouseHID.buttons = 0;
 80036de:	bfa8      	it	ge
 80036e0:	f88d 300c 	strbge.w	r3, [sp, #12]
	  USBD_HID_SendReport(&hUsbDeviceFS, &mouseHID, sizeof(struct mouseHID_t));
 80036e4:	f7ff fb68 	bl	8002db8 <USBD_HID_SendReport>
	  HAL_Delay(5);
 80036e8:	2005      	movs	r0, #5
 80036ea:	f7fc fd63 	bl	80001b4 <HAL_Delay>
  {
 80036ee:	e7aa      	b.n	8003646 <main+0x36>
		  if(g_x < 0 && (g_x - aux) < -300){
 80036f0:	f512 7f96 	cmn.w	r2, #300	; 0x12c
 80036f4:	da01      	bge.n	80036fa <main+0xea>
	  		  mouseHID.y = (g_x)/150;
 80036f6:	2196      	movs	r1, #150	; 0x96
 80036f8:	e7c5      	b.n	8003686 <main+0x76>
	  		  mouseHID.y = 0;
 80036fa:	f88d 700e 	strb.w	r7, [sp, #14]
 80036fe:	e7c6      	b.n	800368e <main+0x7e>
		  if(g_y < 0 && (g_y - auy) < -300){
 8003700:	f513 7f96 	cmn.w	r3, #300	; 0x12c
 8003704:	da01      	bge.n	800370a <main+0xfa>
			  mouseHID.x = (g_y)/150;
 8003706:	2296      	movs	r2, #150	; 0x96
 8003708:	e7c5      	b.n	8003696 <main+0x86>
			  mouseHID.x = 0;
 800370a:	2300      	movs	r3, #0
 800370c:	e7c5      	b.n	800369a <main+0x8a>
 800370e:	bf00      	nop
 8003710:	20000130 	.word	0x20000130
 8003714:	200001d8 	.word	0x200001d8
 8003718:	20000184 	.word	0x20000184
 800371c:	ffffee6c 	.word	0xffffee6c
 8003720:	20000210 	.word	0x20000210
 8003724:	ffffee6d 	.word	0xffffee6d
 8003728:	200001f4 	.word	0x200001f4

0800372c <_Error_Handler>:
  * @brief  This function is executed in case of error occurrence.
  * @param  None
  * @retval None
  */
void _Error_Handler(char * file, int line)
{
 800372c:	e7fe      	b.n	800372c <_Error_Handler>

0800372e <SD_MPU6050_SetDataRate>:
	/* Return OK */
	return SD_MPU6050_Result_Ok;
}

SD_MPU6050_Result SD_MPU6050_SetDataRate(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct, uint8_t rate)
{
 800372e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t d[2];
	I2C_HandleTypeDef* Handle = I2Cx;
	uint8_t address = DataStruct->Address;
	/* Format array to send */
	d[0] = MPU6050_SMPLRT_DIV;
 8003730:	2319      	movs	r3, #25
{
 8003732:	4605      	mov	r5, r0
	d[1] = rate;

	/* Set data sample rate */
	while(HAL_I2C_Master_Transmit(Handle,(uint16_t)address,(uint8_t *)d,2,1000)!=HAL_OK);
 8003734:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
	uint8_t address = DataStruct->Address;
 8003738:	780c      	ldrb	r4, [r1, #0]
	d[0] = MPU6050_SMPLRT_DIV;
 800373a:	f88d 300c 	strb.w	r3, [sp, #12]
	d[1] = rate;
 800373e:	f88d 200d 	strb.w	r2, [sp, #13]
	while(HAL_I2C_Master_Transmit(Handle,(uint16_t)address,(uint8_t *)d,2,1000)!=HAL_OK);
 8003742:	b2a4      	uxth	r4, r4
 8003744:	9600      	str	r6, [sp, #0]
 8003746:	2302      	movs	r3, #2
 8003748:	aa03      	add	r2, sp, #12
 800374a:	4621      	mov	r1, r4
 800374c:	4628      	mov	r0, r5
 800374e:	f7fd f84d 	bl	80007ec <HAL_I2C_Master_Transmit>
 8003752:	2800      	cmp	r0, #0
 8003754:	d1f6      	bne.n	8003744 <SD_MPU6050_SetDataRate+0x16>
				return SD_MPU6050_Result_Error;
	}*/

	/* Return OK */
	return SD_MPU6050_Result_Ok;
}
 8003756:	b004      	add	sp, #16
 8003758:	bd70      	pop	{r4, r5, r6, pc}

0800375a <SD_MPU6050_SetAccelerometer>:
SD_MPU6050_Result SD_MPU6050_SetAccelerometer(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct, SD_MPU6050_Accelerometer AccelerometerSensitivity)
{
	uint8_t temp;
	I2C_HandleTypeDef* Handle = I2Cx;
	uint8_t address = DataStruct->Address;
	uint8_t regAdd =(uint8_t )MPU6050_ACCEL_CONFIG;
 800375a:	231c      	movs	r3, #28
{
 800375c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003760:	4607      	mov	r7, r0
 8003762:	460c      	mov	r4, r1
 8003764:	4616      	mov	r6, r2

	/* Config accelerometer */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&regAdd, 1, 1000) != HAL_OK);
 8003766:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
{
 800376a:	b085      	sub	sp, #20
	uint8_t address = DataStruct->Address;
 800376c:	780d      	ldrb	r5, [r1, #0]
	uint8_t regAdd =(uint8_t )MPU6050_ACCEL_CONFIG;
 800376e:	f10d 0810 	add.w	r8, sp, #16
 8003772:	f808 3d01 	strb.w	r3, [r8, #-1]!
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&regAdd, 1, 1000) != HAL_OK);
 8003776:	b2ad      	uxth	r5, r5
 8003778:	f8cd 9000 	str.w	r9, [sp]
 800377c:	2301      	movs	r3, #1
 800377e:	4642      	mov	r2, r8
 8003780:	4629      	mov	r1, r5
 8003782:	4638      	mov	r0, r7
 8003784:	f7fd f832 	bl	80007ec <HAL_I2C_Master_Transmit>
 8003788:	2800      	cmp	r0, #0
 800378a:	d1f5      	bne.n	8003778 <SD_MPU6050_SetAccelerometer+0x1e>
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, &temp, 1, 1000) != HAL_OK);
 800378c:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
 8003790:	f8cd 8000 	str.w	r8, [sp]
 8003794:	2301      	movs	r3, #1
 8003796:	f10d 020e 	add.w	r2, sp, #14
 800379a:	4629      	mov	r1, r5
 800379c:	4638      	mov	r0, r7
 800379e:	f7fd f8fb 	bl	8000998 <HAL_I2C_Master_Receive>
 80037a2:	2800      	cmp	r0, #0
 80037a4:	d1f4      	bne.n	8003790 <SD_MPU6050_SetAccelerometer+0x36>
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	temp = (temp & 0xE7) | (uint8_t)AccelerometerSensitivity << 3;
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&temp, 1, 1000) != HAL_OK);
 80037a6:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
	temp = (temp & 0xE7) | (uint8_t)AccelerometerSensitivity << 3;
 80037aa:	f89d 300e 	ldrb.w	r3, [sp, #14]
 80037ae:	f023 0318 	bic.w	r3, r3, #24
 80037b2:	ea43 03c6 	orr.w	r3, r3, r6, lsl #3
 80037b6:	f88d 300e 	strb.w	r3, [sp, #14]
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&temp, 1, 1000) != HAL_OK);
 80037ba:	f8cd 8000 	str.w	r8, [sp]
 80037be:	2301      	movs	r3, #1
 80037c0:	f10d 020e 	add.w	r2, sp, #14
 80037c4:	4629      	mov	r1, r5
 80037c6:	4638      	mov	r0, r7
 80037c8:	f7fd f810 	bl	80007ec <HAL_I2C_Master_Transmit>
 80037cc:	2800      	cmp	r0, #0
 80037ce:	d1f4      	bne.n	80037ba <SD_MPU6050_SetAccelerometer+0x60>
	/*{
				return SD_MPU6050_Result_Error;
	}*/

	/* Set sensitivities for multiplying gyro and accelerometer data */
	switch (AccelerometerSensitivity) {
 80037d0:	2e03      	cmp	r6, #3
 80037d2:	d806      	bhi.n	80037e2 <SD_MPU6050_SetAccelerometer+0x88>
 80037d4:	e8df f006 	tbb	[pc, r6]
 80037d8:	0f0c0902 	.word	0x0f0c0902
		case SD_MPU6050_Accelerometer_2G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_2;
 80037dc:	f04f 5362 	mov.w	r3, #947912704	; 0x38800000
			break;
		case SD_MPU6050_Accelerometer_8G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_8;
			break;
		case SD_MPU6050_Accelerometer_16G:
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_16;
 80037e0:	60a3      	str	r3, [r4, #8]
			break;
		}

	/* Return OK */
	return SD_MPU6050_Result_Ok;
}
 80037e2:	2000      	movs	r0, #0
 80037e4:	b005      	add	sp, #20
 80037e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_4;
 80037ea:	f04f 5364 	mov.w	r3, #956301312	; 0x39000000
 80037ee:	e7f7      	b.n	80037e0 <SD_MPU6050_SetAccelerometer+0x86>
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_8;
 80037f0:	f04f 5366 	mov.w	r3, #964689920	; 0x39800000
 80037f4:	e7f4      	b.n	80037e0 <SD_MPU6050_SetAccelerometer+0x86>
			DataStruct->Acce_Mult = (float)1 / MPU6050_ACCE_SENS_16;
 80037f6:	f04f 5368 	mov.w	r3, #973078528	; 0x3a000000
 80037fa:	e7f1      	b.n	80037e0 <SD_MPU6050_SetAccelerometer+0x86>

080037fc <SD_MPU6050_SetGyroscope>:
SD_MPU6050_Result SD_MPU6050_SetGyroscope(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct, SD_MPU6050_Gyroscope GyroscopeSensitivity)
{
	uint8_t temp;
	I2C_HandleTypeDef* Handle = I2Cx;
	uint8_t address = DataStruct->Address;
	uint8_t regAdd =(uint8_t )MPU6050_GYRO_CONFIG;
 80037fc:	231b      	movs	r3, #27
{
 80037fe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003802:	4607      	mov	r7, r0
 8003804:	460c      	mov	r4, r1
 8003806:	4616      	mov	r6, r2

	/* Config gyroscope */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&regAdd, 1, 1000) != HAL_OK);
 8003808:	f44f 797a 	mov.w	r9, #1000	; 0x3e8
{
 800380c:	b085      	sub	sp, #20
	uint8_t address = DataStruct->Address;
 800380e:	780d      	ldrb	r5, [r1, #0]
	uint8_t regAdd =(uint8_t )MPU6050_GYRO_CONFIG;
 8003810:	f10d 0810 	add.w	r8, sp, #16
 8003814:	f808 3d01 	strb.w	r3, [r8, #-1]!
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&regAdd, 1, 1000) != HAL_OK);
 8003818:	b2ad      	uxth	r5, r5
 800381a:	f8cd 9000 	str.w	r9, [sp]
 800381e:	2301      	movs	r3, #1
 8003820:	4642      	mov	r2, r8
 8003822:	4629      	mov	r1, r5
 8003824:	4638      	mov	r0, r7
 8003826:	f7fc ffe1 	bl	80007ec <HAL_I2C_Master_Transmit>
 800382a:	2800      	cmp	r0, #0
 800382c:	d1f5      	bne.n	800381a <SD_MPU6050_SetGyroscope+0x1e>
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, &temp, 1, 1000) != HAL_OK);
 800382e:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
 8003832:	f8cd 8000 	str.w	r8, [sp]
 8003836:	2301      	movs	r3, #1
 8003838:	f10d 020e 	add.w	r2, sp, #14
 800383c:	4629      	mov	r1, r5
 800383e:	4638      	mov	r0, r7
 8003840:	f7fd f8aa 	bl	8000998 <HAL_I2C_Master_Receive>
 8003844:	2800      	cmp	r0, #0
 8003846:	d1f4      	bne.n	8003832 <SD_MPU6050_SetGyroscope+0x36>
	/*{
				return SD_MPU6050_Result_Error;
	}*/
	temp = (temp & 0xE7) | (uint8_t)GyroscopeSensitivity << 3;
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&temp, 1, 1000) != HAL_OK);
 8003848:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
	temp = (temp & 0xE7) | (uint8_t)GyroscopeSensitivity << 3;
 800384c:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8003850:	f023 0318 	bic.w	r3, r3, #24
 8003854:	ea43 03c6 	orr.w	r3, r3, r6, lsl #3
 8003858:	f88d 300e 	strb.w	r3, [sp, #14]
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address,&temp, 1, 1000) != HAL_OK);
 800385c:	f8cd 8000 	str.w	r8, [sp]
 8003860:	2301      	movs	r3, #1
 8003862:	f10d 020e 	add.w	r2, sp, #14
 8003866:	4629      	mov	r1, r5
 8003868:	4638      	mov	r0, r7
 800386a:	f7fc ffbf 	bl	80007ec <HAL_I2C_Master_Transmit>
 800386e:	2800      	cmp	r0, #0
 8003870:	d1f4      	bne.n	800385c <SD_MPU6050_SetGyroscope+0x60>
	/*{
				return SD_MPU6050_Result_Error;
	}*/

	switch (GyroscopeSensitivity) {
 8003872:	2e03      	cmp	r6, #3
 8003874:	d805      	bhi.n	8003882 <SD_MPU6050_SetGyroscope+0x86>
 8003876:	e8df f006 	tbb	[pc, r6]
 800387a:	0802      	.short	0x0802
 800387c:	0c0a      	.short	0x0c0a
			case SD_MPU6050_Gyroscope_250s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_250;
 800387e:	4b06      	ldr	r3, [pc, #24]	; (8003898 <SD_MPU6050_SetGyroscope+0x9c>)
				break;
			case SD_MPU6050_Gyroscope_1000s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_1000;
				break;
			case SD_MPU6050_Gyroscope_2000s:
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_2000;
 8003880:	6063      	str	r3, [r4, #4]
			default:
				break;
		}
	/* Return OK */
	return SD_MPU6050_Result_Ok;
}
 8003882:	2000      	movs	r0, #0
 8003884:	b005      	add	sp, #20
 8003886:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_500;
 800388a:	4b04      	ldr	r3, [pc, #16]	; (800389c <SD_MPU6050_SetGyroscope+0xa0>)
 800388c:	e7f8      	b.n	8003880 <SD_MPU6050_SetGyroscope+0x84>
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_1000;
 800388e:	4b04      	ldr	r3, [pc, #16]	; (80038a0 <SD_MPU6050_SetGyroscope+0xa4>)
 8003890:	e7f6      	b.n	8003880 <SD_MPU6050_SetGyroscope+0x84>
				DataStruct->Gyro_Mult = (float)1 / MPU6050_GYRO_SENS_2000;
 8003892:	4b04      	ldr	r3, [pc, #16]	; (80038a4 <SD_MPU6050_SetGyroscope+0xa8>)
 8003894:	e7f4      	b.n	8003880 <SD_MPU6050_SetGyroscope+0x84>
 8003896:	bf00      	nop
 8003898:	3bfa232d 	.word	0x3bfa232d
 800389c:	3c7a232d 	.word	0x3c7a232d
 80038a0:	3cf9c190 	.word	0x3cf9c190
 80038a4:	3d79c190 	.word	0x3d79c190

080038a8 <SD_MPU6050_Init>:
{
 80038a8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80038ac:	4698      	mov	r8, r3
	uint8_t WHO_AM_I = (uint8_t)MPU6050_WHO_AM_I;
 80038ae:	2375      	movs	r3, #117	; 0x75
	DataStruct->Address = MPU6050_I2C_ADDR | (uint8_t)DeviceNumber;
 80038b0:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
	if(HAL_I2C_IsDeviceReady(Handle,address,2,5)!=HAL_OK)
 80038b4:	b294      	uxth	r4, r2
	DataStruct->Address = MPU6050_I2C_ADDR | (uint8_t)DeviceNumber;
 80038b6:	700a      	strb	r2, [r1, #0]
{
 80038b8:	460e      	mov	r6, r1
	uint8_t WHO_AM_I = (uint8_t)MPU6050_WHO_AM_I;
 80038ba:	f88d 300a 	strb.w	r3, [sp, #10]
	if(HAL_I2C_IsDeviceReady(Handle,address,2,5)!=HAL_OK)
 80038be:	2202      	movs	r2, #2
 80038c0:	2305      	movs	r3, #5
 80038c2:	4621      	mov	r1, r4
{
 80038c4:	4605      	mov	r5, r0
	if(HAL_I2C_IsDeviceReady(Handle,address,2,5)!=HAL_OK)
 80038c6:	f7fd f9e9 	bl	8000c9c <HAL_I2C_IsDeviceReady>
 80038ca:	b118      	cbz	r0, 80038d4 <SD_MPU6050_Init+0x2c>
				return SD_MPU6050_Result_Error;
 80038cc:	2001      	movs	r0, #1
}
 80038ce:	b004      	add	sp, #16
 80038d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if(HAL_I2C_Master_Transmit(Handle, address, &WHO_AM_I, 1, 1000) != HAL_OK)
 80038d4:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
 80038d8:	2301      	movs	r3, #1
 80038da:	9700      	str	r7, [sp, #0]
 80038dc:	f10d 020a 	add.w	r2, sp, #10
 80038e0:	4621      	mov	r1, r4
 80038e2:	4628      	mov	r0, r5
 80038e4:	f7fc ff82 	bl	80007ec <HAL_I2C_Master_Transmit>
 80038e8:	2800      	cmp	r0, #0
 80038ea:	d1ef      	bne.n	80038cc <SD_MPU6050_Init+0x24>
		if(HAL_I2C_Master_Receive(Handle, address, &temp, 1, 1000) != HAL_OK)
 80038ec:	9700      	str	r7, [sp, #0]
 80038ee:	2301      	movs	r3, #1
 80038f0:	f10d 020b 	add.w	r2, sp, #11
 80038f4:	4621      	mov	r1, r4
 80038f6:	4628      	mov	r0, r5
 80038f8:	f7fd f84e 	bl	8000998 <HAL_I2C_Master_Receive>
 80038fc:	2800      	cmp	r0, #0
 80038fe:	d1e5      	bne.n	80038cc <SD_MPU6050_Init+0x24>
		while(temp != MPU6050_I_AM)
 8003900:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8003904:	2b68      	cmp	r3, #104	; 0x68
 8003906:	d120      	bne.n	800394a <SD_MPU6050_Init+0xa2>
		d[0] = MPU6050_PWR_MGMT_1;
 8003908:	236b      	movs	r3, #107	; 0x6b
		d[1] = 0x00;
 800390a:	f88d 000d 	strb.w	r0, [sp, #13]
		d[0] = MPU6050_PWR_MGMT_1;
 800390e:	f88d 300c 	strb.w	r3, [sp, #12]
		if(HAL_I2C_Master_Transmit(Handle,(uint16_t)address , (uint8_t *)d, 2, 1000) != HAL_OK)
 8003912:	4621      	mov	r1, r4
 8003914:	9700      	str	r7, [sp, #0]
 8003916:	2302      	movs	r3, #2
 8003918:	aa03      	add	r2, sp, #12
 800391a:	4628      	mov	r0, r5
 800391c:	f7fc ff66 	bl	80007ec <HAL_I2C_Master_Transmit>
 8003920:	4604      	mov	r4, r0
 8003922:	2800      	cmp	r0, #0
 8003924:	d1d2      	bne.n	80038cc <SD_MPU6050_Init+0x24>
	SD_MPU6050_SetDataRate(I2Cx,DataStruct, SD_MPU6050_DataRate_1KHz);
 8003926:	2207      	movs	r2, #7
 8003928:	4631      	mov	r1, r6
 800392a:	4628      	mov	r0, r5
 800392c:	f7ff feff 	bl	800372e <SD_MPU6050_SetDataRate>
	SD_MPU6050_SetAccelerometer(I2Cx,DataStruct, AccelerometerSensitivity);
 8003930:	4642      	mov	r2, r8
 8003932:	4631      	mov	r1, r6
 8003934:	4628      	mov	r0, r5
 8003936:	f7ff ff10 	bl	800375a <SD_MPU6050_SetAccelerometer>
	SD_MPU6050_SetGyroscope(I2Cx,DataStruct, GyroscopeSensitivity);
 800393a:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
 800393e:	4631      	mov	r1, r6
 8003940:	4628      	mov	r0, r5
 8003942:	f7ff ff5b 	bl	80037fc <SD_MPU6050_SetGyroscope>
	return SD_MPU6050_Result_Ok;
 8003946:	4620      	mov	r0, r4
 8003948:	e7c1      	b.n	80038ce <SD_MPU6050_Init+0x26>
				return SD_MPU6050_Result_DeviceInvalid;
 800394a:	2003      	movs	r0, #3
 800394c:	e7bf      	b.n	80038ce <SD_MPU6050_Init+0x26>

0800394e <SD_MPU6050_ReadAccelerometer>:

SD_MPU6050_Result SD_MPU6050_ReadAccelerometer(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct)
{
	uint8_t data[6];
	uint8_t reg = MPU6050_ACCEL_XOUT_H;
 800394e:	233b      	movs	r3, #59	; 0x3b
{
 8003950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003954:	4606      	mov	r6, r0
 8003956:	460c      	mov	r4, r1
	I2C_HandleTypeDef* Handle = I2Cx;
	uint8_t address = DataStruct->Address;

	/* Read accelerometer data */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address, &reg, 1, 1000) != HAL_OK);
 8003958:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
{
 800395c:	b086      	sub	sp, #24
	uint8_t reg = MPU6050_ACCEL_XOUT_H;
 800395e:	ad06      	add	r5, sp, #24
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address, &reg, 1, 1000) != HAL_OK);
 8003960:	780f      	ldrb	r7, [r1, #0]
	uint8_t reg = MPU6050_ACCEL_XOUT_H;
 8003962:	f805 3d09 	strb.w	r3, [r5, #-9]!
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address, &reg, 1, 1000) != HAL_OK);
 8003966:	f8cd 8000 	str.w	r8, [sp]
 800396a:	2301      	movs	r3, #1
 800396c:	462a      	mov	r2, r5
 800396e:	4639      	mov	r1, r7
 8003970:	4630      	mov	r0, r6
 8003972:	f7fc ff3b 	bl	80007ec <HAL_I2C_Master_Transmit>
 8003976:	2800      	cmp	r0, #0
 8003978:	d1f5      	bne.n	8003966 <SD_MPU6050_ReadAccelerometer+0x18>

	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, data, 6, 1000) != HAL_OK);
 800397a:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 800397e:	9500      	str	r5, [sp, #0]
 8003980:	2306      	movs	r3, #6
 8003982:	aa04      	add	r2, sp, #16
 8003984:	4639      	mov	r1, r7
 8003986:	4630      	mov	r0, r6
 8003988:	f7fd f806 	bl	8000998 <HAL_I2C_Master_Receive>
 800398c:	2800      	cmp	r0, #0
 800398e:	d1f6      	bne.n	800397e <SD_MPU6050_ReadAccelerometer+0x30>

	/* Format */
	DataStruct->Accelerometer_X = (int16_t)(data[0] << 8 | data[1]);
 8003990:	f89d 2010 	ldrb.w	r2, [sp, #16]
 8003994:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8003998:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800399c:	81a3      	strh	r3, [r4, #12]
	DataStruct->Accelerometer_Y = (int16_t)(data[2] << 8 | data[3]);
 800399e:	f89d 2012 	ldrb.w	r2, [sp, #18]
 80039a2:	f89d 3013 	ldrb.w	r3, [sp, #19]
 80039a6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80039aa:	81e3      	strh	r3, [r4, #14]
	DataStruct->Accelerometer_Z = (int16_t)(data[4] << 8 | data[5]);
 80039ac:	f89d 2014 	ldrb.w	r2, [sp, #20]
 80039b0:	f89d 3015 	ldrb.w	r3, [sp, #21]
 80039b4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80039b8:	8223      	strh	r3, [r4, #16]

	/* Return OK */
	return SD_MPU6050_Result_Ok;
}
 80039ba:	b006      	add	sp, #24
 80039bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080039c0 <SD_MPU6050_ReadGyroscope>:
SD_MPU6050_Result SD_MPU6050_ReadGyroscope(I2C_HandleTypeDef* I2Cx,SD_MPU6050* DataStruct)
{
	uint8_t data[6];
	uint8_t reg = MPU6050_GYRO_XOUT_H;
 80039c0:	2343      	movs	r3, #67	; 0x43
{
 80039c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039c6:	4606      	mov	r6, r0
 80039c8:	460c      	mov	r4, r1
	I2C_HandleTypeDef* Handle = I2Cx;
	uint8_t address = DataStruct->Address;

	/* Read gyroscope data */
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address, &reg, 1, 1000) != HAL_OK);
 80039ca:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
{
 80039ce:	b086      	sub	sp, #24
	uint8_t reg = MPU6050_GYRO_XOUT_H;
 80039d0:	ad06      	add	r5, sp, #24
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address, &reg, 1, 1000) != HAL_OK);
 80039d2:	780f      	ldrb	r7, [r1, #0]
	uint8_t reg = MPU6050_GYRO_XOUT_H;
 80039d4:	f805 3d09 	strb.w	r3, [r5, #-9]!
	while(HAL_I2C_Master_Transmit(Handle, (uint16_t)address, &reg, 1, 1000) != HAL_OK);
 80039d8:	f8cd 8000 	str.w	r8, [sp]
 80039dc:	2301      	movs	r3, #1
 80039de:	462a      	mov	r2, r5
 80039e0:	4639      	mov	r1, r7
 80039e2:	4630      	mov	r0, r6
 80039e4:	f7fc ff02 	bl	80007ec <HAL_I2C_Master_Transmit>
 80039e8:	2800      	cmp	r0, #0
 80039ea:	d1f5      	bne.n	80039d8 <SD_MPU6050_ReadGyroscope+0x18>

	while(HAL_I2C_Master_Receive(Handle, (uint16_t)address, data, 6, 1000) != HAL_OK);
 80039ec:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 80039f0:	9500      	str	r5, [sp, #0]
 80039f2:	2306      	movs	r3, #6
 80039f4:	aa04      	add	r2, sp, #16
 80039f6:	4639      	mov	r1, r7
 80039f8:	4630      	mov	r0, r6
 80039fa:	f7fc ffcd 	bl	8000998 <HAL_I2C_Master_Receive>
 80039fe:	2800      	cmp	r0, #0
 8003a00:	d1f6      	bne.n	80039f0 <SD_MPU6050_ReadGyroscope+0x30>

	/* Format */
	DataStruct->Gyroscope_X = (int16_t)(data[0] << 8 | data[1]);
 8003a02:	f89d 2010 	ldrb.w	r2, [sp, #16]
 8003a06:	f89d 3011 	ldrb.w	r3, [sp, #17]
 8003a0a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003a0e:	8263      	strh	r3, [r4, #18]
	DataStruct->Gyroscope_Y = (int16_t)(data[2] << 8 | data[3]);
 8003a10:	f89d 2012 	ldrb.w	r2, [sp, #18]
 8003a14:	f89d 3013 	ldrb.w	r3, [sp, #19]
 8003a18:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003a1c:	82a3      	strh	r3, [r4, #20]
	DataStruct->Gyroscope_Z = (int16_t)(data[4] << 8 | data[5]);
 8003a1e:	f89d 2014 	ldrb.w	r2, [sp, #20]
 8003a22:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8003a26:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8003a2a:	82e3      	strh	r3, [r4, #22]

	/* Return OK */
	return SD_MPU6050_Result_Ok;
}
 8003a2c:	b006      	add	sp, #24
 8003a2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08003a34 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003a34:	4b21      	ldr	r3, [pc, #132]	; (8003abc <HAL_MspInit+0x88>)
{
 8003a36:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 8003a38:	699a      	ldr	r2, [r3, #24]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a3a:	2003      	movs	r0, #3
  __HAL_RCC_AFIO_CLK_ENABLE();
 8003a3c:	f042 0201 	orr.w	r2, r2, #1
 8003a40:	619a      	str	r2, [r3, #24]
 8003a42:	699b      	ldr	r3, [r3, #24]
 8003a44:	f003 0301 	and.w	r3, r3, #1
 8003a48:	9301      	str	r3, [sp, #4]
 8003a4a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a4c:	f7fc fbc2 	bl	80001d4 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8003a50:	2200      	movs	r2, #0
 8003a52:	f06f 000b 	mvn.w	r0, #11
 8003a56:	4611      	mov	r1, r2
 8003a58:	f7fc fbce 	bl	80001f8 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f06f 000a 	mvn.w	r0, #10
 8003a62:	4611      	mov	r1, r2
 8003a64:	f7fc fbc8 	bl	80001f8 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8003a68:	2200      	movs	r2, #0
 8003a6a:	f06f 0009 	mvn.w	r0, #9
 8003a6e:	4611      	mov	r1, r2
 8003a70:	f7fc fbc2 	bl	80001f8 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8003a74:	2200      	movs	r2, #0
 8003a76:	f06f 0004 	mvn.w	r0, #4
 8003a7a:	4611      	mov	r1, r2
 8003a7c:	f7fc fbbc 	bl	80001f8 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8003a80:	2200      	movs	r2, #0
 8003a82:	f06f 0003 	mvn.w	r0, #3
 8003a86:	4611      	mov	r1, r2
 8003a88:	f7fc fbb6 	bl	80001f8 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	f06f 0001 	mvn.w	r0, #1
 8003a92:	4611      	mov	r1, r2
 8003a94:	f7fc fbb0 	bl	80001f8 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f04f 30ff 	mov.w	r0, #4294967295
 8003a9e:	4611      	mov	r1, r2
 8003aa0:	f7fc fbaa 	bl	80001f8 <HAL_NVIC_SetPriority>

    /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
    */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8003aa4:	4b06      	ldr	r3, [pc, #24]	; (8003ac0 <HAL_MspInit+0x8c>)
 8003aa6:	685a      	ldr	r2, [r3, #4]
 8003aa8:	f022 62e0 	bic.w	r2, r2, #117440512	; 0x7000000
 8003aac:	605a      	str	r2, [r3, #4]
 8003aae:	685a      	ldr	r2, [r3, #4]
 8003ab0:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8003ab4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ab6:	b003      	add	sp, #12
 8003ab8:	f85d fb04 	ldr.w	pc, [sp], #4
 8003abc:	40021000 	.word	0x40021000
 8003ac0:	40010000 	.word	0x40010000

08003ac4 <NMI_Handler>:
 8003ac4:	4770      	bx	lr

08003ac6 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8003ac6:	e7fe      	b.n	8003ac6 <HardFault_Handler>

08003ac8 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8003ac8:	e7fe      	b.n	8003ac8 <MemManage_Handler>

08003aca <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8003aca:	e7fe      	b.n	8003aca <BusFault_Handler>

08003acc <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8003acc:	e7fe      	b.n	8003acc <UsageFault_Handler>

08003ace <SVC_Handler>:
 8003ace:	4770      	bx	lr

08003ad0 <DebugMon_Handler>:
 8003ad0:	4770      	bx	lr

08003ad2 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8003ad2:	4770      	bx	lr

08003ad4 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8003ad4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003ad6:	f7fc fb5f 	bl	8000198 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003ada:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8003ade:	f7fc bbee 	b.w	80002be <HAL_SYSTICK_IRQHandler>
	...

08003ae4 <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8003ae4:	4801      	ldr	r0, [pc, #4]	; (8003aec <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 8003ae6:	f7fd bebd 	b.w	8001864 <HAL_PCD_IRQHandler>
 8003aea:	bf00      	nop
 8003aec:	20000434 	.word	0x20000434

08003af0 <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003af0:	4801      	ldr	r0, [pc, #4]	; (8003af8 <I2C1_EV_IRQHandler+0x8>)
 8003af2:	f7fd ba21 	b.w	8000f38 <HAL_I2C_EV_IRQHandler>
 8003af6:	bf00      	nop
 8003af8:	20000130 	.word	0x20000130

08003afc <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8003afc:	4b0f      	ldr	r3, [pc, #60]	; (8003b3c <SystemInit+0x40>)
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	f042 0201 	orr.w	r2, r2, #1
 8003b04:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8003b06:	6859      	ldr	r1, [r3, #4]
 8003b08:	4a0d      	ldr	r2, [pc, #52]	; (8003b40 <SystemInit+0x44>)
 8003b0a:	400a      	ands	r2, r1
 8003b0c:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8003b14:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003b18:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003b20:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8003b22:	685a      	ldr	r2, [r3, #4]
 8003b24:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8003b28:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8003b2a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8003b2e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003b30:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003b34:	4b03      	ldr	r3, [pc, #12]	; (8003b44 <SystemInit+0x48>)
 8003b36:	609a      	str	r2, [r3, #8]
 8003b38:	4770      	bx	lr
 8003b3a:	bf00      	nop
 8003b3c:	40021000 	.word	0x40021000
 8003b40:	f8ff0000 	.word	0xf8ff0000
 8003b44:	e000ed00 	.word	0xe000ed00

08003b48 <MX_USB_DEVICE_Init>:
/* USB Device Core handle declaration */
USBD_HandleTypeDef hUsbDeviceFS;

/* init function */                                        
void MX_USB_DEVICE_Init(void)
{
 8003b48:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library,Add Supported Class and Start the library*/
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 8003b4a:	4c07      	ldr	r4, [pc, #28]	; (8003b68 <MX_USB_DEVICE_Init+0x20>)
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	4907      	ldr	r1, [pc, #28]	; (8003b6c <MX_USB_DEVICE_Init+0x24>)
 8003b50:	4620      	mov	r0, r4
 8003b52:	f7ff f943 	bl	8002ddc <USBD_Init>

  USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID);
 8003b56:	4620      	mov	r0, r4
 8003b58:	4905      	ldr	r1, [pc, #20]	; (8003b70 <MX_USB_DEVICE_Init+0x28>)
 8003b5a:	f7ff f954 	bl	8002e06 <USBD_RegisterClass>

  USBD_Start(&hUsbDeviceFS);
 8003b5e:	4620      	mov	r0, r4

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8003b60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_Start(&hUsbDeviceFS);
 8003b64:	f7ff b956 	b.w	8002e14 <USBD_Start>
 8003b68:	20000210 	.word	0x20000210
 8003b6c:	200000c4 	.word	0x200000c4
 8003b70:	2000004c 	.word	0x2000004c

08003b74 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8003b74:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 8003b76:	4b0d      	ldr	r3, [pc, #52]	; (8003bac <HAL_PCD_MspInit+0x38>)
 8003b78:	6802      	ldr	r2, [r0, #0]
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d112      	bne.n	8003ba4 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8003b7e:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8003b82:	69da      	ldr	r2, [r3, #28]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8003b84:	2014      	movs	r0, #20
    __HAL_RCC_USB_CLK_ENABLE();
 8003b86:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003b8a:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8003b8c:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 8003b8e:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8003b90:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 8003b92:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b96:	9301      	str	r3, [sp, #4]
 8003b98:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8003b9a:	f7fc fb2d 	bl	80001f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8003b9e:	2014      	movs	r0, #20
 8003ba0:	f7fc fb5e 	bl	8000260 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8003ba4:	b003      	add	sp, #12
 8003ba6:	f85d fb04 	ldr.w	pc, [sp], #4
 8003baa:	bf00      	nop
 8003bac:	40005c00 	.word	0x40005c00

08003bb0 <HAL_PCD_SetupStageCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8003bb0:	f200 412c 	addw	r1, r0, #1068	; 0x42c
 8003bb4:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8003bb8:	f7ff b943 	b.w	8002e42 <USBD_LL_SetupStage>

08003bbc <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8003bbc:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8003bc0:	f8d3 223c 	ldr.w	r2, [r3, #572]	; 0x23c
 8003bc4:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8003bc8:	f7ff b968 	b.w	8002e9c <USBD_LL_DataOutStage>

08003bcc <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint Number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8003bcc:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8003bd0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003bd2:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8003bd6:	f7ff b993 	b.w	8002f00 <USBD_LL_DataInStage>

08003bda <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8003bda:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8003bde:	f7ff ba0f 	b.w	8003000 <USBD_LL_SOF>

08003be2 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 8003be2:	b510      	push	{r4, lr}
 8003be4:	4604      	mov	r4, r0
	
  default:
    speed = USBD_SPEED_FULL;    
    break;    
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);  
 8003be6:	2101      	movs	r1, #1
 8003be8:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8003bec:	f7ff f9f6 	bl	8002fdc <USBD_LL_SetSpeed>
  
  /*Reset Device*/
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8003bf0:	f8d4 045c 	ldr.w	r0, [r4, #1116]	; 0x45c
}
 8003bf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8003bf8:	f7ff b9d1 	b.w	8002f9e <USBD_LL_Reset>

08003bfc <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8003bfc:	b510      	push	{r4, lr}
 8003bfe:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8003c00:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8003c04:	f7ff f9ed 	bl	8002fe2 <USBD_LL_Suspend>
  /*Enter in STOP mode */
  /* USER CODE BEGIN 2 */  
  if (hpcd->Init.low_power_enable)
 8003c08:	69a3      	ldr	r3, [r4, #24]
 8003c0a:	b123      	cbz	r3, 8003c16 <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8003c0c:	4a02      	ldr	r2, [pc, #8]	; (8003c18 <HAL_PCD_SuspendCallback+0x1c>)
 8003c0e:	6913      	ldr	r3, [r2, #16]
 8003c10:	f043 0306 	orr.w	r3, r3, #6
 8003c14:	6113      	str	r3, [r2, #16]
 8003c16:	bd10      	pop	{r4, pc}
 8003c18:	e000ed00 	.word	0xe000ed00

08003c1c <HAL_PCD_ResumeCallback>:
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8003c1c:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8003c20:	f7ff b9e8 	b.w	8002ff4 <USBD_LL_Resume>

08003c24 <USBD_LL_Init>:
  * @brief  Initializes the Low Level portion of the Device driver.
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_Init (USBD_HandleTypeDef *pdev)
{ 
 8003c24:	b510      	push	{r4, lr}
  pdev->pData = &hpcd_USB_FS;

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_8;
 8003c26:	2302      	movs	r3, #2
 8003c28:	2208      	movs	r2, #8
 8003c2a:	f04f 0e03 	mov.w	lr, #3
{ 
 8003c2e:	4604      	mov	r4, r0
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_8;
 8003c30:	4915      	ldr	r1, [pc, #84]	; (8003c88 <USBD_LL_Init+0x64>)
  hpcd_USB_FS.pData = pdev;
 8003c32:	4816      	ldr	r0, [pc, #88]	; (8003c8c <USBD_LL_Init+0x68>)
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_8;
 8003c34:	e880 400e 	stmia.w	r0, {r1, r2, r3, lr}
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8003c38:	2300      	movs	r3, #0
  hpcd_USB_FS.pData = pdev;
 8003c3a:	f8c0 445c 	str.w	r4, [r0, #1116]	; 0x45c
  pdev->pData = &hpcd_USB_FS;
 8003c3e:	f8c4 0220 	str.w	r0, [r4, #544]	; 0x220
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8003c42:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8003c44:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8003c46:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8003c48:	f7fd fd06 	bl	8001658 <HAL_PCD_Init>
 8003c4c:	b120      	cbz	r0, 8003c58 <USBD_LL_Init+0x34>
  {
    _Error_Handler(__FILE__, __LINE__);
 8003c4e:	f44f 718d 	mov.w	r1, #282	; 0x11a
 8003c52:	480f      	ldr	r0, [pc, #60]	; (8003c90 <USBD_LL_Init+0x6c>)
 8003c54:	f7ff fd6a 	bl	800372c <_Error_Handler>
  }

  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8003c58:	2200      	movs	r2, #0
 8003c5a:	2318      	movs	r3, #24
 8003c5c:	4611      	mov	r1, r2
 8003c5e:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8003c62:	f7fe f8c3 	bl	8001dec <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8003c66:	2358      	movs	r3, #88	; 0x58
 8003c68:	2200      	movs	r2, #0
 8003c6a:	2180      	movs	r1, #128	; 0x80
 8003c6c:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8003c70:	f7fe f8bc 	bl	8001dec <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);  
 8003c74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c78:	2200      	movs	r2, #0
 8003c7a:	2181      	movs	r1, #129	; 0x81
 8003c7c:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8003c80:	f7fe f8b4 	bl	8001dec <HAL_PCDEx_PMAConfig>
  return USBD_OK;
}
 8003c84:	2000      	movs	r0, #0
 8003c86:	bd10      	pop	{r4, pc}
 8003c88:	40005c00 	.word	0x40005c00
 8003c8c:	20000434 	.word	0x20000434
 8003c90:	08003f3d 	.word	0x08003f3d

08003c94 <USBD_LL_Start>:
  * @brief  Starts the Low Level portion of the Device driver. 
  * @param  pdev: Device handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8003c94:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8003c96:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003c9a:	f7fd fd46 	bl	800172a <HAL_PCD_Start>
 8003c9e:	2803      	cmp	r0, #3
 8003ca0:	bf9a      	itte	ls
 8003ca2:	4b02      	ldrls	r3, [pc, #8]	; (8003cac <USBD_LL_Start+0x18>)
 8003ca4:	5c18      	ldrbls	r0, [r3, r0]
 8003ca6:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8003ca8:	bd08      	pop	{r3, pc}
 8003caa:	bf00      	nop
 8003cac:	08003f39 	.word	0x08003f39

08003cb0 <USBD_LL_OpenEP>:
  */
USBD_StatusTypeDef  USBD_LL_OpenEP  (USBD_HandleTypeDef *pdev, 
                                      uint8_t  ep_addr,                                      
                                      uint8_t  ep_type,
                                      uint16_t ep_mps)
{
 8003cb0:	b510      	push	{r4, lr}
 8003cb2:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, 
 8003cb4:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003cb8:	4613      	mov	r3, r2
 8003cba:	4622      	mov	r2, r4
 8003cbc:	f7fd fd60 	bl	8001780 <HAL_PCD_EP_Open>
 8003cc0:	2803      	cmp	r0, #3
 8003cc2:	bf9a      	itte	ls
 8003cc4:	4b01      	ldrls	r3, [pc, #4]	; (8003ccc <USBD_LL_OpenEP+0x1c>)
 8003cc6:	5c18      	ldrbls	r0, [r3, r0]
 8003cc8:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 8003cca:	bd10      	pop	{r4, pc}
 8003ccc:	08003f39 	.word	0x08003f39

08003cd0 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_CloseEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 8003cd0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8003cd2:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003cd6:	f7fd fd76 	bl	80017c6 <HAL_PCD_EP_Close>
 8003cda:	2803      	cmp	r0, #3
 8003cdc:	bf9a      	itte	ls
 8003cde:	4b02      	ldrls	r3, [pc, #8]	; (8003ce8 <USBD_LL_CloseEP+0x18>)
 8003ce0:	5c18      	ldrbls	r0, [r3, r0]
 8003ce2:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8003ce4:	bd08      	pop	{r3, pc}
 8003ce6:	bf00      	nop
 8003ce8:	08003f39 	.word	0x08003f39

08003cec <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_StallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 8003cec:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8003cee:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003cf2:	f7fe f82f 	bl	8001d54 <HAL_PCD_EP_SetStall>
 8003cf6:	2803      	cmp	r0, #3
 8003cf8:	bf9a      	itte	ls
 8003cfa:	4b02      	ldrls	r3, [pc, #8]	; (8003d04 <USBD_LL_StallEP+0x18>)
 8003cfc:	5c18      	ldrbls	r0, [r3, r0]
 8003cfe:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8003d00:	bd08      	pop	{r3, pc}
 8003d02:	bf00      	nop
 8003d04:	08003f39 	.word	0x08003f39

08003d08 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_ClearStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
 8003d08:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8003d0a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003d0e:	f7fe f84a 	bl	8001da6 <HAL_PCD_EP_ClrStall>
 8003d12:	2803      	cmp	r0, #3
 8003d14:	bf9a      	itte	ls
 8003d16:	4b02      	ldrls	r3, [pc, #8]	; (8003d20 <USBD_LL_ClearStallEP+0x18>)
 8003d18:	5c18      	ldrbls	r0, [r3, r0]
 8003d1a:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 8003d1c:	bd08      	pop	{r3, pc}
 8003d1e:	bf00      	nop
 8003d20:	08003f39 	.word	0x08003f39

08003d24 <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP (USBD_HandleTypeDef *pdev, uint8_t ep_addr)   
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 8003d24:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8003d26:	f8d0 3220 	ldr.w	r3, [r0, #544]	; 0x220
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8003d2a:	bf45      	ittet	mi
 8003d2c:	f001 017f 	andmi.w	r1, r1, #127	; 0x7f
 8003d30:	eb03 1341 	addmi.w	r3, r3, r1, lsl #5
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8003d34:	eb03 1341 	addpl.w	r3, r3, r1, lsl #5
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8003d38:	f893 002a 	ldrbmi.w	r0, [r3, #42]	; 0x2a
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8003d3c:	bf58      	it	pl
 8003d3e:	f893 022a 	ldrbpl.w	r0, [r3, #554]	; 0x22a
  }
}
 8003d42:	4770      	bx	lr

08003d44 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint Number
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_LL_SetUSBAddress (USBD_HandleTypeDef *pdev, uint8_t dev_addr)   
{
 8003d44:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8003d46:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003d4a:	f7fd fd05 	bl	8001758 <HAL_PCD_SetAddress>
 8003d4e:	2803      	cmp	r0, #3
 8003d50:	bf9a      	itte	ls
 8003d52:	4b02      	ldrls	r3, [pc, #8]	; (8003d5c <USBD_LL_SetUSBAddress+0x18>)
 8003d54:	5c18      	ldrbls	r0, [r3, r0]
 8003d56:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8003d58:	bd08      	pop	{r3, pc}
 8003d5a:	bf00      	nop
 8003d5c:	08003f39 	.word	0x08003f39

08003d60 <USBD_LL_Transmit>:
  */
USBD_StatusTypeDef  USBD_LL_Transmit (USBD_HandleTypeDef *pdev, 
                                      uint8_t  ep_addr,                                      
                                      uint8_t  *pbuf,
                                      uint16_t  size)
{
 8003d60:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8003d62:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003d66:	f7fd fd67 	bl	8001838 <HAL_PCD_EP_Transmit>
 8003d6a:	2803      	cmp	r0, #3
 8003d6c:	bf9a      	itte	ls
 8003d6e:	4b02      	ldrls	r3, [pc, #8]	; (8003d78 <USBD_LL_Transmit+0x18>)
 8003d70:	5c18      	ldrbls	r0, [r3, r0]
 8003d72:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;    
}
 8003d74:	bd08      	pop	{r3, pc}
 8003d76:	bf00      	nop
 8003d78:	08003f39 	.word	0x08003f39

08003d7c <USBD_LL_PrepareReceive>:
  */
USBD_StatusTypeDef  USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, 
                                           uint8_t  ep_addr,                                      
                                           uint8_t  *pbuf,
                                           uint16_t  size)
{
 8003d7c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8003d7e:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8003d82:	f7fd fd41 	bl	8001808 <HAL_PCD_EP_Receive>
 8003d86:	2803      	cmp	r0, #3
 8003d88:	bf9a      	itte	ls
 8003d8a:	4b02      	ldrls	r3, [pc, #8]	; (8003d94 <USBD_LL_PrepareReceive+0x18>)
 8003d8c:	5c18      	ldrbls	r0, [r3, r0]
 8003d8e:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 8003d90:	bd08      	pop	{r3, pc}
 8003d92:	bf00      	nop
 8003d94:	08003f39 	.word	0x08003f39

08003d98 <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
}
 8003d98:	4800      	ldr	r0, [pc, #0]	; (8003d9c <USBD_static_malloc+0x4>)
 8003d9a:	4770      	bx	lr
 8003d9c:	20000118 	.word	0x20000118

08003da0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  *p pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8003da0:	4770      	bx	lr

08003da2 <HAL_PCDEx_SetConnectionState>:
* @param hpcd: PCD handle
* @param state: connection state (0 : disconnected / 1: connected) 
* @retval None
*/
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
{
 8003da2:	4770      	bx	lr

08003da4 <USBD_FS_DeviceDescriptor>:
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_DeviceDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
  *length = sizeof(USBD_FS_DeviceDesc);
 8003da4:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8003da6:	4801      	ldr	r0, [pc, #4]	; (8003dac <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8003da8:	800b      	strh	r3, [r1, #0]
}
 8003daa:	4770      	bx	lr
 8003dac:	200000e0 	.word	0x200000e0

08003db0 <USBD_FS_LangIDStrDescriptor>:
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_LangIDStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
  *length =  sizeof(USBD_LangIDDesc);  
 8003db0:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8003db2:	4801      	ldr	r0, [pc, #4]	; (8003db8 <USBD_FS_LangIDStrDescriptor+0x8>)
  *length =  sizeof(USBD_LangIDDesc);  
 8003db4:	800b      	strh	r3, [r1, #0]
}
 8003db6:	4770      	bx	lr
 8003db8:	200000f4 	.word	0x200000f4

08003dbc <USBD_FS_ManufacturerStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_ManufacturerStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8003dbc:	b510      	push	{r4, lr}
  USBD_GetString (USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8003dbe:	4c04      	ldr	r4, [pc, #16]	; (8003dd0 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8003dc0:	460a      	mov	r2, r1
 8003dc2:	4804      	ldr	r0, [pc, #16]	; (8003dd4 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8003dc4:	4621      	mov	r1, r4
 8003dc6:	f7ff fac7 	bl	8003358 <USBD_GetString>
  return USBD_StrDesc;
}
 8003dca:	4620      	mov	r0, r4
 8003dcc:	bd10      	pop	{r4, pc}
 8003dce:	bf00      	nop
 8003dd0:	20000894 	.word	0x20000894
 8003dd4:	08003f69 	.word	0x08003f69

08003dd8 <USBD_FS_ProductStrDescriptor>:
{
 8003dd8:	b510      	push	{r4, lr}
    USBD_GetString (USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8003dda:	4c04      	ldr	r4, [pc, #16]	; (8003dec <USBD_FS_ProductStrDescriptor+0x14>)
 8003ddc:	460a      	mov	r2, r1
 8003dde:	4804      	ldr	r0, [pc, #16]	; (8003df0 <USBD_FS_ProductStrDescriptor+0x18>)
 8003de0:	4621      	mov	r1, r4
 8003de2:	f7ff fab9 	bl	8003358 <USBD_GetString>
}
 8003de6:	4620      	mov	r0, r4
 8003de8:	bd10      	pop	{r4, pc}
 8003dea:	bf00      	nop
 8003dec:	20000894 	.word	0x20000894
 8003df0:	08003f7c 	.word	0x08003f7c

08003df4 <USBD_FS_SerialStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_SerialStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8003df4:	b510      	push	{r4, lr}
  if(speed  == USBD_SPEED_HIGH)
  {    
    USBD_GetString (USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 8003df6:	4c04      	ldr	r4, [pc, #16]	; (8003e08 <USBD_FS_SerialStrDescriptor+0x14>)
 8003df8:	460a      	mov	r2, r1
 8003dfa:	4804      	ldr	r0, [pc, #16]	; (8003e0c <USBD_FS_SerialStrDescriptor+0x18>)
 8003dfc:	4621      	mov	r1, r4
 8003dfe:	f7ff faab 	bl	8003358 <USBD_GetString>
  else
  {
    USBD_GetString (USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);    
  }
  return USBD_StrDesc;
}
 8003e02:	4620      	mov	r0, r4
 8003e04:	bd10      	pop	{r4, pc}
 8003e06:	bf00      	nop
 8003e08:	20000894 	.word	0x20000894
 8003e0c:	08003f92 	.word	0x08003f92

08003e10 <USBD_FS_ConfigStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_ConfigStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8003e10:	b510      	push	{r4, lr}
  if(speed  == USBD_SPEED_HIGH)
  {  
    USBD_GetString (USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8003e12:	4c04      	ldr	r4, [pc, #16]	; (8003e24 <USBD_FS_ConfigStrDescriptor+0x14>)
 8003e14:	460a      	mov	r2, r1
 8003e16:	4804      	ldr	r0, [pc, #16]	; (8003e28 <USBD_FS_ConfigStrDescriptor+0x18>)
 8003e18:	4621      	mov	r1, r4
 8003e1a:	f7ff fa9d 	bl	8003358 <USBD_GetString>
  else
  {
    USBD_GetString (USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length); 
  }
  return USBD_StrDesc;  
}
 8003e1e:	4620      	mov	r0, r4
 8003e20:	bd10      	pop	{r4, pc}
 8003e22:	bf00      	nop
 8003e24:	20000894 	.word	0x20000894
 8003e28:	08003f50 	.word	0x08003f50

08003e2c <USBD_FS_InterfaceStrDescriptor>:
* @param  speed : current device speed
* @param  length : pointer to data length variable
* @retval pointer to descriptor buffer
*/
uint8_t *  USBD_FS_InterfaceStrDescriptor( USBD_SpeedTypeDef speed , uint16_t *length)
{
 8003e2c:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString (USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8003e2e:	4c04      	ldr	r4, [pc, #16]	; (8003e40 <USBD_FS_InterfaceStrDescriptor+0x14>)
 8003e30:	460a      	mov	r2, r1
 8003e32:	4804      	ldr	r0, [pc, #16]	; (8003e44 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8003e34:	4621      	mov	r1, r4
 8003e36:	f7ff fa8f 	bl	8003358 <USBD_GetString>
  else
  {
    USBD_GetString (USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;  
}
 8003e3a:	4620      	mov	r0, r4
 8003e3c:	bd10      	pop	{r4, pc}
 8003e3e:	bf00      	nop
 8003e40:	20000894 	.word	0x20000894
 8003e44:	08003f5b 	.word	0x08003f5b

08003e48 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8003e48:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8003e4a:	e003      	b.n	8003e54 <LoopCopyDataInit>

08003e4c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8003e4c:	4b0b      	ldr	r3, [pc, #44]	; (8003e7c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8003e4e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8003e50:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8003e52:	3104      	adds	r1, #4

08003e54 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8003e54:	480a      	ldr	r0, [pc, #40]	; (8003e80 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8003e56:	4b0b      	ldr	r3, [pc, #44]	; (8003e84 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8003e58:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8003e5a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8003e5c:	d3f6      	bcc.n	8003e4c <CopyDataInit>
  ldr r2, =_sbss
 8003e5e:	4a0a      	ldr	r2, [pc, #40]	; (8003e88 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8003e60:	e002      	b.n	8003e68 <LoopFillZerobss>

08003e62 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8003e62:	2300      	movs	r3, #0
  str r3, [r2], #4
 8003e64:	f842 3b04 	str.w	r3, [r2], #4

08003e68 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8003e68:	4b08      	ldr	r3, [pc, #32]	; (8003e8c <LoopFillZerobss+0x24>)
  cmp r2, r3
 8003e6a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8003e6c:	d3f9      	bcc.n	8003e62 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003e6e:	f7ff fe45 	bl	8003afc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003e72:	f000 f80f 	bl	8003e94 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003e76:	f7ff fbcb 	bl	8003610 <main>
  bx lr
 8003e7a:	4770      	bx	lr
  ldr r3, =_sidata
 8003e7c:	08003fa8 	.word	0x08003fa8
  ldr r0, =_sdata
 8003e80:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8003e84:	200000f8 	.word	0x200000f8
  ldr r2, =_sbss
 8003e88:	200000f8 	.word	0x200000f8
  ldr r3, = _ebss
 8003e8c:	20000a94 	.word	0x20000a94

08003e90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003e90:	e7fe      	b.n	8003e90 <ADC1_2_IRQHandler>
	...

08003e94 <__libc_init_array>:
 8003e94:	b570      	push	{r4, r5, r6, lr}
 8003e96:	2500      	movs	r5, #0
 8003e98:	4e0c      	ldr	r6, [pc, #48]	; (8003ecc <__libc_init_array+0x38>)
 8003e9a:	4c0d      	ldr	r4, [pc, #52]	; (8003ed0 <__libc_init_array+0x3c>)
 8003e9c:	1ba4      	subs	r4, r4, r6
 8003e9e:	10a4      	asrs	r4, r4, #2
 8003ea0:	42a5      	cmp	r5, r4
 8003ea2:	d109      	bne.n	8003eb8 <__libc_init_array+0x24>
 8003ea4:	f000 f822 	bl	8003eec <_init>
 8003ea8:	2500      	movs	r5, #0
 8003eaa:	4e0a      	ldr	r6, [pc, #40]	; (8003ed4 <__libc_init_array+0x40>)
 8003eac:	4c0a      	ldr	r4, [pc, #40]	; (8003ed8 <__libc_init_array+0x44>)
 8003eae:	1ba4      	subs	r4, r4, r6
 8003eb0:	10a4      	asrs	r4, r4, #2
 8003eb2:	42a5      	cmp	r5, r4
 8003eb4:	d105      	bne.n	8003ec2 <__libc_init_array+0x2e>
 8003eb6:	bd70      	pop	{r4, r5, r6, pc}
 8003eb8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003ebc:	4798      	blx	r3
 8003ebe:	3501      	adds	r5, #1
 8003ec0:	e7ee      	b.n	8003ea0 <__libc_init_array+0xc>
 8003ec2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003ec6:	4798      	blx	r3
 8003ec8:	3501      	adds	r5, #1
 8003eca:	e7f2      	b.n	8003eb2 <__libc_init_array+0x1e>
 8003ecc:	08003fa0 	.word	0x08003fa0
 8003ed0:	08003fa0 	.word	0x08003fa0
 8003ed4:	08003fa0 	.word	0x08003fa0
 8003ed8:	08003fa4 	.word	0x08003fa4

08003edc <memset>:
 8003edc:	4603      	mov	r3, r0
 8003ede:	4402      	add	r2, r0
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d100      	bne.n	8003ee6 <memset+0xa>
 8003ee4:	4770      	bx	lr
 8003ee6:	f803 1b01 	strb.w	r1, [r3], #1
 8003eea:	e7f9      	b.n	8003ee0 <memset+0x4>

08003eec <_init>:
 8003eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003eee:	bf00      	nop
 8003ef0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ef2:	bc08      	pop	{r3}
 8003ef4:	469e      	mov	lr, r3
 8003ef6:	4770      	bx	lr

08003ef8 <_fini>:
 8003ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003efa:	bf00      	nop
 8003efc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003efe:	bc08      	pop	{r3}
 8003f00:	469e      	mov	lr, r3
 8003f02:	4770      	bx	lr
